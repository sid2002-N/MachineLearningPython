{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOQkF6gFVfhtmQtZxHahiZw"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"2qvQJXXJouQt"},"outputs":[],"source":[" import pandas as pd\n","import numpy as np\n","from matplotlib import pyplot as plt\n","import seaborn as sns"]},{"cell_type":"code","source":["from google.colab import files\n","files.upload()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":130},"id":"aF9nX21fo5_J","executionInfo":{"status":"ok","timestamp":1725422057733,"user_tz":-330,"elapsed":11895,"user":{"displayName":"siddharth P santhosh","userId":"13793384757789431104"}},"outputId":"c515bb64-f85e-4945-88bc-ceed17212440"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-5bfe3210-4cfc-458e-b4cb-b19372f8ea64\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-5bfe3210-4cfc-458e-b4cb-b19372f8ea64\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving fruits (3) (1) (1) (1).csv to fruits (3) (1) (1) (1).csv\n"]},{"output_type":"execute_result","data":{"text/plain":["{'fruits (3) (1) (1) (1).csv': b'fruit_label,fruit_name,fruit_subtype,mass,width,height,color_score\\r\\n1,apple,granny_smith,192,8.4,7.3,0.55\\r\\n1,apple,granny_smith,180,8,6.8,0.59\\r\\n1,apple,granny_smith,176,7.4,7.2,0.6\\r\\n2,mandarin,mandarin,86,6.2,4.7,0.8\\r\\n2,mandarin,mandarin,84,6,4.6,0.79\\r\\n2,mandarin,mandarin,80,5.8,4.3,0.77\\r\\n2,mandarin,mandarin,80,5.9,4.3,0.81\\r\\n2,mandarin,mandarin,76,5.8,4,0.81\\r\\n1,apple,braeburn,178,7.1,7.8,0.92\\r\\n1,apple,braeburn,172,7.4,7,0.89\\r\\n1,apple,braeburn,166,6.9,7.3,0.93\\r\\n1,apple,braeburn,172,7.1,7.6,0.92\\r\\n1,apple,braeburn,154,7,7.1,0.88\\r\\n1,apple,golden_delicious,164,7.3,7.7,0.7\\r\\n1,apple,golden_delicious,152,7.6,7.3,0.69\\r\\n1,apple,golden_delicious,156,7.7,7.1,0.69\\r\\n1,apple,golden_delicious,156,7.6,7.5,0.67\\r\\n1,apple,golden_delicious,168,7.5,7.6,0.73\\r\\n1,apple,cripps_pink,162,7.5,7.1,0.83\\r\\n1,apple,cripps_pink,162,7.4,7.2,0.85\\r\\n1,apple,cripps_pink,160,7.5,7.5,0.86\\r\\n1,apple,cripps_pink,156,7.4,7.4,0.84\\r\\n1,apple,cripps_pink,140,7.3,7.1,0.87\\r\\n1,apple,cripps_pink,170,7.6,7.9,0.88\\r\\n3,orange,spanish_jumbo,342,9,9.4,0.75\\r\\n3,orange,spanish_jumbo,356,9.2,9.2,0.75\\r\\n3,orange,spanish_jumbo,362,9.6,9.2,0.74\\r\\n3,orange,selected_seconds,204,7.5,9.2,0.77\\r\\n3,orange,selected_seconds,140,6.7,7.1,0.72\\r\\n3,orange,selected_seconds,160,7,7.4,0.81\\r\\n3,orange,selected_seconds,158,7.1,7.5,0.79\\r\\n3,orange,selected_seconds,210,7.8,8,0.82\\r\\n3,orange,selected_seconds,164,7.2,7,0.8\\r\\n3,orange,turkey_navel,190,7.5,8.1,0.74\\r\\n3,orange,turkey_navel,142,7.6,7.8,0.75\\r\\n3,orange,turkey_navel,150,7.1,7.9,0.75\\r\\n3,orange,turkey_navel,160,7.1,7.6,0.76\\r\\n3,orange,turkey_navel,154,7.3,7.3,0.79\\r\\n3,orange,turkey_navel,158,7.2,7.8,0.77\\r\\n3,orange,turkey_navel,144,6.8,7.4,0.75\\r\\n3,orange,turkey_navel,154,7.1,7.5,0.78\\r\\n3,orange,turkey_navel,180,7.6,8.2,0.79\\r\\n3,orange,turkey_navel,154,7.2,7.2,0.82\\r\\n4,lemon,spanish_belsan,194,7.2,10.3,0.7\\r\\n4,lemon,spanish_belsan,200,7.3,10.5,0.72\\r\\n4,lemon,spanish_belsan,186,7.2,9.2,0.72\\r\\n4,lemon,spanish_belsan,216,7.3,10.2,0.71\\r\\n4,lemon,spanish_belsan,196,7.3,9.7,0.72\\r\\n4,lemon,spanish_belsan,174,7.3,10.1,0.72\\r\\n4,lemon,unknown,132,5.8,8.7,0.73\\r\\n4,lemon,unknown,130,6,8.2,0.71\\r\\n4,lemon,unknown,116,6,7.5,0.72\\r\\n4,lemon,unknown,118,5.9,8,0.72\\r\\n4,lemon,unknown,120,6,8.4,0.74\\r\\n4,lemon,unknown,116,6.1,8.5,0.71\\r\\n4,lemon,unknown,116,6.3,7.7,0.72\\r\\n4,lemon,unknown,116,5.9,8.1,0.73\\r\\n4,lemon,unknown,152,6.5,8.5,0.72\\r\\n4,lemon,unknown,118,6.1,8.1,0.7'}"]},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["fruit = pd.read_csv('fruits (3) (1) (1) (1).csv')\n","fruit"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"OxFyd_REpCd0","executionInfo":{"status":"ok","timestamp":1725422060627,"user_tz":-330,"elapsed":734,"user":{"displayName":"siddharth P santhosh","userId":"13793384757789431104"}},"outputId":"cb784b6c-6516-4bf3-929d-460c356af26a"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["    fruit_label fruit_name     fruit_subtype  mass  width  height  color_score\n","0             1      apple      granny_smith   192    8.4     7.3         0.55\n","1             1      apple      granny_smith   180    8.0     6.8         0.59\n","2             1      apple      granny_smith   176    7.4     7.2         0.60\n","3             2   mandarin          mandarin    86    6.2     4.7         0.80\n","4             2   mandarin          mandarin    84    6.0     4.6         0.79\n","5             2   mandarin          mandarin    80    5.8     4.3         0.77\n","6             2   mandarin          mandarin    80    5.9     4.3         0.81\n","7             2   mandarin          mandarin    76    5.8     4.0         0.81\n","8             1      apple          braeburn   178    7.1     7.8         0.92\n","9             1      apple          braeburn   172    7.4     7.0         0.89\n","10            1      apple          braeburn   166    6.9     7.3         0.93\n","11            1      apple          braeburn   172    7.1     7.6         0.92\n","12            1      apple          braeburn   154    7.0     7.1         0.88\n","13            1      apple  golden_delicious   164    7.3     7.7         0.70\n","14            1      apple  golden_delicious   152    7.6     7.3         0.69\n","15            1      apple  golden_delicious   156    7.7     7.1         0.69\n","16            1      apple  golden_delicious   156    7.6     7.5         0.67\n","17            1      apple  golden_delicious   168    7.5     7.6         0.73\n","18            1      apple       cripps_pink   162    7.5     7.1         0.83\n","19            1      apple       cripps_pink   162    7.4     7.2         0.85\n","20            1      apple       cripps_pink   160    7.5     7.5         0.86\n","21            1      apple       cripps_pink   156    7.4     7.4         0.84\n","22            1      apple       cripps_pink   140    7.3     7.1         0.87\n","23            1      apple       cripps_pink   170    7.6     7.9         0.88\n","24            3     orange     spanish_jumbo   342    9.0     9.4         0.75\n","25            3     orange     spanish_jumbo   356    9.2     9.2         0.75\n","26            3     orange     spanish_jumbo   362    9.6     9.2         0.74\n","27            3     orange  selected_seconds   204    7.5     9.2         0.77\n","28            3     orange  selected_seconds   140    6.7     7.1         0.72\n","29            3     orange  selected_seconds   160    7.0     7.4         0.81\n","30            3     orange  selected_seconds   158    7.1     7.5         0.79\n","31            3     orange  selected_seconds   210    7.8     8.0         0.82\n","32            3     orange  selected_seconds   164    7.2     7.0         0.80\n","33            3     orange      turkey_navel   190    7.5     8.1         0.74\n","34            3     orange      turkey_navel   142    7.6     7.8         0.75\n","35            3     orange      turkey_navel   150    7.1     7.9         0.75\n","36            3     orange      turkey_navel   160    7.1     7.6         0.76\n","37            3     orange      turkey_navel   154    7.3     7.3         0.79\n","38            3     orange      turkey_navel   158    7.2     7.8         0.77\n","39            3     orange      turkey_navel   144    6.8     7.4         0.75\n","40            3     orange      turkey_navel   154    7.1     7.5         0.78\n","41            3     orange      turkey_navel   180    7.6     8.2         0.79\n","42            3     orange      turkey_navel   154    7.2     7.2         0.82\n","43            4      lemon    spanish_belsan   194    7.2    10.3         0.70\n","44            4      lemon    spanish_belsan   200    7.3    10.5         0.72\n","45            4      lemon    spanish_belsan   186    7.2     9.2         0.72\n","46            4      lemon    spanish_belsan   216    7.3    10.2         0.71\n","47            4      lemon    spanish_belsan   196    7.3     9.7         0.72\n","48            4      lemon    spanish_belsan   174    7.3    10.1         0.72\n","49            4      lemon           unknown   132    5.8     8.7         0.73\n","50            4      lemon           unknown   130    6.0     8.2         0.71\n","51            4      lemon           unknown   116    6.0     7.5         0.72\n","52            4      lemon           unknown   118    5.9     8.0         0.72\n","53            4      lemon           unknown   120    6.0     8.4         0.74\n","54            4      lemon           unknown   116    6.1     8.5         0.71\n","55            4      lemon           unknown   116    6.3     7.7         0.72\n","56            4      lemon           unknown   116    5.9     8.1         0.73\n","57            4      lemon           unknown   152    6.5     8.5         0.72\n","58            4      lemon           unknown   118    6.1     8.1         0.70"],"text/html":["\n","  <div id=\"df-8a22d36e-efa9-417d-b473-31eb8983d18a\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>fruit_label</th>\n","      <th>fruit_name</th>\n","      <th>fruit_subtype</th>\n","      <th>mass</th>\n","      <th>width</th>\n","      <th>height</th>\n","      <th>color_score</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>apple</td>\n","      <td>granny_smith</td>\n","      <td>192</td>\n","      <td>8.4</td>\n","      <td>7.3</td>\n","      <td>0.55</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>apple</td>\n","      <td>granny_smith</td>\n","      <td>180</td>\n","      <td>8.0</td>\n","      <td>6.8</td>\n","      <td>0.59</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>apple</td>\n","      <td>granny_smith</td>\n","      <td>176</td>\n","      <td>7.4</td>\n","      <td>7.2</td>\n","      <td>0.60</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2</td>\n","      <td>mandarin</td>\n","      <td>mandarin</td>\n","      <td>86</td>\n","      <td>6.2</td>\n","      <td>4.7</td>\n","      <td>0.80</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2</td>\n","      <td>mandarin</td>\n","      <td>mandarin</td>\n","      <td>84</td>\n","      <td>6.0</td>\n","      <td>4.6</td>\n","      <td>0.79</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>2</td>\n","      <td>mandarin</td>\n","      <td>mandarin</td>\n","      <td>80</td>\n","      <td>5.8</td>\n","      <td>4.3</td>\n","      <td>0.77</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>2</td>\n","      <td>mandarin</td>\n","      <td>mandarin</td>\n","      <td>80</td>\n","      <td>5.9</td>\n","      <td>4.3</td>\n","      <td>0.81</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>2</td>\n","      <td>mandarin</td>\n","      <td>mandarin</td>\n","      <td>76</td>\n","      <td>5.8</td>\n","      <td>4.0</td>\n","      <td>0.81</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>1</td>\n","      <td>apple</td>\n","      <td>braeburn</td>\n","      <td>178</td>\n","      <td>7.1</td>\n","      <td>7.8</td>\n","      <td>0.92</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>1</td>\n","      <td>apple</td>\n","      <td>braeburn</td>\n","      <td>172</td>\n","      <td>7.4</td>\n","      <td>7.0</td>\n","      <td>0.89</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>1</td>\n","      <td>apple</td>\n","      <td>braeburn</td>\n","      <td>166</td>\n","      <td>6.9</td>\n","      <td>7.3</td>\n","      <td>0.93</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>1</td>\n","      <td>apple</td>\n","      <td>braeburn</td>\n","      <td>172</td>\n","      <td>7.1</td>\n","      <td>7.6</td>\n","      <td>0.92</td>\n","    </tr>\n","    <tr>\n","      <th>12</th>\n","      <td>1</td>\n","      <td>apple</td>\n","      <td>braeburn</td>\n","      <td>154</td>\n","      <td>7.0</td>\n","      <td>7.1</td>\n","      <td>0.88</td>\n","    </tr>\n","    <tr>\n","      <th>13</th>\n","      <td>1</td>\n","      <td>apple</td>\n","      <td>golden_delicious</td>\n","      <td>164</td>\n","      <td>7.3</td>\n","      <td>7.7</td>\n","      <td>0.70</td>\n","    </tr>\n","    <tr>\n","      <th>14</th>\n","      <td>1</td>\n","      <td>apple</td>\n","      <td>golden_delicious</td>\n","      <td>152</td>\n","      <td>7.6</td>\n","      <td>7.3</td>\n","      <td>0.69</td>\n","    </tr>\n","    <tr>\n","      <th>15</th>\n","      <td>1</td>\n","      <td>apple</td>\n","      <td>golden_delicious</td>\n","      <td>156</td>\n","      <td>7.7</td>\n","      <td>7.1</td>\n","      <td>0.69</td>\n","    </tr>\n","    <tr>\n","      <th>16</th>\n","      <td>1</td>\n","      <td>apple</td>\n","      <td>golden_delicious</td>\n","      <td>156</td>\n","      <td>7.6</td>\n","      <td>7.5</td>\n","      <td>0.67</td>\n","    </tr>\n","    <tr>\n","      <th>17</th>\n","      <td>1</td>\n","      <td>apple</td>\n","      <td>golden_delicious</td>\n","      <td>168</td>\n","      <td>7.5</td>\n","      <td>7.6</td>\n","      <td>0.73</td>\n","    </tr>\n","    <tr>\n","      <th>18</th>\n","      <td>1</td>\n","      <td>apple</td>\n","      <td>cripps_pink</td>\n","      <td>162</td>\n","      <td>7.5</td>\n","      <td>7.1</td>\n","      <td>0.83</td>\n","    </tr>\n","    <tr>\n","      <th>19</th>\n","      <td>1</td>\n","      <td>apple</td>\n","      <td>cripps_pink</td>\n","      <td>162</td>\n","      <td>7.4</td>\n","      <td>7.2</td>\n","      <td>0.85</td>\n","    </tr>\n","    <tr>\n","      <th>20</th>\n","      <td>1</td>\n","      <td>apple</td>\n","      <td>cripps_pink</td>\n","      <td>160</td>\n","      <td>7.5</td>\n","      <td>7.5</td>\n","      <td>0.86</td>\n","    </tr>\n","    <tr>\n","      <th>21</th>\n","      <td>1</td>\n","      <td>apple</td>\n","      <td>cripps_pink</td>\n","      <td>156</td>\n","      <td>7.4</td>\n","      <td>7.4</td>\n","      <td>0.84</td>\n","    </tr>\n","    <tr>\n","      <th>22</th>\n","      <td>1</td>\n","      <td>apple</td>\n","      <td>cripps_pink</td>\n","      <td>140</td>\n","      <td>7.3</td>\n","      <td>7.1</td>\n","      <td>0.87</td>\n","    </tr>\n","    <tr>\n","      <th>23</th>\n","      <td>1</td>\n","      <td>apple</td>\n","      <td>cripps_pink</td>\n","      <td>170</td>\n","      <td>7.6</td>\n","      <td>7.9</td>\n","      <td>0.88</td>\n","    </tr>\n","    <tr>\n","      <th>24</th>\n","      <td>3</td>\n","      <td>orange</td>\n","      <td>spanish_jumbo</td>\n","      <td>342</td>\n","      <td>9.0</td>\n","      <td>9.4</td>\n","      <td>0.75</td>\n","    </tr>\n","    <tr>\n","      <th>25</th>\n","      <td>3</td>\n","      <td>orange</td>\n","      <td>spanish_jumbo</td>\n","      <td>356</td>\n","      <td>9.2</td>\n","      <td>9.2</td>\n","      <td>0.75</td>\n","    </tr>\n","    <tr>\n","      <th>26</th>\n","      <td>3</td>\n","      <td>orange</td>\n","      <td>spanish_jumbo</td>\n","      <td>362</td>\n","      <td>9.6</td>\n","      <td>9.2</td>\n","      <td>0.74</td>\n","    </tr>\n","    <tr>\n","      <th>27</th>\n","      <td>3</td>\n","      <td>orange</td>\n","      <td>selected_seconds</td>\n","      <td>204</td>\n","      <td>7.5</td>\n","      <td>9.2</td>\n","      <td>0.77</td>\n","    </tr>\n","    <tr>\n","      <th>28</th>\n","      <td>3</td>\n","      <td>orange</td>\n","      <td>selected_seconds</td>\n","      <td>140</td>\n","      <td>6.7</td>\n","      <td>7.1</td>\n","      <td>0.72</td>\n","    </tr>\n","    <tr>\n","      <th>29</th>\n","      <td>3</td>\n","      <td>orange</td>\n","      <td>selected_seconds</td>\n","      <td>160</td>\n","      <td>7.0</td>\n","      <td>7.4</td>\n","      <td>0.81</td>\n","    </tr>\n","    <tr>\n","      <th>30</th>\n","      <td>3</td>\n","      <td>orange</td>\n","      <td>selected_seconds</td>\n","      <td>158</td>\n","      <td>7.1</td>\n","      <td>7.5</td>\n","      <td>0.79</td>\n","    </tr>\n","    <tr>\n","      <th>31</th>\n","      <td>3</td>\n","      <td>orange</td>\n","      <td>selected_seconds</td>\n","      <td>210</td>\n","      <td>7.8</td>\n","      <td>8.0</td>\n","      <td>0.82</td>\n","    </tr>\n","    <tr>\n","      <th>32</th>\n","      <td>3</td>\n","      <td>orange</td>\n","      <td>selected_seconds</td>\n","      <td>164</td>\n","      <td>7.2</td>\n","      <td>7.0</td>\n","      <td>0.80</td>\n","    </tr>\n","    <tr>\n","      <th>33</th>\n","      <td>3</td>\n","      <td>orange</td>\n","      <td>turkey_navel</td>\n","      <td>190</td>\n","      <td>7.5</td>\n","      <td>8.1</td>\n","      <td>0.74</td>\n","    </tr>\n","    <tr>\n","      <th>34</th>\n","      <td>3</td>\n","      <td>orange</td>\n","      <td>turkey_navel</td>\n","      <td>142</td>\n","      <td>7.6</td>\n","      <td>7.8</td>\n","      <td>0.75</td>\n","    </tr>\n","    <tr>\n","      <th>35</th>\n","      <td>3</td>\n","      <td>orange</td>\n","      <td>turkey_navel</td>\n","      <td>150</td>\n","      <td>7.1</td>\n","      <td>7.9</td>\n","      <td>0.75</td>\n","    </tr>\n","    <tr>\n","      <th>36</th>\n","      <td>3</td>\n","      <td>orange</td>\n","      <td>turkey_navel</td>\n","      <td>160</td>\n","      <td>7.1</td>\n","      <td>7.6</td>\n","      <td>0.76</td>\n","    </tr>\n","    <tr>\n","      <th>37</th>\n","      <td>3</td>\n","      <td>orange</td>\n","      <td>turkey_navel</td>\n","      <td>154</td>\n","      <td>7.3</td>\n","      <td>7.3</td>\n","      <td>0.79</td>\n","    </tr>\n","    <tr>\n","      <th>38</th>\n","      <td>3</td>\n","      <td>orange</td>\n","      <td>turkey_navel</td>\n","      <td>158</td>\n","      <td>7.2</td>\n","      <td>7.8</td>\n","      <td>0.77</td>\n","    </tr>\n","    <tr>\n","      <th>39</th>\n","      <td>3</td>\n","      <td>orange</td>\n","      <td>turkey_navel</td>\n","      <td>144</td>\n","      <td>6.8</td>\n","      <td>7.4</td>\n","      <td>0.75</td>\n","    </tr>\n","    <tr>\n","      <th>40</th>\n","      <td>3</td>\n","      <td>orange</td>\n","      <td>turkey_navel</td>\n","      <td>154</td>\n","      <td>7.1</td>\n","      <td>7.5</td>\n","      <td>0.78</td>\n","    </tr>\n","    <tr>\n","      <th>41</th>\n","      <td>3</td>\n","      <td>orange</td>\n","      <td>turkey_navel</td>\n","      <td>180</td>\n","      <td>7.6</td>\n","      <td>8.2</td>\n","      <td>0.79</td>\n","    </tr>\n","    <tr>\n","      <th>42</th>\n","      <td>3</td>\n","      <td>orange</td>\n","      <td>turkey_navel</td>\n","      <td>154</td>\n","      <td>7.2</td>\n","      <td>7.2</td>\n","      <td>0.82</td>\n","    </tr>\n","    <tr>\n","      <th>43</th>\n","      <td>4</td>\n","      <td>lemon</td>\n","      <td>spanish_belsan</td>\n","      <td>194</td>\n","      <td>7.2</td>\n","      <td>10.3</td>\n","      <td>0.70</td>\n","    </tr>\n","    <tr>\n","      <th>44</th>\n","      <td>4</td>\n","      <td>lemon</td>\n","      <td>spanish_belsan</td>\n","      <td>200</td>\n","      <td>7.3</td>\n","      <td>10.5</td>\n","      <td>0.72</td>\n","    </tr>\n","    <tr>\n","      <th>45</th>\n","      <td>4</td>\n","      <td>lemon</td>\n","      <td>spanish_belsan</td>\n","      <td>186</td>\n","      <td>7.2</td>\n","      <td>9.2</td>\n","      <td>0.72</td>\n","    </tr>\n","    <tr>\n","      <th>46</th>\n","      <td>4</td>\n","      <td>lemon</td>\n","      <td>spanish_belsan</td>\n","      <td>216</td>\n","      <td>7.3</td>\n","      <td>10.2</td>\n","      <td>0.71</td>\n","    </tr>\n","    <tr>\n","      <th>47</th>\n","      <td>4</td>\n","      <td>lemon</td>\n","      <td>spanish_belsan</td>\n","      <td>196</td>\n","      <td>7.3</td>\n","      <td>9.7</td>\n","      <td>0.72</td>\n","    </tr>\n","    <tr>\n","      <th>48</th>\n","      <td>4</td>\n","      <td>lemon</td>\n","      <td>spanish_belsan</td>\n","      <td>174</td>\n","      <td>7.3</td>\n","      <td>10.1</td>\n","      <td>0.72</td>\n","    </tr>\n","    <tr>\n","      <th>49</th>\n","      <td>4</td>\n","      <td>lemon</td>\n","      <td>unknown</td>\n","      <td>132</td>\n","      <td>5.8</td>\n","      <td>8.7</td>\n","      <td>0.73</td>\n","    </tr>\n","    <tr>\n","      <th>50</th>\n","      <td>4</td>\n","      <td>lemon</td>\n","      <td>unknown</td>\n","      <td>130</td>\n","      <td>6.0</td>\n","      <td>8.2</td>\n","      <td>0.71</td>\n","    </tr>\n","    <tr>\n","      <th>51</th>\n","      <td>4</td>\n","      <td>lemon</td>\n","      <td>unknown</td>\n","      <td>116</td>\n","      <td>6.0</td>\n","      <td>7.5</td>\n","      <td>0.72</td>\n","    </tr>\n","    <tr>\n","      <th>52</th>\n","      <td>4</td>\n","      <td>lemon</td>\n","      <td>unknown</td>\n","      <td>118</td>\n","      <td>5.9</td>\n","      <td>8.0</td>\n","      <td>0.72</td>\n","    </tr>\n","    <tr>\n","      <th>53</th>\n","      <td>4</td>\n","      <td>lemon</td>\n","      <td>unknown</td>\n","      <td>120</td>\n","      <td>6.0</td>\n","      <td>8.4</td>\n","      <td>0.74</td>\n","    </tr>\n","    <tr>\n","      <th>54</th>\n","      <td>4</td>\n","      <td>lemon</td>\n","      <td>unknown</td>\n","      <td>116</td>\n","      <td>6.1</td>\n","      <td>8.5</td>\n","      <td>0.71</td>\n","    </tr>\n","    <tr>\n","      <th>55</th>\n","      <td>4</td>\n","      <td>lemon</td>\n","      <td>unknown</td>\n","      <td>116</td>\n","      <td>6.3</td>\n","      <td>7.7</td>\n","      <td>0.72</td>\n","    </tr>\n","    <tr>\n","      <th>56</th>\n","      <td>4</td>\n","      <td>lemon</td>\n","      <td>unknown</td>\n","      <td>116</td>\n","      <td>5.9</td>\n","      <td>8.1</td>\n","      <td>0.73</td>\n","    </tr>\n","    <tr>\n","      <th>57</th>\n","      <td>4</td>\n","      <td>lemon</td>\n","      <td>unknown</td>\n","      <td>152</td>\n","      <td>6.5</td>\n","      <td>8.5</td>\n","      <td>0.72</td>\n","    </tr>\n","    <tr>\n","      <th>58</th>\n","      <td>4</td>\n","      <td>lemon</td>\n","      <td>unknown</td>\n","      <td>118</td>\n","      <td>6.1</td>\n","      <td>8.1</td>\n","      <td>0.70</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8a22d36e-efa9-417d-b473-31eb8983d18a')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-8a22d36e-efa9-417d-b473-31eb8983d18a button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-8a22d36e-efa9-417d-b473-31eb8983d18a');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-84341347-fe42-4316-b322-dbe01a697d39\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-84341347-fe42-4316-b322-dbe01a697d39')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-84341347-fe42-4316-b322-dbe01a697d39 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_dba012d8-ca60-43b8-9d07-c22abc898552\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('fruit')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_dba012d8-ca60-43b8-9d07-c22abc898552 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('fruit');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"fruit","summary":"{\n  \"name\": \"fruit\",\n  \"rows\": 59,\n  \"fields\": [\n    {\n      \"column\": \"fruit_label\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 4,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2,\n          4,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"fruit_name\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"mandarin\",\n          \"lemon\",\n          \"apple\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"fruit_subtype\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"spanish_belsan\",\n          \"mandarin\",\n          \"spanish_jumbo\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 55,\n        \"min\": 76,\n        \"max\": 362,\n        \"num_unique_values\": 40,\n        \"samples\": [\n          342,\n          160,\n          162\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"width\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.8169378756639519,\n        \"min\": 5.8,\n        \"max\": 9.6,\n        \"num_unique_values\": 24,\n        \"samples\": [\n          6.9,\n          9.6,\n          8.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"height\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.3610169127606655,\n        \"min\": 4.0,\n        \"max\": 10.5,\n        \"num_unique_values\": 28,\n        \"samples\": [\n          7.6,\n          8.7,\n          7.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"color_score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.07685747776101505,\n        \"min\": 0.55,\n        \"max\": 0.93,\n        \"num_unique_values\": 27,\n        \"samples\": [\n          0.89,\n          0.67,\n          0.93\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["fruit.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kjhc1R5PpN50","executionInfo":{"status":"ok","timestamp":1725422064828,"user_tz":-330,"elapsed":620,"user":{"displayName":"siddharth P santhosh","userId":"13793384757789431104"}},"outputId":"1c662cd2-1b39-42e8-9487-bccd8460d28c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 59 entries, 0 to 58\n","Data columns (total 7 columns):\n"," #   Column         Non-Null Count  Dtype  \n","---  ------         --------------  -----  \n"," 0   fruit_label    59 non-null     int64  \n"," 1   fruit_name     59 non-null     object \n"," 2   fruit_subtype  59 non-null     object \n"," 3   mass           59 non-null     int64  \n"," 4   width          59 non-null     float64\n"," 5   height         59 non-null     float64\n"," 6   color_score    59 non-null     float64\n","dtypes: float64(3), int64(2), object(2)\n","memory usage: 3.4+ KB\n"]}]},{"cell_type":"code","source":["print(fruit.head())\n","print(fruit.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"frC2w48XpOUU","executionInfo":{"status":"ok","timestamp":1725422067136,"user_tz":-330,"elapsed":483,"user":{"displayName":"siddharth P santhosh","userId":"13793384757789431104"}},"outputId":"97c4e66e-3bfd-4bfb-a31a-ff23534aad54"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["   fruit_label fruit_name fruit_subtype  mass  width  height  color_score\n","0            1      apple  granny_smith   192    8.4     7.3         0.55\n","1            1      apple  granny_smith   180    8.0     6.8         0.59\n","2            1      apple  granny_smith   176    7.4     7.2         0.60\n","3            2   mandarin      mandarin    86    6.2     4.7         0.80\n","4            2   mandarin      mandarin    84    6.0     4.6         0.79\n","(59, 7)\n"]}]},{"cell_type":"code","source":["print(fruit['fruit_name'].unique())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"f4Owe-IppOdC","executionInfo":{"status":"ok","timestamp":1725422069517,"user_tz":-330,"elapsed":514,"user":{"displayName":"siddharth P santhosh","userId":"13793384757789431104"}},"outputId":"91a12bc1-63a0-45c1-aec9-5fd24ce4d896"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["['apple' 'mandarin' 'orange' 'lemon']\n"]}]},{"cell_type":"code","source":["X = fruit.drop(columns = ['fruit_label','fruit_subtype','fruit_name'], axis = 1)\n","Y = fruit['fruit_label']"],"metadata":{"id":"RArXHuqNpOlj"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split"],"metadata":{"id":"mbB1y5SSpOtw"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["X_train ,X_test, Y_train,Y_test = train_test_split(X,Y, test_size = 0.1, stratify = Y, random_state = 1)\n","X_train"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"_Jta7SRIpO2l","executionInfo":{"status":"ok","timestamp":1725422076373,"user_tz":-330,"elapsed":14,"user":{"displayName":"siddharth P santhosh","userId":"13793384757789431104"}},"outputId":"7c040b5a-8fc6-4112-c4a7-758fec94e1b2"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["    mass  width  height  color_score\n","48   174    7.3    10.1         0.72\n","34   142    7.6     7.8         0.75\n","0    192    8.4     7.3         0.55\n","24   342    9.0     9.4         0.75\n","36   160    7.1     7.6         0.76\n","53   120    6.0     8.4         0.74\n","22   140    7.3     7.1         0.87\n","42   154    7.2     7.2         0.82\n","5     80    5.8     4.3         0.77\n","50   130    6.0     8.2         0.71\n","49   132    5.8     8.7         0.73\n","52   118    5.9     8.0         0.72\n","20   160    7.5     7.5         0.86\n","4     84    6.0     4.6         0.79\n","3     86    6.2     4.7         0.80\n","35   150    7.1     7.9         0.75\n","33   190    7.5     8.1         0.74\n","14   152    7.6     7.3         0.69\n","29   160    7.0     7.4         0.81\n","39   144    6.8     7.4         0.75\n","45   186    7.2     9.2         0.72\n","31   210    7.8     8.0         0.82\n","57   152    6.5     8.5         0.72\n","40   154    7.1     7.5         0.78\n","18   162    7.5     7.1         0.83\n","11   172    7.1     7.6         0.92\n","54   116    6.1     8.5         0.71\n","12   154    7.0     7.1         0.88\n","9    172    7.4     7.0         0.89\n","6     80    5.9     4.3         0.81\n","25   356    9.2     9.2         0.75\n","19   162    7.4     7.2         0.85\n","37   154    7.3     7.3         0.79\n","58   118    6.1     8.1         0.70\n","15   156    7.7     7.1         0.69\n","1    180    8.0     6.8         0.59\n","27   204    7.5     9.2         0.77\n","43   194    7.2    10.3         0.70\n","51   116    6.0     7.5         0.72\n","21   156    7.4     7.4         0.84\n","26   362    9.6     9.2         0.74\n","30   158    7.1     7.5         0.79\n","32   164    7.2     7.0         0.80\n","2    176    7.4     7.2         0.60\n","8    178    7.1     7.8         0.92\n","13   164    7.3     7.7         0.70\n","7     76    5.8     4.0         0.81\n","47   196    7.3     9.7         0.72\n","44   200    7.3    10.5         0.72\n","17   168    7.5     7.6         0.73\n","41   180    7.6     8.2         0.79\n","23   170    7.6     7.9         0.88\n","55   116    6.3     7.7         0.72"],"text/html":["\n","  <div id=\"df-2ba07a37-1db0-4f72-8101-eaa35416f481\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>mass</th>\n","      <th>width</th>\n","      <th>height</th>\n","      <th>color_score</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>48</th>\n","      <td>174</td>\n","      <td>7.3</td>\n","      <td>10.1</td>\n","      <td>0.72</td>\n","    </tr>\n","    <tr>\n","      <th>34</th>\n","      <td>142</td>\n","      <td>7.6</td>\n","      <td>7.8</td>\n","      <td>0.75</td>\n","    </tr>\n","    <tr>\n","      <th>0</th>\n","      <td>192</td>\n","      <td>8.4</td>\n","      <td>7.3</td>\n","      <td>0.55</td>\n","    </tr>\n","    <tr>\n","      <th>24</th>\n","      <td>342</td>\n","      <td>9.0</td>\n","      <td>9.4</td>\n","      <td>0.75</td>\n","    </tr>\n","    <tr>\n","      <th>36</th>\n","      <td>160</td>\n","      <td>7.1</td>\n","      <td>7.6</td>\n","      <td>0.76</td>\n","    </tr>\n","    <tr>\n","      <th>53</th>\n","      <td>120</td>\n","      <td>6.0</td>\n","      <td>8.4</td>\n","      <td>0.74</td>\n","    </tr>\n","    <tr>\n","      <th>22</th>\n","      <td>140</td>\n","      <td>7.3</td>\n","      <td>7.1</td>\n","      <td>0.87</td>\n","    </tr>\n","    <tr>\n","      <th>42</th>\n","      <td>154</td>\n","      <td>7.2</td>\n","      <td>7.2</td>\n","      <td>0.82</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>80</td>\n","      <td>5.8</td>\n","      <td>4.3</td>\n","      <td>0.77</td>\n","    </tr>\n","    <tr>\n","      <th>50</th>\n","      <td>130</td>\n","      <td>6.0</td>\n","      <td>8.2</td>\n","      <td>0.71</td>\n","    </tr>\n","    <tr>\n","      <th>49</th>\n","      <td>132</td>\n","      <td>5.8</td>\n","      <td>8.7</td>\n","      <td>0.73</td>\n","    </tr>\n","    <tr>\n","      <th>52</th>\n","      <td>118</td>\n","      <td>5.9</td>\n","      <td>8.0</td>\n","      <td>0.72</td>\n","    </tr>\n","    <tr>\n","      <th>20</th>\n","      <td>160</td>\n","      <td>7.5</td>\n","      <td>7.5</td>\n","      <td>0.86</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>84</td>\n","      <td>6.0</td>\n","      <td>4.6</td>\n","      <td>0.79</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>86</td>\n","      <td>6.2</td>\n","      <td>4.7</td>\n","      <td>0.80</td>\n","    </tr>\n","    <tr>\n","      <th>35</th>\n","      <td>150</td>\n","      <td>7.1</td>\n","      <td>7.9</td>\n","      <td>0.75</td>\n","    </tr>\n","    <tr>\n","      <th>33</th>\n","      <td>190</td>\n","      <td>7.5</td>\n","      <td>8.1</td>\n","      <td>0.74</td>\n","    </tr>\n","    <tr>\n","      <th>14</th>\n","      <td>152</td>\n","      <td>7.6</td>\n","      <td>7.3</td>\n","      <td>0.69</td>\n","    </tr>\n","    <tr>\n","      <th>29</th>\n","      <td>160</td>\n","      <td>7.0</td>\n","      <td>7.4</td>\n","      <td>0.81</td>\n","    </tr>\n","    <tr>\n","      <th>39</th>\n","      <td>144</td>\n","      <td>6.8</td>\n","      <td>7.4</td>\n","      <td>0.75</td>\n","    </tr>\n","    <tr>\n","      <th>45</th>\n","      <td>186</td>\n","      <td>7.2</td>\n","      <td>9.2</td>\n","      <td>0.72</td>\n","    </tr>\n","    <tr>\n","      <th>31</th>\n","      <td>210</td>\n","      <td>7.8</td>\n","      <td>8.0</td>\n","      <td>0.82</td>\n","    </tr>\n","    <tr>\n","      <th>57</th>\n","      <td>152</td>\n","      <td>6.5</td>\n","      <td>8.5</td>\n","      <td>0.72</td>\n","    </tr>\n","    <tr>\n","      <th>40</th>\n","      <td>154</td>\n","      <td>7.1</td>\n","      <td>7.5</td>\n","      <td>0.78</td>\n","    </tr>\n","    <tr>\n","      <th>18</th>\n","      <td>162</td>\n","      <td>7.5</td>\n","      <td>7.1</td>\n","      <td>0.83</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>172</td>\n","      <td>7.1</td>\n","      <td>7.6</td>\n","      <td>0.92</td>\n","    </tr>\n","    <tr>\n","      <th>54</th>\n","      <td>116</td>\n","      <td>6.1</td>\n","      <td>8.5</td>\n","      <td>0.71</td>\n","    </tr>\n","    <tr>\n","      <th>12</th>\n","      <td>154</td>\n","      <td>7.0</td>\n","      <td>7.1</td>\n","      <td>0.88</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>172</td>\n","      <td>7.4</td>\n","      <td>7.0</td>\n","      <td>0.89</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>80</td>\n","      <td>5.9</td>\n","      <td>4.3</td>\n","      <td>0.81</td>\n","    </tr>\n","    <tr>\n","      <th>25</th>\n","      <td>356</td>\n","      <td>9.2</td>\n","      <td>9.2</td>\n","      <td>0.75</td>\n","    </tr>\n","    <tr>\n","      <th>19</th>\n","      <td>162</td>\n","      <td>7.4</td>\n","      <td>7.2</td>\n","      <td>0.85</td>\n","    </tr>\n","    <tr>\n","      <th>37</th>\n","      <td>154</td>\n","      <td>7.3</td>\n","      <td>7.3</td>\n","      <td>0.79</td>\n","    </tr>\n","    <tr>\n","      <th>58</th>\n","      <td>118</td>\n","      <td>6.1</td>\n","      <td>8.1</td>\n","      <td>0.70</td>\n","    </tr>\n","    <tr>\n","      <th>15</th>\n","      <td>156</td>\n","      <td>7.7</td>\n","      <td>7.1</td>\n","      <td>0.69</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>180</td>\n","      <td>8.0</td>\n","      <td>6.8</td>\n","      <td>0.59</td>\n","    </tr>\n","    <tr>\n","      <th>27</th>\n","      <td>204</td>\n","      <td>7.5</td>\n","      <td>9.2</td>\n","      <td>0.77</td>\n","    </tr>\n","    <tr>\n","      <th>43</th>\n","      <td>194</td>\n","      <td>7.2</td>\n","      <td>10.3</td>\n","      <td>0.70</td>\n","    </tr>\n","    <tr>\n","      <th>51</th>\n","      <td>116</td>\n","      <td>6.0</td>\n","      <td>7.5</td>\n","      <td>0.72</td>\n","    </tr>\n","    <tr>\n","      <th>21</th>\n","      <td>156</td>\n","      <td>7.4</td>\n","      <td>7.4</td>\n","      <td>0.84</td>\n","    </tr>\n","    <tr>\n","      <th>26</th>\n","      <td>362</td>\n","      <td>9.6</td>\n","      <td>9.2</td>\n","      <td>0.74</td>\n","    </tr>\n","    <tr>\n","      <th>30</th>\n","      <td>158</td>\n","      <td>7.1</td>\n","      <td>7.5</td>\n","      <td>0.79</td>\n","    </tr>\n","    <tr>\n","      <th>32</th>\n","      <td>164</td>\n","      <td>7.2</td>\n","      <td>7.0</td>\n","      <td>0.80</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>176</td>\n","      <td>7.4</td>\n","      <td>7.2</td>\n","      <td>0.60</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>178</td>\n","      <td>7.1</td>\n","      <td>7.8</td>\n","      <td>0.92</td>\n","    </tr>\n","    <tr>\n","      <th>13</th>\n","      <td>164</td>\n","      <td>7.3</td>\n","      <td>7.7</td>\n","      <td>0.70</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>76</td>\n","      <td>5.8</td>\n","      <td>4.0</td>\n","      <td>0.81</td>\n","    </tr>\n","    <tr>\n","      <th>47</th>\n","      <td>196</td>\n","      <td>7.3</td>\n","      <td>9.7</td>\n","      <td>0.72</td>\n","    </tr>\n","    <tr>\n","      <th>44</th>\n","      <td>200</td>\n","      <td>7.3</td>\n","      <td>10.5</td>\n","      <td>0.72</td>\n","    </tr>\n","    <tr>\n","      <th>17</th>\n","      <td>168</td>\n","      <td>7.5</td>\n","      <td>7.6</td>\n","      <td>0.73</td>\n","    </tr>\n","    <tr>\n","      <th>41</th>\n","      <td>180</td>\n","      <td>7.6</td>\n","      <td>8.2</td>\n","      <td>0.79</td>\n","    </tr>\n","    <tr>\n","      <th>23</th>\n","      <td>170</td>\n","      <td>7.6</td>\n","      <td>7.9</td>\n","      <td>0.88</td>\n","    </tr>\n","    <tr>\n","      <th>55</th>\n","      <td>116</td>\n","      <td>6.3</td>\n","      <td>7.7</td>\n","      <td>0.72</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2ba07a37-1db0-4f72-8101-eaa35416f481')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-2ba07a37-1db0-4f72-8101-eaa35416f481 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-2ba07a37-1db0-4f72-8101-eaa35416f481');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-dabe2b65-0fbd-4ef6-b04c-9a31ededdb51\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-dabe2b65-0fbd-4ef6-b04c-9a31ededdb51')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-dabe2b65-0fbd-4ef6-b04c-9a31ededdb51 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_292645b1-3263-4577-9b4d-9791ef2ee5e9\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('X_train')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_292645b1-3263-4577-9b4d-9791ef2ee5e9 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('X_train');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"X_train","summary":"{\n  \"name\": \"X_train\",\n  \"rows\": 53,\n  \"fields\": [\n    {\n      \"column\": \"mass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 57,\n        \"min\": 76,\n        \"max\": 362,\n        \"num_unique_values\": 38,\n        \"samples\": [\n          76,\n          168,\n          160\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"width\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.8405368386145933,\n        \"min\": 5.8,\n        \"max\": 9.6,\n        \"num_unique_values\": 22,\n        \"samples\": [\n          7.3,\n          7.8,\n          5.9\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"height\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.389304469352609,\n        \"min\": 4.0,\n        \"max\": 10.5,\n        \"num_unique_values\": 27,\n        \"samples\": [\n          4.3,\n          4.6,\n          8.2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"color_score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0759864971581323,\n        \"min\": 0.55,\n        \"max\": 0.92,\n        \"num_unique_values\": 25,\n        \"samples\": [\n          0.71,\n          0.83,\n          0.72\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":13}]},{"cell_type":"code","source":["fruits = fruit.replace({'fruit_name':{'apple':1, 'mandarin':2, 'orange':3, 'lemon':4}})\n","fruits.replace({'fruit_subtype':{'turkey_navel':1,'unknown':2,'cripps_pink':3,'selected_seconds':4,'spanish_belsan':5,'mandarin':6,'braeburn':7,'golden_delicious':8,'granny_smith':9,'spanish_jumbo':10}}, inplace = True)"],"metadata":{"id":"aK2j1Wu_clZF"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["fruits"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"kk2w59tVgcH9","executionInfo":{"status":"ok","timestamp":1725427955385,"user_tz":-330,"elapsed":549,"user":{"displayName":"siddharth P santhosh","userId":"13793384757789431104"}},"outputId":"6b1c6731-0a50-4c66-907e-e5722274215f"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["    fruit_label  fruit_name  fruit_subtype  mass  width  height  color_score\n","0             1           1              9   192    8.4     7.3         0.55\n","1             1           1              9   180    8.0     6.8         0.59\n","2             1           1              9   176    7.4     7.2         0.60\n","3             2           2              6    86    6.2     4.7         0.80\n","4             2           2              6    84    6.0     4.6         0.79\n","5             2           2              6    80    5.8     4.3         0.77\n","6             2           2              6    80    5.9     4.3         0.81\n","7             2           2              6    76    5.8     4.0         0.81\n","8             1           1              7   178    7.1     7.8         0.92\n","9             1           1              7   172    7.4     7.0         0.89\n","10            1           1              7   166    6.9     7.3         0.93\n","11            1           1              7   172    7.1     7.6         0.92\n","12            1           1              7   154    7.0     7.1         0.88\n","13            1           1              8   164    7.3     7.7         0.70\n","14            1           1              8   152    7.6     7.3         0.69\n","15            1           1              8   156    7.7     7.1         0.69\n","16            1           1              8   156    7.6     7.5         0.67\n","17            1           1              8   168    7.5     7.6         0.73\n","18            1           1              3   162    7.5     7.1         0.83\n","19            1           1              3   162    7.4     7.2         0.85\n","20            1           1              3   160    7.5     7.5         0.86\n","21            1           1              3   156    7.4     7.4         0.84\n","22            1           1              3   140    7.3     7.1         0.87\n","23            1           1              3   170    7.6     7.9         0.88\n","24            3           3             10   342    9.0     9.4         0.75\n","25            3           3             10   356    9.2     9.2         0.75\n","26            3           3             10   362    9.6     9.2         0.74\n","27            3           3              4   204    7.5     9.2         0.77\n","28            3           3              4   140    6.7     7.1         0.72\n","29            3           3              4   160    7.0     7.4         0.81\n","30            3           3              4   158    7.1     7.5         0.79\n","31            3           3              4   210    7.8     8.0         0.82\n","32            3           3              4   164    7.2     7.0         0.80\n","33            3           3              1   190    7.5     8.1         0.74\n","34            3           3              1   142    7.6     7.8         0.75\n","35            3           3              1   150    7.1     7.9         0.75\n","36            3           3              1   160    7.1     7.6         0.76\n","37            3           3              1   154    7.3     7.3         0.79\n","38            3           3              1   158    7.2     7.8         0.77\n","39            3           3              1   144    6.8     7.4         0.75\n","40            3           3              1   154    7.1     7.5         0.78\n","41            3           3              1   180    7.6     8.2         0.79\n","42            3           3              1   154    7.2     7.2         0.82\n","43            4           4              5   194    7.2    10.3         0.70\n","44            4           4              5   200    7.3    10.5         0.72\n","45            4           4              5   186    7.2     9.2         0.72\n","46            4           4              5   216    7.3    10.2         0.71\n","47            4           4              5   196    7.3     9.7         0.72\n","48            4           4              5   174    7.3    10.1         0.72\n","49            4           4              2   132    5.8     8.7         0.73\n","50            4           4              2   130    6.0     8.2         0.71\n","51            4           4              2   116    6.0     7.5         0.72\n","52            4           4              2   118    5.9     8.0         0.72\n","53            4           4              2   120    6.0     8.4         0.74\n","54            4           4              2   116    6.1     8.5         0.71\n","55            4           4              2   116    6.3     7.7         0.72\n","56            4           4              2   116    5.9     8.1         0.73\n","57            4           4              2   152    6.5     8.5         0.72\n","58            4           4              2   118    6.1     8.1         0.70"],"text/html":["\n","  <div id=\"df-afdbd6c7-5906-4b23-841e-1fc458f16595\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>fruit_label</th>\n","      <th>fruit_name</th>\n","      <th>fruit_subtype</th>\n","      <th>mass</th>\n","      <th>width</th>\n","      <th>height</th>\n","      <th>color_score</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>9</td>\n","      <td>192</td>\n","      <td>8.4</td>\n","      <td>7.3</td>\n","      <td>0.55</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>9</td>\n","      <td>180</td>\n","      <td>8.0</td>\n","      <td>6.8</td>\n","      <td>0.59</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>9</td>\n","      <td>176</td>\n","      <td>7.4</td>\n","      <td>7.2</td>\n","      <td>0.60</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>6</td>\n","      <td>86</td>\n","      <td>6.2</td>\n","      <td>4.7</td>\n","      <td>0.80</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>6</td>\n","      <td>84</td>\n","      <td>6.0</td>\n","      <td>4.6</td>\n","      <td>0.79</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>6</td>\n","      <td>80</td>\n","      <td>5.8</td>\n","      <td>4.3</td>\n","      <td>0.77</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>6</td>\n","      <td>80</td>\n","      <td>5.9</td>\n","      <td>4.3</td>\n","      <td>0.81</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>6</td>\n","      <td>76</td>\n","      <td>5.8</td>\n","      <td>4.0</td>\n","      <td>0.81</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>7</td>\n","      <td>178</td>\n","      <td>7.1</td>\n","      <td>7.8</td>\n","      <td>0.92</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>7</td>\n","      <td>172</td>\n","      <td>7.4</td>\n","      <td>7.0</td>\n","      <td>0.89</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>7</td>\n","      <td>166</td>\n","      <td>6.9</td>\n","      <td>7.3</td>\n","      <td>0.93</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>7</td>\n","      <td>172</td>\n","      <td>7.1</td>\n","      <td>7.6</td>\n","      <td>0.92</td>\n","    </tr>\n","    <tr>\n","      <th>12</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>7</td>\n","      <td>154</td>\n","      <td>7.0</td>\n","      <td>7.1</td>\n","      <td>0.88</td>\n","    </tr>\n","    <tr>\n","      <th>13</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>8</td>\n","      <td>164</td>\n","      <td>7.3</td>\n","      <td>7.7</td>\n","      <td>0.70</td>\n","    </tr>\n","    <tr>\n","      <th>14</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>8</td>\n","      <td>152</td>\n","      <td>7.6</td>\n","      <td>7.3</td>\n","      <td>0.69</td>\n","    </tr>\n","    <tr>\n","      <th>15</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>8</td>\n","      <td>156</td>\n","      <td>7.7</td>\n","      <td>7.1</td>\n","      <td>0.69</td>\n","    </tr>\n","    <tr>\n","      <th>16</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>8</td>\n","      <td>156</td>\n","      <td>7.6</td>\n","      <td>7.5</td>\n","      <td>0.67</td>\n","    </tr>\n","    <tr>\n","      <th>17</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>8</td>\n","      <td>168</td>\n","      <td>7.5</td>\n","      <td>7.6</td>\n","      <td>0.73</td>\n","    </tr>\n","    <tr>\n","      <th>18</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>162</td>\n","      <td>7.5</td>\n","      <td>7.1</td>\n","      <td>0.83</td>\n","    </tr>\n","    <tr>\n","      <th>19</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>162</td>\n","      <td>7.4</td>\n","      <td>7.2</td>\n","      <td>0.85</td>\n","    </tr>\n","    <tr>\n","      <th>20</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>160</td>\n","      <td>7.5</td>\n","      <td>7.5</td>\n","      <td>0.86</td>\n","    </tr>\n","    <tr>\n","      <th>21</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>156</td>\n","      <td>7.4</td>\n","      <td>7.4</td>\n","      <td>0.84</td>\n","    </tr>\n","    <tr>\n","      <th>22</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>140</td>\n","      <td>7.3</td>\n","      <td>7.1</td>\n","      <td>0.87</td>\n","    </tr>\n","    <tr>\n","      <th>23</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>170</td>\n","      <td>7.6</td>\n","      <td>7.9</td>\n","      <td>0.88</td>\n","    </tr>\n","    <tr>\n","      <th>24</th>\n","      <td>3</td>\n","      <td>3</td>\n","      <td>10</td>\n","      <td>342</td>\n","      <td>9.0</td>\n","      <td>9.4</td>\n","      <td>0.75</td>\n","    </tr>\n","    <tr>\n","      <th>25</th>\n","      <td>3</td>\n","      <td>3</td>\n","      <td>10</td>\n","      <td>356</td>\n","      <td>9.2</td>\n","      <td>9.2</td>\n","      <td>0.75</td>\n","    </tr>\n","    <tr>\n","      <th>26</th>\n","      <td>3</td>\n","      <td>3</td>\n","      <td>10</td>\n","      <td>362</td>\n","      <td>9.6</td>\n","      <td>9.2</td>\n","      <td>0.74</td>\n","    </tr>\n","    <tr>\n","      <th>27</th>\n","      <td>3</td>\n","      <td>3</td>\n","      <td>4</td>\n","      <td>204</td>\n","      <td>7.5</td>\n","      <td>9.2</td>\n","      <td>0.77</td>\n","    </tr>\n","    <tr>\n","      <th>28</th>\n","      <td>3</td>\n","      <td>3</td>\n","      <td>4</td>\n","      <td>140</td>\n","      <td>6.7</td>\n","      <td>7.1</td>\n","      <td>0.72</td>\n","    </tr>\n","    <tr>\n","      <th>29</th>\n","      <td>3</td>\n","      <td>3</td>\n","      <td>4</td>\n","      <td>160</td>\n","      <td>7.0</td>\n","      <td>7.4</td>\n","      <td>0.81</td>\n","    </tr>\n","    <tr>\n","      <th>30</th>\n","      <td>3</td>\n","      <td>3</td>\n","      <td>4</td>\n","      <td>158</td>\n","      <td>7.1</td>\n","      <td>7.5</td>\n","      <td>0.79</td>\n","    </tr>\n","    <tr>\n","      <th>31</th>\n","      <td>3</td>\n","      <td>3</td>\n","      <td>4</td>\n","      <td>210</td>\n","      <td>7.8</td>\n","      <td>8.0</td>\n","      <td>0.82</td>\n","    </tr>\n","    <tr>\n","      <th>32</th>\n","      <td>3</td>\n","      <td>3</td>\n","      <td>4</td>\n","      <td>164</td>\n","      <td>7.2</td>\n","      <td>7.0</td>\n","      <td>0.80</td>\n","    </tr>\n","    <tr>\n","      <th>33</th>\n","      <td>3</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>190</td>\n","      <td>7.5</td>\n","      <td>8.1</td>\n","      <td>0.74</td>\n","    </tr>\n","    <tr>\n","      <th>34</th>\n","      <td>3</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>142</td>\n","      <td>7.6</td>\n","      <td>7.8</td>\n","      <td>0.75</td>\n","    </tr>\n","    <tr>\n","      <th>35</th>\n","      <td>3</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>150</td>\n","      <td>7.1</td>\n","      <td>7.9</td>\n","      <td>0.75</td>\n","    </tr>\n","    <tr>\n","      <th>36</th>\n","      <td>3</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>160</td>\n","      <td>7.1</td>\n","      <td>7.6</td>\n","      <td>0.76</td>\n","    </tr>\n","    <tr>\n","      <th>37</th>\n","      <td>3</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>154</td>\n","      <td>7.3</td>\n","      <td>7.3</td>\n","      <td>0.79</td>\n","    </tr>\n","    <tr>\n","      <th>38</th>\n","      <td>3</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>158</td>\n","      <td>7.2</td>\n","      <td>7.8</td>\n","      <td>0.77</td>\n","    </tr>\n","    <tr>\n","      <th>39</th>\n","      <td>3</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>144</td>\n","      <td>6.8</td>\n","      <td>7.4</td>\n","      <td>0.75</td>\n","    </tr>\n","    <tr>\n","      <th>40</th>\n","      <td>3</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>154</td>\n","      <td>7.1</td>\n","      <td>7.5</td>\n","      <td>0.78</td>\n","    </tr>\n","    <tr>\n","      <th>41</th>\n","      <td>3</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>180</td>\n","      <td>7.6</td>\n","      <td>8.2</td>\n","      <td>0.79</td>\n","    </tr>\n","    <tr>\n","      <th>42</th>\n","      <td>3</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>154</td>\n","      <td>7.2</td>\n","      <td>7.2</td>\n","      <td>0.82</td>\n","    </tr>\n","    <tr>\n","      <th>43</th>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>5</td>\n","      <td>194</td>\n","      <td>7.2</td>\n","      <td>10.3</td>\n","      <td>0.70</td>\n","    </tr>\n","    <tr>\n","      <th>44</th>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>5</td>\n","      <td>200</td>\n","      <td>7.3</td>\n","      <td>10.5</td>\n","      <td>0.72</td>\n","    </tr>\n","    <tr>\n","      <th>45</th>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>5</td>\n","      <td>186</td>\n","      <td>7.2</td>\n","      <td>9.2</td>\n","      <td>0.72</td>\n","    </tr>\n","    <tr>\n","      <th>46</th>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>5</td>\n","      <td>216</td>\n","      <td>7.3</td>\n","      <td>10.2</td>\n","      <td>0.71</td>\n","    </tr>\n","    <tr>\n","      <th>47</th>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>5</td>\n","      <td>196</td>\n","      <td>7.3</td>\n","      <td>9.7</td>\n","      <td>0.72</td>\n","    </tr>\n","    <tr>\n","      <th>48</th>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>5</td>\n","      <td>174</td>\n","      <td>7.3</td>\n","      <td>10.1</td>\n","      <td>0.72</td>\n","    </tr>\n","    <tr>\n","      <th>49</th>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>2</td>\n","      <td>132</td>\n","      <td>5.8</td>\n","      <td>8.7</td>\n","      <td>0.73</td>\n","    </tr>\n","    <tr>\n","      <th>50</th>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>2</td>\n","      <td>130</td>\n","      <td>6.0</td>\n","      <td>8.2</td>\n","      <td>0.71</td>\n","    </tr>\n","    <tr>\n","      <th>51</th>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>2</td>\n","      <td>116</td>\n","      <td>6.0</td>\n","      <td>7.5</td>\n","      <td>0.72</td>\n","    </tr>\n","    <tr>\n","      <th>52</th>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>2</td>\n","      <td>118</td>\n","      <td>5.9</td>\n","      <td>8.0</td>\n","      <td>0.72</td>\n","    </tr>\n","    <tr>\n","      <th>53</th>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>2</td>\n","      <td>120</td>\n","      <td>6.0</td>\n","      <td>8.4</td>\n","      <td>0.74</td>\n","    </tr>\n","    <tr>\n","      <th>54</th>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>2</td>\n","      <td>116</td>\n","      <td>6.1</td>\n","      <td>8.5</td>\n","      <td>0.71</td>\n","    </tr>\n","    <tr>\n","      <th>55</th>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>2</td>\n","      <td>116</td>\n","      <td>6.3</td>\n","      <td>7.7</td>\n","      <td>0.72</td>\n","    </tr>\n","    <tr>\n","      <th>56</th>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>2</td>\n","      <td>116</td>\n","      <td>5.9</td>\n","      <td>8.1</td>\n","      <td>0.73</td>\n","    </tr>\n","    <tr>\n","      <th>57</th>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>2</td>\n","      <td>152</td>\n","      <td>6.5</td>\n","      <td>8.5</td>\n","      <td>0.72</td>\n","    </tr>\n","    <tr>\n","      <th>58</th>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>2</td>\n","      <td>118</td>\n","      <td>6.1</td>\n","      <td>8.1</td>\n","      <td>0.70</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-afdbd6c7-5906-4b23-841e-1fc458f16595')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-afdbd6c7-5906-4b23-841e-1fc458f16595 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-afdbd6c7-5906-4b23-841e-1fc458f16595');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-d0efc905-0a7c-4752-a98b-686bd44a367c\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d0efc905-0a7c-4752-a98b-686bd44a367c')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-d0efc905-0a7c-4752-a98b-686bd44a367c button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_45d47ce5-20be-4c97-8ce9-44a6080d05aa\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('fruits')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_45d47ce5-20be-4c97-8ce9-44a6080d05aa button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('fruits');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"fruits","summary":"{\n  \"name\": \"fruits\",\n  \"rows\": 59,\n  \"fields\": [\n    {\n      \"column\": \"fruit_label\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 4,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2,\n          4,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"fruit_name\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 4,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2,\n          4,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"fruit_subtype\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 1,\n        \"max\": 10,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          5,\n          6,\n          10\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 55,\n        \"min\": 76,\n        \"max\": 362,\n        \"num_unique_values\": 40,\n        \"samples\": [\n          342,\n          160,\n          162\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"width\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.8169378756639519,\n        \"min\": 5.8,\n        \"max\": 9.6,\n        \"num_unique_values\": 24,\n        \"samples\": [\n          6.9,\n          9.6,\n          8.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"height\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.3610169127606655,\n        \"min\": 4.0,\n        \"max\": 10.5,\n        \"num_unique_values\": 28,\n        \"samples\": [\n          7.6,\n          8.7,\n          7.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"color_score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.07685747776101505,\n        \"min\": 0.55,\n        \"max\": 0.93,\n        \"num_unique_values\": 27,\n        \"samples\": [\n          0.89,\n          0.67,\n          0.93\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":153}]},{"cell_type":"code","source":["type(fruit)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":203},"id":"UK0T8ECMXTAh","executionInfo":{"status":"ok","timestamp":1725425613611,"user_tz":-330,"elapsed":894,"user":{"displayName":"siddharth P santhosh","userId":"13793384757789431104"}},"outputId":"9b879b18-1253-48bb-97f7-232718bbbbcf"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["pandas.core.frame.DataFrame"],"text/html":["<div style=\"max-width:800px; border: 1px solid var(--colab-border-color);\"><style>\n","      pre.function-repr-contents {\n","        overflow-x: auto;\n","        padding: 8px 12px;\n","        max-height: 500px;\n","      }\n","\n","      pre.function-repr-contents.function-repr-contents-collapsed {\n","        cursor: pointer;\n","        max-height: 100px;\n","      }\n","    </style>\n","    <pre style=\"white-space: initial; background:\n","         var(--colab-secondary-surface-color); padding: 8px 12px;\n","         border-bottom: 1px solid var(--colab-border-color);\"><b>pandas.core.frame.DataFrame</b><br/>def __init__(data=None, index: Axes | None=None, columns: Axes | None=None, dtype: Dtype | None=None, copy: bool | None=None) -&gt; None</pre><pre class=\"function-repr-contents function-repr-contents-collapsed\" style=\"\"><a class=\"filepath\" style=\"display:none\" href=\"#\">/usr/local/lib/python3.10/dist-packages/pandas/core/frame.py</a>Two-dimensional, size-mutable, potentially heterogeneous tabular data.\n","\n","Data structure also contains labeled axes (rows and columns).\n","Arithmetic operations align on both row and column labels. Can be\n","thought of as a dict-like container for Series objects. The primary\n","pandas data structure.\n","\n","Parameters\n","----------\n","data : ndarray (structured or homogeneous), Iterable, dict, or DataFrame\n","    Dict can contain Series, arrays, constants, dataclass or list-like objects. If\n","    data is a dict, column order follows insertion-order. If a dict contains Series\n","    which have an index defined, it is aligned by its index. This alignment also\n","    occurs if data is a Series or a DataFrame itself. Alignment is done on\n","    Series/DataFrame inputs.\n","\n","    If data is a list of dicts, column order follows insertion-order.\n","\n","index : Index or array-like\n","    Index to use for resulting frame. Will default to RangeIndex if\n","    no indexing information part of input data and no index provided.\n","columns : Index or array-like\n","    Column labels to use for resulting frame when data does not have them,\n","    defaulting to RangeIndex(0, 1, 2, ..., n). If data contains column labels,\n","    will perform column selection instead.\n","dtype : dtype, default None\n","    Data type to force. Only a single dtype is allowed. If None, infer.\n","copy : bool or None, default None\n","    Copy data from inputs.\n","    For dict data, the default of None behaves like ``copy=True``.  For DataFrame\n","    or 2d ndarray input, the default of None behaves like ``copy=False``.\n","    If data is a dict containing one or more Series (possibly of different dtypes),\n","    ``copy=False`` will ensure that these inputs are not copied.\n","\n","    .. versionchanged:: 1.3.0\n","\n","See Also\n","--------\n","DataFrame.from_records : Constructor from tuples, also record arrays.\n","DataFrame.from_dict : From dicts of Series, arrays, or dicts.\n","read_csv : Read a comma-separated values (csv) file into DataFrame.\n","read_table : Read general delimited file into DataFrame.\n","read_clipboard : Read text from clipboard into DataFrame.\n","\n","Notes\n","-----\n","Please reference the :ref:`User Guide &lt;basics.dataframe&gt;` for more information.\n","\n","Examples\n","--------\n","Constructing DataFrame from a dictionary.\n","\n","&gt;&gt;&gt; d = {&#x27;col1&#x27;: [1, 2], &#x27;col2&#x27;: [3, 4]}\n","&gt;&gt;&gt; df = pd.DataFrame(data=d)\n","&gt;&gt;&gt; df\n","   col1  col2\n","0     1     3\n","1     2     4\n","\n","Notice that the inferred dtype is int64.\n","\n","&gt;&gt;&gt; df.dtypes\n","col1    int64\n","col2    int64\n","dtype: object\n","\n","To enforce a single dtype:\n","\n","&gt;&gt;&gt; df = pd.DataFrame(data=d, dtype=np.int8)\n","&gt;&gt;&gt; df.dtypes\n","col1    int8\n","col2    int8\n","dtype: object\n","\n","Constructing DataFrame from a dictionary including Series:\n","\n","&gt;&gt;&gt; d = {&#x27;col1&#x27;: [0, 1, 2, 3], &#x27;col2&#x27;: pd.Series([2, 3], index=[2, 3])}\n","&gt;&gt;&gt; pd.DataFrame(data=d, index=[0, 1, 2, 3])\n","   col1  col2\n","0     0   NaN\n","1     1   NaN\n","2     2   2.0\n","3     3   3.0\n","\n","Constructing DataFrame from numpy ndarray:\n","\n","&gt;&gt;&gt; df2 = pd.DataFrame(np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]),\n","...                    columns=[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;])\n","&gt;&gt;&gt; df2\n","   a  b  c\n","0  1  2  3\n","1  4  5  6\n","2  7  8  9\n","\n","Constructing DataFrame from a numpy ndarray that has labeled columns:\n","\n","&gt;&gt;&gt; data = np.array([(1, 2, 3), (4, 5, 6), (7, 8, 9)],\n","...                 dtype=[(&quot;a&quot;, &quot;i4&quot;), (&quot;b&quot;, &quot;i4&quot;), (&quot;c&quot;, &quot;i4&quot;)])\n","&gt;&gt;&gt; df3 = pd.DataFrame(data, columns=[&#x27;c&#x27;, &#x27;a&#x27;])\n","...\n","&gt;&gt;&gt; df3\n","   c  a\n","0  3  1\n","1  6  4\n","2  9  7\n","\n","Constructing DataFrame from dataclass:\n","\n","&gt;&gt;&gt; from dataclasses import make_dataclass\n","&gt;&gt;&gt; Point = make_dataclass(&quot;Point&quot;, [(&quot;x&quot;, int), (&quot;y&quot;, int)])\n","&gt;&gt;&gt; pd.DataFrame([Point(0, 0), Point(0, 3), Point(2, 3)])\n","   x  y\n","0  0  0\n","1  0  3\n","2  2  3\n","\n","Constructing DataFrame from Series/DataFrame:\n","\n","&gt;&gt;&gt; ser = pd.Series([1, 2, 3], index=[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;])\n","&gt;&gt;&gt; df = pd.DataFrame(data=ser, index=[&quot;a&quot;, &quot;c&quot;])\n","&gt;&gt;&gt; df\n","   0\n","a  1\n","c  3\n","\n","&gt;&gt;&gt; df1 = pd.DataFrame([1, 2, 3], index=[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;], columns=[&quot;x&quot;])\n","&gt;&gt;&gt; df2 = pd.DataFrame(data=df1, index=[&quot;a&quot;, &quot;c&quot;])\n","&gt;&gt;&gt; df2\n","   x\n","a  1\n","c  3</pre>\n","      <script>\n","      if (google.colab.kernel.accessAllowed && google.colab.files && google.colab.files.view) {\n","        for (const element of document.querySelectorAll('.filepath')) {\n","          element.style.display = 'block'\n","          element.onclick = (event) => {\n","            event.preventDefault();\n","            event.stopPropagation();\n","            google.colab.files.view(element.textContent, 491);\n","          };\n","        }\n","      }\n","      for (const element of document.querySelectorAll('.function-repr-contents')) {\n","        element.onclick = (event) => {\n","          event.preventDefault();\n","          event.stopPropagation();\n","          element.classList.toggle('function-repr-contents-collapsed');\n","        };\n","      }\n","      </script>\n","      </div>"]},"metadata":{},"execution_count":75}]},{"cell_type":"code","source":["fruit['fruit_subtype'].value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":429},"id":"-iZJ2t6pX6ZV","executionInfo":{"status":"ok","timestamp":1725427156973,"user_tz":-330,"elapsed":16,"user":{"displayName":"siddharth P santhosh","userId":"13793384757789431104"}},"outputId":"4fa5adaf-8a21-427e-e2a7-18221f38bd21"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["fruit_subtype\n","turkey_navel        10\n","unknown             10\n","cripps_pink          6\n","selected_seconds     6\n","spanish_belsan       6\n","mandarin             5\n","braeburn             5\n","golden_delicious     5\n","granny_smith         3\n","spanish_jumbo        3\n","Name: count, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>fruit_subtype</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>turkey_navel</th>\n","      <td>10</td>\n","    </tr>\n","    <tr>\n","      <th>unknown</th>\n","      <td>10</td>\n","    </tr>\n","    <tr>\n","      <th>cripps_pink</th>\n","      <td>6</td>\n","    </tr>\n","    <tr>\n","      <th>selected_seconds</th>\n","      <td>6</td>\n","    </tr>\n","    <tr>\n","      <th>spanish_belsan</th>\n","      <td>6</td>\n","    </tr>\n","    <tr>\n","      <th>mandarin</th>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>braeburn</th>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>golden_delicious</th>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>granny_smith</th>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>spanish_jumbo</th>\n","      <td>3</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":132}]},{"cell_type":"code","source":["plt.figure(figsize = (6,6))\n","sns.histplot(x = 'mass',data = fruit)\n","plt.title('Mass')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"egwUjAaUXZxP","executionInfo":{"status":"ok","timestamp":1725426132756,"user_tz":-330,"elapsed":1422,"user":{"displayName":"siddharth P santhosh","userId":"13793384757789431104"}},"outputId":"3cf93684-04b8-4694-f36b-f8e3d025634a"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 600x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["plt.figure(figsize = (6,6))\n","sns.histplot(x = 'width',data = fruit)\n","plt.title('Width')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"W7UHg1enZSL8","executionInfo":{"status":"ok","timestamp":1725426068499,"user_tz":-330,"elapsed":1050,"user":{"displayName":"siddharth P santhosh","userId":"13793384757789431104"}},"outputId":"493079ba-b5fb-4b55-ee8d-923f1a5f943f"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 600x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["plt.figure(figsize = (6,6))\n","sns.histplot(x = 'height',data = fruit)\n","plt.title('height')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"ikdPEzoiZiks","executionInfo":{"status":"ok","timestamp":1725426061431,"user_tz":-330,"elapsed":1047,"user":{"displayName":"siddharth P santhosh","userId":"13793384757789431104"}},"outputId":"98277743-8268-41de-ad89-77cfc8d0dd86"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 600x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["plt.figure(figsize = (6,6))\n","sns.histplot(x = 'color_score', y = '',data = fruit)\n","plt.title('colorscore')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"Eu6L0mAbZ7Yh","executionInfo":{"status":"ok","timestamp":1725426049449,"user_tz":-330,"elapsed":941,"user":{"displayName":"siddharth P santhosh","userId":"13793384757789431104"}},"outputId":"4bfb3fbd-5b17-43d4-fb30-c43c444055d0"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 600x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["plt.figure(figsize = (6,6))\n","sns.barplot(x='fruit_name', y = 'mass',data = fruit)\n","plt.title('Mass')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"mcZ4bH69afNv","executionInfo":{"status":"ok","timestamp":1725427091605,"user_tz":-330,"elapsed":966,"user":{"displayName":"siddharth P santhosh","userId":"13793384757789431104"}},"outputId":"c103f0e1-7618-4308-9f0f-1e27b251b0bc"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 600x600 with 1 Axes>"],"image/png":"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T8ePH1d4eLhcLpcHZ2ZXWlqaKleurIMHDyo4ONjT08El4vksWXg+S54r5Tk1xuj3339XVFTU344r9sFRrlw5eXt76/Dhw27rDx8+rMjIyHPex8/PT35+fm7rQkNDbU2xyAkODi7R//NfaXg+Sxaez5LnSnhOQ0JCLjim2F806uvrq5iYGC1btsxZl5eXp2XLlik2NtaDMwMAAGcU+1c4JGnIkCHq3bu3mjRpoqZNm+qVV15RRkaG+vTp4+mpAQAAlZDg6Nq1q3777TeNGDFCKSkpatiwoRYtWqSIiAhPT61I8fPz08iRI/OdTkLxxPNZsvB8ljw8p+5cxlzofSwAAACXpthfwwEAAIo+ggMAAFhHcAAAAOsIDjhmzZp1RX0eSUkTHR2tV1555ZL388ADD+iOO+645P0AxU3r1q01ePBgT0+jxCoR71IBUHheffXVC38nAgBcJIIDgCQpNzdXLpfrH31iIP45Y4xyc3Pl48Mft7iycUqlmFi0aJFatmyp0NBQhYeHq0OHDkpMTJQkHThwQC6XS3PnzlWLFi3k7++vunXratWqVc79V65cKZfLpS+//FL169eXv7+/mjdvrh07dvzt486fP1+NGzeWv7+/rr76ao0ePVo5OTlWj7U4ad26tR5//HENHjxYZcuWVUREhN58803ng+fKlCmj6tWra+HChZL+/Eu9b9++qlatmgICAlSzZk29+uqrbvs8c0pj0qRJqlixosLDwzVgwABlZ2c7Y44cOaKOHTsqICBA1apV0+zZs/PNbfLkyapXr55Kly6typUr67HHHlN6erqz/cwptM8//1x16tSRn5+fkpKS8p1Sad26tQYNGqSnn35aYWFhioyM1KhRowr3B1nMZGZmatCgQapQoYL8/f3VsmVLbd68WdL/ftcWLlyomJgY+fn5ac2aNUpMTFTnzp0VERGhoKAgXX/99fr666/d9hsdHa2XXnpJDz74oMqUKaMqVapoxowZbmPWrVunhg0byt/fX02aNNFnn30ml8ulrVu3OmN27Nih+Ph4BQUFKSIiQr169dLRo0et/1xKkszMTD355JO66qqrVLp0aTVr1kwrV650tp/5/VmwYIFq1qypwMBA3X333frjjz/0zjvvKDo6WmXLltWgQYOUm5vr3O/EiRO6//77VbZsWQUGBio+Pl579+7Nt9/Fixerdu3aCgoK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VYsWLfTYY485685c/PtP1apVy3l+z/xrevfu3Tp58qQzJiEhQXl5eXr55Zfl5fXnteEffvjhpR8AdM0118jX11dr165V1apVJUnZ2dnavHnz336Gw9q1a/XAAw/ozjvvlPTnX2oHDhy4qMeuWbOm/vvf/yozM9P5QrAzF6ue0bhxY3388ceKjo7mnTEF1KhRI+Xm5urIkSPOn7mFoXbt2srJydHGjRvVokULSf/78/3MK9UlGe9SKQbKli2r8PBwzZgxQ/v27dPy5cs1ZMiQfOOmTp2qTz/9VD/++KMGDBigEydO6MEHH3QbM2bMGC1btkw7duzQAw88oHLlyp33Q55GjBihd999V6NHj9bOnTu1a9cuzZ07V8OHD7dxmFeEa6+9Vt9++60WL16sPXv26Lnnnsv3F8aF1KxZU+3atdMjjzyijRs3KiEhQQ899JACAgKcMdWrV1d2drZef/11/fTTT3rvvfc0ffr0wj6cK1Lp0qXVv39/PfXUU1q0aJF++OEHPfzww/rjjz/Ut2/f897v2muv1SeffKKtW7dq27Zt6tGjx0X/y/fMffr166ddu3Zp8eLFmjRpkqT/vZI2YMAAHT9+XN27d9fmzZuVmJioxYsXq0+fPm7vlsD51ahRQz179tT999+vTz75RPv379emTZs0duxYffnllwXe77XXXqvOnTvr4Ycf1po1a7Rt2zbdd999uuqqq9S5c+dCPIKiieAoBry8vDR37lwlJCSobt26euKJJzRx4sR848aNG6dx48apQYMGWrNmjT7//HOVK1cu35h//etfiomJUUpKir744gv5+vqe83Hj4uK0YMECLVmyRNdff72aN2+uKVOmOP+qw8V75JFHdNddd6lr165q1qyZjh075vZqxz81c+ZMRUVFqVWrVrrrrrvUr18/VahQwdneoEEDTZ48WePHj1fdunU1e/ZsjR07tjAP5Yo2btw4denSRb169VLjxo21b98+LV68WGXLlj3vfSZPnqyyZcuqRYsW6tixo+Li4tS4ceOLetzg4GB98cUX2rp1qxo2bKhhw4ZpxIgRkv53mjMqKkpr165Vbm6ubrvtNtWrV0+DBw9WaGio82oXLmzmzJm6//779X//93+qWbOm7rjjDm3evNl5hfhS9hsTE6MOHTooNjZWxhh99dVX+U6jlER8PX0JcODAAVWrVk3fffddvosPz1i5cqVuvvlmnThxgo8vB0qQ2bNnq0+fPkpNTXV7lQsoajjBBwDFyLvvvqurr75aV111lbZt26ZnnnlG9957L7GBIo/gAIBiJCUlRSNGjFBKSooqVqyoe+65x+2t60BRxSkVAABgHVcQAQAA6wgOAABgHcEBAACsIzgAAIB1BAcAALCO4ACQjzFG/fr1U1hYmFwul7Zu3Vqg/axcuVIul8vte14AXJkIDgD5LFq0SLNmzdKCBQuUnJysunXrFmg/LVq0UHJyskJCQiRJs2bN4pNugSsUH/wFIJ/ExERVrFjR+UbLv8rKyjrvd/CczdfXV5GRkYU9PQDFEK9wAHDzwAMP6PHHH1dSUpJcLpeio6PVunVrDRw4UIMHD1a5cuUUFxenAwcO5DvdcvLkSblcLq1cuVKS+ymVlStXOt/54XK55HK5NGrUqAvOJzo6Wi+99JIefPBBlSlTRlWqVNGMGTPcxjzzzDOqUaOGAgMDdfXVV+u5555Tdna2s33UqFFq2LCh3n77bVWpUkVBQUF67LHHlJubqwkTJigyMlIVKlTI94mdJ0+e1EMPPaTy5csrODhYt9xyi7Zt21bgny1wJSM4ALh59dVXNWbMGFWqVEnJycnavHmzJOmdd96Rr6+v1q5dW6Cvum/RooVeeeUVBQcHKzk5WcnJyXryySf/0X1ffvllNWnSRN99950ee+wx9e/fX7t373a2lylTRrNmzdIPP/ygV199VW+++aamTJnito/ExEQtXLhQixYt0vvvv6+33npL7du31y+//KJVq1Zp/PjxGj58uDZu3Ojc55577tGRI0e0cOFCJSQkqHHjxmrTpo2OHz9+0ccPXPEMAPzFlClTTNWqVZ3lVq1amUaNGrmN2b9/v5FkvvvuO2fdiRMnjCSzYsUKY4wxK1asMJLMiRMnjDHGzJw504SEhFzUXKpWrWruu+8+ZzkvL89UqFDBTJs27bz3mThxoomJiXGWR44caQIDA01aWpqzLi4uzkRHR5vc3FxnXc2aNc3YsWONMcZ88803Jjg42Jw+fdpt39dcc435z3/+c1HHAMAYruEA8I/ExMR47LHr16/v/LfL5VJkZKSOHDnirPvggw/02muvKTExUenp6crJyVFwcLDbPqKjo1WmTBlnOSIiQt7e3vLy8nJbd2a/27ZtU3p6usLDw932c+rUKSUmJhbq8QFXAoIDwD9SunRpt+Uzf1Gbs77/8ezrJgpTqVKl3JZdLpfy8vIkSevXr1fPnj01evRoxcXFKSQkRHPnztXLL798wX383X7T09NVsWJF53qUs/FOG+DiERwACqR8+fKSpOTkZDVq1EiSLvh5Hb6+vsrNzS3Ueaxbt05Vq1bVsGHDnHU///zzJe+3cePGSklJkY+Pj6Kjoy95f8CVjotGARRIQECAmjdvrnHjxmnXrl1atWqVhg8f/rf3iY6OVnp6upYtW6ajR4/qjz/+uOR5XHvttUpKStLcuXOVmJio1157TZ9++ukl77dt27aKjY3VHXfcoSVLlujAgQNat26dhg0bpm+//faS9w9caQgOAAX29ttvKycnRzExMRo8eLBeeOGFvx3fokULPfroo+ratavKly+vCRMmXPIcOnXqpCeeeEIDBw5Uw4YNtW7dOj333HOXvF+Xy6WvvvpKN910k/r06aMaNWqoW7du+vnnnxUREXHJ+weuNC5z9glYAAAAC3iFAwAAWEdwAPCYb775RkFBQee9ASg5OKUCwGNOnTqlX3/99bzbq1evfhlnA8AmggMAAFjHKRUAAGAdwQEAAKwjOAAAgHUEBwAAsI7gAAAA1hEcAADAOoIDAABY9/8BWeYdr27WqUoAAAAASUVORK5CYII=\n"},"metadata":{}}]},{"cell_type":"code","source":[],"metadata":{"id":"9pMQtY_JbuNN"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["correlation = fruits.corr()\n"],"metadata":{"id":"Ez6p3H1icO60"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["plt.figure(figsize = (10, 10))\n","sns.heatmap(correlation)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":709},"id":"8UKIAKRggDb-","executionInfo":{"status":"ok","timestamp":1725427990567,"user_tz":-330,"elapsed":992,"user":{"displayName":"siddharth P santhosh","userId":"13793384757789431104"}},"outputId":"acd651e5-dbe3-4b68-90c3-da62897233e9"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: >"]},"metadata":{},"execution_count":156},{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x1000 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["X_test.to_csv('fruit_test.csv',index = False)\n","files.download('fruit_test.csv')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":17},"id":"Iyx1QMgEpO-l","executionInfo":{"status":"ok","timestamp":1725422079732,"user_tz":-330,"elapsed":445,"user":{"displayName":"siddharth P santhosh","userId":"13793384757789431104"}},"outputId":"ff105060-3ec7-473a-9840-52602784b3a0"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["download(\"download_b8d4526c-24ff-4382-adcb-6cdd209177f9\", \"fruit_test.csv\", 133)"]},"metadata":{}}]},{"cell_type":"markdown","source":["**logistic regression**"],"metadata":{"id":"09xW-OeHrRBg"}},{"cell_type":"code","source":["from sklearn.linear_model import LogisticRegression\n","logreg=LogisticRegression()\n","logreg.fit(X_train,Y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":240},"id":"PHI9YV5ArPtY","executionInfo":{"status":"ok","timestamp":1725422087902,"user_tz":-330,"elapsed":649,"user":{"displayName":"siddharth P santhosh","userId":"13793384757789431104"}},"outputId":"937ccc2e-dd92-4bd1-ba85-60dc26ff9179"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_logistic.py:460: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  n_iter_i = _check_optimize_result(\n"]},{"output_type":"execute_result","data":{"text/plain":["LogisticRegression()"],"text/html":["<style>#sk-container-id-1 {color: black;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression()</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":15}]},{"cell_type":"code","source":["from sklearn.metrics import accuracy_score"],"metadata":{"id":"T6AQZ8iPrdjf"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# accuracy on training data\n","X_train_prediction=logreg.predict(X_train)\n","training_data_accuracy = accuracy_score(X_train_prediction, Y_train)\n","print('accuracy on training data:', training_data_accuracy)\n","# accuracy on test data\n","X_test_prediction=logreg.predict (X_test)\n","a = accuracy_score(X_test_prediction, Y_test)\n","print('accuracy on test data:', a)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"O_kdaKfNrggn","executionInfo":{"status":"ok","timestamp":1725422177561,"user_tz":-330,"elapsed":409,"user":{"displayName":"siddharth P santhosh","userId":"13793384757789431104"}},"outputId":"06059378-202a-4594-e559-cff504a68492"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["accuracy on training data: 0.8113207547169812\n","accuracy on test data: 0.5\n"]}]},{"cell_type":"markdown","source":["**Decision tree**"],"metadata":{"id":"er2YJh0rs4Cj"}},{"cell_type":"code","source":["from sklearn.tree import DecisionTreeClassifier\n","clf = DecisionTreeClassifier().fit(X_train, Y_train)"],"metadata":{"id":"_wFCWH90s2f_"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#accuracy on trainig data\n","X_train_prediction = clf.predict(X_train)\n","training_data_accuracy = accuracy_score(X_train_prediction, Y_train)\n","print('Acuracy on training data:', training_data_accuracy)\n","#accuracy on test data\n","X_test_prediction = clf.predict(X_test)\n","test_data_accuracy = accuracy_score(X_test_prediction, Y_test)\n","print('Accuracy on test data:', test_data_accuracy)"],"metadata":{"id":"IrptpG4ytKqJ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1725422308233,"user_tz":-330,"elapsed":448,"user":{"displayName":"siddharth P santhosh","userId":"13793384757789431104"}},"outputId":"48fd493c-1795-4e8b-8ff6-f44b49cdc76a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Acuracy on training data: 1.0\n","Accuracy on test data: 0.8333333333333334\n"]}]},{"cell_type":"code","source":["from sklearn.neighbors import KNeighborsClassifier\n","knn = KNeighborsClassifier()\n","knn.fit(X_train,Y_train)"],"metadata":{"id":"PMmtsq-nuTW3","colab":{"base_uri":"https://localhost:8080/","height":74},"executionInfo":{"status":"ok","timestamp":1725429919117,"user_tz":-330,"elapsed":470,"user":{"displayName":"siddharth P santhosh","userId":"13793384757789431104"}},"outputId":"bc9f5e0e-f445-4c94-83f9-4622ed706bd5"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["KNeighborsClassifier()"],"text/html":["<style>#sk-container-id-6 {color: black;}#sk-container-id-6 pre{padding: 0;}#sk-container-id-6 div.sk-toggleable {background-color: white;}#sk-container-id-6 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-6 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-6 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-6 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-6 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-6 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-6 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-6 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-6 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-6 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-6 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-6 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-6 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-6 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-6 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-6 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-6 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-6 div.sk-item {position: relative;z-index: 1;}#sk-container-id-6 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-6 div.sk-item::before, #sk-container-id-6 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-6 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-6 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-6 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-6 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-6 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-6 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-6 div.sk-label-container {text-align: center;}#sk-container-id-6 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-6 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-6\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KNeighborsClassifier()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-6\" type=\"checkbox\" checked><label for=\"sk-estimator-id-6\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KNeighborsClassifier</label><div class=\"sk-toggleable__content\"><pre>KNeighborsClassifier()</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":157}]},{"cell_type":"code","source":["#accuracy on trainig data\n","X_train_prediction = knn.predict(X_train)\n","training_data_accuracy = accuracy_score(X_train_prediction, Y_train)\n","print('Acuracy on training data:', training_data_accuracy)\n","#accuracy on test data\n","X_test_prediction = knn.predict(X_test)\n","b = accuracy_score(X_test_prediction, Y_test)\n","print('Accuracy on test data:', b)"],"metadata":{"id":"B2Q1daIRunLv","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1725429923977,"user_tz":-330,"elapsed":402,"user":{"displayName":"siddharth P santhosh","userId":"13793384757789431104"}},"outputId":"d2106166-54f7-44e6-d623-80b4ed2f37a3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Acuracy on training data: 0.7547169811320755\n","Accuracy on test data: 0.8333333333333334\n"]}]},{"cell_type":"markdown","source":["**NAIVE BAYES**"],"metadata":{"id":"xNghnbaDu42T"}},{"cell_type":"code","source":["from sklearn.naive_bayes import GaussianNB\n","gnb = GaussianNB()\n","gnb.fit(X_train,Y_train)"],"metadata":{"id":"VA4sFSaDu3K-","colab":{"base_uri":"https://localhost:8080/","height":74},"executionInfo":{"status":"ok","timestamp":1725429926983,"user_tz":-330,"elapsed":452,"user":{"displayName":"siddharth P santhosh","userId":"13793384757789431104"}},"outputId":"3df195fd-7d92-431c-9793-e202e953eb36"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["GaussianNB()"],"text/html":["<style>#sk-container-id-7 {color: black;}#sk-container-id-7 pre{padding: 0;}#sk-container-id-7 div.sk-toggleable {background-color: white;}#sk-container-id-7 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-7 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-7 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-7 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-7 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-7 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-7 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-7 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-7 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-7 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-7 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-7 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-7 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-7 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-7 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-7 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-7 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-7 div.sk-item {position: relative;z-index: 1;}#sk-container-id-7 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-7 div.sk-item::before, #sk-container-id-7 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-7 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-7 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-7 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-7 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-7 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-7 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-7 div.sk-label-container {text-align: center;}#sk-container-id-7 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-7 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-7\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GaussianNB()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-7\" type=\"checkbox\" checked><label for=\"sk-estimator-id-7\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GaussianNB</label><div class=\"sk-toggleable__content\"><pre>GaussianNB()</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":159}]},{"cell_type":"code","source":["#accuracy on trainig data\n","X_train_prediction = gnb.predict(X_train)\n","training_data_accuracy = accuracy_score(X_train_prediction, Y_train)\n","print('Acuracy on training data:', training_data_accuracy)\n","#accuracy on test data\n","X_test_prediction = gnb.predict(X_test)\n","c = accuracy_score(X_test_prediction, Y_test)\n","print('Accuracy on test data:', c)"],"metadata":{"id":"2WED6zJ6vJtu","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1725429928233,"user_tz":-330,"elapsed":4,"user":{"displayName":"siddharth P santhosh","userId":"13793384757789431104"}},"outputId":"488ea8c9-9e7f-44ce-d2cc-4bcb7992a52a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Acuracy on training data: 0.8679245283018868\n","Accuracy on test data: 0.6666666666666666\n"]}]},{"cell_type":"code","source":["from sklearn import svm\n","svm = svm.SVC(kernel = 'linear')\n","svm.fit(X_train,Y_train)"],"metadata":{"id":"7t8am09zvSPu","colab":{"base_uri":"https://localhost:8080/","height":74},"executionInfo":{"status":"ok","timestamp":1725429930088,"user_tz":-330,"elapsed":459,"user":{"displayName":"siddharth P santhosh","userId":"13793384757789431104"}},"outputId":"0f0c0aed-2dfa-4e23-d2ac-3fcf4adc98f1"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["SVC(kernel='linear')"],"text/html":["<style>#sk-container-id-8 {color: black;}#sk-container-id-8 pre{padding: 0;}#sk-container-id-8 div.sk-toggleable {background-color: white;}#sk-container-id-8 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-8 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-8 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-8 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-8 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-8 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-8 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-8 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-8 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-8 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-8 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-8 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-8 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-8 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-8 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-8 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-8 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-8 div.sk-item {position: relative;z-index: 1;}#sk-container-id-8 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-8 div.sk-item::before, #sk-container-id-8 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-8 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-8 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-8 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-8 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-8 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-8 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-8 div.sk-label-container {text-align: center;}#sk-container-id-8 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-8 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-8\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>SVC(kernel=&#x27;linear&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-8\" type=\"checkbox\" checked><label for=\"sk-estimator-id-8\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SVC</label><div class=\"sk-toggleable__content\"><pre>SVC(kernel=&#x27;linear&#x27;)</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":161}]},{"cell_type":"code","source":["#accuracy on trainig data\n","X_train_prediction = svm.predict(X_train)\n","training_data_accuracy = accuracy_score(X_train_prediction, Y_train)\n","print('Acuracy on training data:', training_data_accuracy)\n","#accuracy on test data\n","X_test_prediction = svm.predict(X_test)\n","d = accuracy_score(X_test_prediction, Y_test)\n","print('Accuracy on test data:', d)"],"metadata":{"id":"rVpe5PpBvf64","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1725429931897,"user_tz":-330,"elapsed":4,"user":{"displayName":"siddharth P santhosh","userId":"13793384757789431104"}},"outputId":"b0a36a81-24cc-493f-ec20-c62f3ea874b5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Acuracy on training data: 0.8679245283018868\n","Accuracy on test data: 0.8333333333333334\n"]}]},{"cell_type":"code","source":["from sklearn.ensemble import RandomForestClassifier\n","random = RandomForestClassifier()\n","random.fit(X_train,Y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":74},"id":"0gl7l4UtUjeF","executionInfo":{"status":"ok","timestamp":1725429933704,"user_tz":-330,"elapsed":409,"user":{"displayName":"siddharth P santhosh","userId":"13793384757789431104"}},"outputId":"4126726c-c936-4e85-b66c-2ea7b1bbed01"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["RandomForestClassifier()"],"text/html":["<style>#sk-container-id-9 {color: black;}#sk-container-id-9 pre{padding: 0;}#sk-container-id-9 div.sk-toggleable {background-color: white;}#sk-container-id-9 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-9 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-9 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-9 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-9 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-9 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-9 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-9 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-9 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-9 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-9 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-9 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-9 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-9 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-9 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-9 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-9 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-9 div.sk-item {position: relative;z-index: 1;}#sk-container-id-9 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-9 div.sk-item::before, #sk-container-id-9 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-9 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-9 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-9 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-9 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-9 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-9 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-9 div.sk-label-container {text-align: center;}#sk-container-id-9 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-9 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-9\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-9\" type=\"checkbox\" checked><label for=\"sk-estimator-id-9\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier()</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":163}]},{"cell_type":"code","source":["#accuracy on trainig data\n","X_train_prediction = random.predict(X_train)\n","training_data_accuracy = accuracy_score(X_train_prediction, Y_train)\n","print('Acuracy on training data:', training_data_accuracy)\n","#accuracy on test data\n","X_test_prediction = random.predict(X_test)\n","e = accuracy_score(X_test_prediction, Y_test)\n","print('Accuracy on test data:', e)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YCp9Jf4NVWoC","executionInfo":{"status":"ok","timestamp":1725429935318,"user_tz":-330,"elapsed":6,"user":{"displayName":"siddharth P santhosh","userId":"13793384757789431104"}},"outputId":"3d0f5108-bcd9-4909-b745-e7b9c13184e2"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Acuracy on training data: 1.0\n","Accuracy on test data: 0.8333333333333334\n"]}]},{"cell_type":"code","source":["input_data = (116,5.9,8.1,0.732)\n","\n","\n","input_data_as_numpy_array = np.asarray(input_data)\n","\n","input_data_reshaped = input_data_as_numpy_array.reshape(1, -1)\n","\n","prediction = svm.predict(input_data_reshaped)\n","print(prediction[0])\n","if prediction[0] == 1:\n","  print('The fruit is apple')\n","elif prediction[0] == 2:\n","  print('The fruit is manbdarin')\n","elif prediction[0] == 3:\n","  print('The fruit is orange')\n","else:\n","  print('The fruit is lemon')"],"metadata":{"id":"TN01GKpsvo0n","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1725424911509,"user_tz":-330,"elapsed":449,"user":{"displayName":"siddharth P santhosh","userId":"13793384757789431104"}},"outputId":"278e2db0-c22f-401d-9207-6508d78a271a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["4\n","The fruit is lemon\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:465: UserWarning: X does not have valid feature names, but SVC was fitted with feature names\n","  warnings.warn(\n"]}]},{"cell_type":"code","source":["if  b >= a and b >= c and b >= d and b >= e:\n","  prediction = knn.predict(input_data_reshaped)\n","  print('b')\n","\n","#  check if 'b' is the largest\n","elif a >= b and a >= c and a >= d and a >= e:\n","  prediction = logreg.predict(input_data_reshaped)\n","  print('a')\n","#  check if 'c' is the largest\n","elif c >= a and c >= b and c >= d and c >= e:\n","  prediction = gnb.predict(input_data_reshaped)\n","  print('c')\n","#check if 'd' is the largest\n","elif d >= a and d >= b and d >= c and d >= e:\n","  prediction = svm.predict(input_data_reshaped)\n","  print('d')\n","#check if 'e' is the largest\n","elif e >= a and e >= b and e >= c and e >= d:\n","  prediction = random.predict(input_data_reshaped)\n","  print('e')\n","#determine the largest or equality among them\n","elif a == b == c == d == e :\n","      prediction = svm.predict(input_data_reshaped)\n","\n","print(prediction[0])\n","if prediction[0] == 1:\n","  print('The fruit is apple')\n","elif prediction[0] == 2:\n","  print('The fruit is manbdarin')\n","elif prediction[0] == 3:\n","  print('The fruit is orange')\n","else:\n","  print('The fruit is lemon')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fA0VSqv0mCKV","executionInfo":{"status":"ok","timestamp":1725430319560,"user_tz":-330,"elapsed":408,"user":{"displayName":"siddharth P santhosh","userId":"13793384757789431104"}},"outputId":"a09584cb-9ae6-4700-8f08-4e660e62cefa"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["b\n","4\n","The fruit is lemon\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:465: UserWarning: X does not have valid feature names, but KNeighborsClassifier was fitted with feature names\n","  warnings.warn(\n"]}]},{"cell_type":"code","source":["max_value = max(a, b, c, d, e)\n","print(max_value)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"STyROOuwry4Q","executionInfo":{"status":"ok","timestamp":1725430954683,"user_tz":-330,"elapsed":434,"user":{"displayName":"siddharth P santhosh","userId":"13793384757789431104"}},"outputId":"e6dfb49d-3f61-4fdf-8268-fe5858acaa77"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0.8333333333333334\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"XYYMy-H6stsl"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Assuming 'input_data_reshaped' is already defined, and 'a, b, c, d, e' are the variables you want to compare.\n","if  max_value == a:\n","    prediction = logreg.predict(input_data_reshaped)\n","    print('a')\n","\n","elif max_value == b:\n","    prediction = knn.predict(input_data_reshaped)\n","    print('b')\n","\n","elif max_value == c:\n","    prediction = gnb.predict(input_data_reshaped)\n","    print('c')\n","\n","elif max_value ==d:\n","    prediction = svm.predict(input_data_reshaped)\n","    print('d')\n","\n","elif max_value ==e :\n","    prediction = random.predict(input_data_reshaped)\n","    print('e')\n","\n","# If all variables are equal, randomly choose among the models\n","elif a == b == c == d == e:\n","    import random\n","    models = [knn, logreg, gnb, svm, random]  # Assuming 'random' is a model object\n","    chosen_model = random.choice(models)\n","    prediction = chosen_model.predict(input_data_reshaped)\n","    print(f\"All variables are equal. Randomly chosen model: {chosen_model}\")\n","\n","\n","# Print the prediction result\n","print(prediction[0])\n","\n","# Interpret the prediction\n","if prediction[0] == 1:\n","    print('The fruit is apple')\n","elif prediction[0] == 2:\n","    print('The fruit is mandarin')\n","elif prediction[0] == 3:\n","    print('The fruit is orange')\n","else:\n","    print('The fruit is lemon')\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZKqmQe3tqlYL","executionInfo":{"status":"ok","timestamp":1725431126202,"user_tz":-330,"elapsed":486,"user":{"displayName":"siddharth P santhosh","userId":"13793384757789431104"}},"outputId":"78c74ace-ffa3-45fe-d55b-b2304b561fda"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["a\n","4\n","The fruit is lemon\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:465: UserWarning: X does not have valid feature names, but LogisticRegression was fitted with feature names\n","  warnings.warn(\n"]}]},{"cell_type":"code","source":["import random\n","\n","models = {\n","    'a': logreg,\n","    'b': knn,\n","    'c': gnb,\n","    'd': svm,\n","    'e': random\n","}\n","\n","max_value = max(a, b, c, d, e)\n","\n","# Collect all variables that have the maximum value\n","largest_vars = []\n","if a == max_value:\n","    largest_vars.append('a')\n","if b == max_value:\n","    largest_vars.append('b')\n","if c == max_value:\n","    largest_vars.append('c')\n","if d == max_value:\n","    largest_vars.append('d')\n","if e == max_value:\n","    largest_vars.append('e')\n","\n","# Choose randomly if there's a tie\n","chosen_var = random.choice(largest_vars)\n","print(f'Chosen variable: {chosen_var}')\n","\n","# Use the chosen model for prediction\n","prediction = models[chosen_var].predict(input_data_reshaped)\n","\n","# Print the prediction result\n","print(prediction[0])\n","\n","# Interpret the prediction\n","if prediction[0] == 1:\n","    print('The fruit is apple')\n","elif prediction[0] == 2:\n","    print('The fruit is mandarin')\n","elif prediction[0] == 3:\n","    print('The fruit is orange')\n","else:\n","    print('The fruit is lemon')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sh-MvhsftrH0","executionInfo":{"status":"ok","timestamp":1725431269848,"user_tz":-330,"elapsed":411,"user":{"displayName":"siddharth P santhosh","userId":"13793384757789431104"}},"outputId":"0d084808-e41a-462f-b28f-1060cbe11936"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Chosen variable: d\n","4\n","The fruit is lemon\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:465: UserWarning: X does not have valid feature names, but SVC was fitted with feature names\n","  warnings.warn(\n"]}]},{"cell_type":"code","source":["Y_test"],"metadata":{"id":"JJId1fRtwK98","colab":{"base_uri":"https://localhost:8080/","height":272},"executionInfo":{"status":"ok","timestamp":1725422559100,"user_tz":-330,"elapsed":430,"user":{"displayName":"siddharth P santhosh","userId":"13793384757789431104"}},"outputId":"847980d6-7c16-46e7-c780-c67de6db1d21"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["28    3\n","10    1\n","46    4\n","38    3\n","16    1\n","56    4\n","Name: fruit_label, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>fruit_label</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>28</th>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>46</th>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>38</th>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>16</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>56</th>\n","      <td>4</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":43}]}]}