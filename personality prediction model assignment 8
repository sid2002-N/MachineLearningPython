{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"gpuType":"T4","authorship_tag":"ABX9TyOWbMQ3ilDZ8GGOFsG2i/2R"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"6gsQ5Pk1gDe0"},"outputs":[],"source":["import pandas as pd\n","import numpy as np\n","import seaborn as sns\n","from matplotlib import pyplot as plt\n","import random\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.linear_model import LinearRegression\n","from sklearn import metrics\n","from sklearn.ensemble import RandomForestRegressor"]},{"cell_type":"code","source":["colors = [\n","    'red', 'green', 'blue', 'yellow', 'orange', 'purple', 'pink', 'brown', 'gray', 'black', 'cyan', 'magenta', 'lime', 'gold', 'silver',\n","    'maroon', 'navy', 'olive', 'teal', 'lavender', 'indigo', 'violet', 'turquoise', 'peach', 'beige', 'mint', 'coral', 'salmon', 'aqua', 'plum',\n","    'fuchsia', 'chartreuse', 'emerald', 'sapphire', 'amber', 'ivory', 'khaki', 'skyblue', 'royalblue', 'periwinkle', 'tan', 'crimson', 'orchid',\n","    'slateblue', 'lightcoral', 'deepskyblue', 'firebrick', 'forestgreen', 'goldenrod', 'hotpink', 'lavenderblush', 'lemonchiffon', 'mediumseagreen',\n","    'midnightblue', 'olive', 'orangered', 'palegreen', 'palevioletred', 'rebeccapurple', 'rosybrown', 'seagreen', 'sienna', 'springgreen', 'steelblue',\n","    'thistle', 'tomato', 'wheat', 'whitesmoke'\n","]\n"],"metadata":{"id":"i-f6pm-JiPDl"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from google.colab import files\n","files.upload()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":130},"id":"mx5MGLHIgX2-","executionInfo":{"status":"ok","timestamp":1726118994089,"user_tz":-330,"elapsed":10606,"user":{"displayName":"siddharth P santhosh","userId":"13793384757789431104"}},"outputId":"6396a907-708c-4e85-cfa6-a757f80dd5a7"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-90b8d843-d7bf-41c0-acba-30b36cebf368\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-90b8d843-d7bf-41c0-acba-30b36cebf368\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving train.csv to train.csv\n"]},{"output_type":"execute_result","data":{"text/plain":["{'train.csv': b'Gender,Age,openness,neuroticism,conscientiousness,agreeableness,extraversion,Personality (Class label)\\r\\nMale,17,7,4,7,3,2,extraverted\\r\\nMale,19,4,5,4,6,6,serious\\r\\nFemale,18,7,6,4,5,5,dependable\\r\\nFemale,22,5,6,7,4,3,extraverted\\r\\nFemale,19,7,4,6,5,4,lively\\r\\nMale,18,5,7,7,6,4,lively\\r\\nFemale,17,5,6,5,7,4,extraverted\\r\\nFemale,19,6,6,7,5,4,extraverted\\r\\nMale,18,5,7,5,6,7,dependable\\r\\nFemale,19,5,5,7,4,5,lively\\r\\nMale,19,6,7,5,6,3,serious\\r\\nMale,19,7,6,7,7,6,extraverted\\r\\nMale,19,7,6,6,5,6,lively\\r\\nFemale,19,6,7,5,5,5,dependable\\r\\nFemale,19,5,5,4,5,4,responsible\\r\\nMale,19,5,6,4,6,3,extraverted\\r\\nFemale,19,7,7,2,6,5,serious\\r\\nFemale,18,6,7,4,4,2,dependable\\r\\nFemale,19,6,6,6,4,3,responsible\\r\\nFemale,19,5,6,3,3,3,extraverted\\r\\nFemale,19,6,4,6,3,4,responsible\\r\\nMale,18,4,5,4,3,6,extraverted\\r\\nFemale,19,5,4,5,5,3,responsible\\r\\nMale,20,5,3,3,4,4,serious\\r\\nFemale,19,6,7,5,5,4,serious\\r\\nFemale,19,7,5,6,6,5,dependable\\r\\nFemale,18,6,4,5,5,4,extraverted\\r\\nFemale,19,4,6,4,7,6,extraverted\\r\\nFemale,27,6,5,6,4,5,lively\\r\\nFemale,17,7,4,7,6,5,lively\\r\\nFemale,21,6,6,3,5,4,extraverted\\r\\nMale,18,6,5,5,6,1,extraverted\\r\\nFemale,18,6,6,5,6,3,dependable\\r\\nMale,18,6,3,5,5,4,lively\\r\\nMale,18,5,7,3,6,4,serious\\r\\nFemale,19,7,6,6,6,5,lively\\r\\nFemale,18,7,6,6,7,5,responsible\\r\\nFemale,18,7,7,5,7,3,responsible\\r\\nFemale,17,7,5,7,7,2,dependable\\r\\nFemale,20,6,5,4,5,5,serious\\r\\nMale,19,3,5,3,4,2,dependable\\r\\nFemale,17,6,7,6,6,6,extraverted\\r\\nFemale,18,7,5,6,6,4,serious\\r\\nFemale,20,5,7,5,6,3,extraverted\\r\\nMale,28,6,5,7,6,4,dependable\\r\\nMale,17,5,6,5,5,3,dependable\\r\\nFemale,18,5,5,4,4,3,responsible\\r\\nFemale,20,7,6,6,4,4,serious\\r\\nFemale,18,6,4,3,6,2,lively\\r\\nFemale,19,6,4,5,6,4,lively\\r\\nFemale,19,3,4,5,5,1,extraverted\\r\\nFemale,18,4,5,4,6,1,extraverted\\r\\nMale,17,5,4,3,6,6,serious\\r\\nFemale,23,6,7,4,4,5,extraverted\\r\\nFemale,19,7,5,7,4,6,lively\\r\\nMale,18,7,5,5,4,3,lively\\r\\nFemale,17,5,5,4,6,4,extraverted\\r\\nFemale,18,6,6,5,4,4,dependable\\r\\nFemale,19,5,6,5,4,7,lively\\r\\nMale,19,5,4,6,1,3,lively\\r\\nMale,19,3,7,2,6,7,responsible\\r\\nFemale,18,7,6,5,5,5,extraverted\\r\\nFemale,19,6,5,4,5,2,responsible\\r\\nMale,19,6,6,2,5,6,dependable\\r\\nFemale,18,7,5,5,4,5,serious\\r\\nMale,19,6,6,5,5,4,serious\\r\\nFemale,17,6,5,5,4,4,responsible\\r\\nFemale,19,5,6,5,6,4,dependable\\r\\nMale,19,6,5,5,6,6,responsible\\r\\nFemale,19,5,5,5,7,3,dependable\\r\\nMale,18,6,6,4,4,3,extraverted\\r\\nMale,18,7,6,6,5,7,extraverted\\r\\nFemale,17,5,5,5,5,3,responsible\\r\\nFemale,19,5,5,4,4,4,dependable\\r\\nFemale,18,5,4,5,6,4,responsible\\r\\nFemale,18,7,4,6,6,4,serious\\r\\nFemale,17,4,6,4,4,1,extraverted\\r\\nFemale,17,7,4,5,5,5,dependable\\r\\nFemale,19,6,4,5,5,6,lively\\r\\nFemale,18,5,1,3,5,2,lively\\r\\nMale,18,3,6,3,3,2,extraverted\\r\\nFemale,18,7,5,7,5,2,lively\\r\\nMale,21,6,5,5,5,3,serious\\r\\nFemale,21,6,5,6,5,2,responsible\\r\\nFemale,18,6,4,4,6,4,extraverted\\r\\nMale,18,7,5,7,6,1,serious\\r\\nFemale,19,5,4,7,4,4,dependable\\r\\nFemale,18,4,6,2,1,4,serious\\r\\nMale,20,5,6,6,5,3,dependable\\r\\nMale,18,6,7,6,5,4,responsible\\r\\nFemale,18,6,4,5,4,6,dependable\\r\\nMale,18,6,5,3,5,3,extraverted\\r\\nFemale,18,7,5,2,4,3,extraverted\\r\\nMale,21,4,4,4,4,4,serious\\r\\nMale,21,6,6,5,6,4,lively\\r\\nMale,18,3,6,6,1,3,responsible\\r\\nFemale,18,4,4,5,7,3,dependable\\r\\nFemale,19,5,5,4,6,3,lively\\r\\nMale,19,2,5,3,6,4,serious\\r\\nFemale,19,5,5,2,2,1,responsible\\r\\nMale,18,5,3,3,6,2,responsible\\r\\nFemale,19,6,5,2,3,3,lively\\r\\nMale,27,7,5,6,7,3,dependable\\r\\nMale,17,6,5,4,7,5,dependable\\r\\nFemale,21,4,6,3,5,2,lively\\r\\nFemale,18,7,6,4,1,1,extraverted\\r\\nFemale,17,7,4,7,3,7,responsible\\r\\nFemale,19,5,1,5,1,5,lively\\r\\nFemale,18,6,5,3,2,3,extraverted\\r\\nMale,22,7,5,3,6,3,dependable\\r\\nFemale,19,5,5,6,3,2,serious\\r\\nFemale,18,7,5,7,1,5,serious\\r\\nFemale,17,7,4,4,6,4,lively\\r\\nMale,19,3,4,4,2,5,lively\\r\\nMale,18,2,6,6,7,5,extraverted\\r\\nFemale,19,6,2,6,5,5,responsible\\r\\nFemale,19,3,6,6,1,4,dependable\\r\\nMale,19,4,6,7,6,5,dependable\\r\\nFemale,28,6,4,6,5,4,responsible\\r\\nFemale,17,5,3,4,7,6,dependable\\r\\nFemale,18,5,5,5,6,5,responsible\\r\\nMale,20,7,5,7,2,2,serious\\r\\nFemale,18,4,5,5,6,3,serious\\r\\nFemale,19,4,6,6,5,6,lively\\r\\nFemale,19,5,3,6,5,2,serious\\r\\nMale,28,7,3,6,4,3,extraverted\\r\\nFemale,17,2,6,3,6,1,serious\\r\\nMale,18,5,7,7,6,2,extraverted\\r\\nMale,20,7,2,4,5,2,responsible\\r\\nFemale,18,3,1,6,5,2,responsible\\r\\nFemale,19,5,3,4,5,3,lively\\r\\nFemale,19,3,5,5,7,4,extraverted\\r\\nFemale,21,7,2,3,3,5,responsible\\r\\nFemale,18,5,5,4,5,3,serious\\r\\nFemale,17,4,3,7,6,3,responsible\\r\\nFemale,19,4,7,6,5,3,serious\\r\\nFemale,18,3,7,6,1,6,serious\\r\\nMale,22,2,6,5,4,6,extraverted\\r\\nMale,19,6,2,6,6,3,extraverted\\r\\nFemale,18,7,5,6,2,6,dependable\\r\\nFemale,17,7,7,6,6,4,dependable\\r\\nFemale,19,6,2,7,6,3,lively\\r\\nFemale,18,5,3,6,7,7,lively\\r\\nFemale,20,5,5,6,2,5,dependable\\r\\nFemale,18,4,6,5,1,6,responsible\\r\\nMale,19,3,5,7,6,5,serious\\r\\nFemale,19,5,2,5,4,4,serious\\r\\nMale,18,5,3,6,7,4,serious\\r\\nFemale,17,6,3,5,5,7,extraverted\\r\\nMale,23,5,3,4,5,5,serious\\r\\nFemale,19,3,4,7,7,7,extraverted\\r\\nFemale,18,7,5,4,1,5,dependable\\r\\nFemale,17,4,1,7,6,5,responsible\\r\\nFemale,18,3,6,3,7,6,lively\\r\\nFemale,19,6,4,3,1,7,extraverted\\r\\nFemale,19,5,2,2,2,4,dependable\\r\\nFemale,19,2,2,3,4,4,serious\\r\\nMale,18,6,3,2,3,4,responsible\\r\\nFemale,19,4,6,6,5,4,extraverted\\r\\nMale,19,5,6,4,6,2,lively\\r\\nMale,18,2,5,3,7,1,serious\\r\\nFemale,19,4,7,5,4,5,extraverted\\r\\nFemale,17,4,7,4,7,3,dependable\\r\\nFemale,19,1,1,5,5,6,dependable\\r\\nFemale,19,7,6,6,5,7,dependable\\r\\nFemale,19,5,7,7,7,4,responsible\\r\\nMale,18,6,7,5,4,1,dependable\\r\\nFemale,19,7,4,4,4,6,responsible\\r\\nMale,27,5,5,6,6,7,lively\\r\\nMale,17,2,7,2,6,2,responsible\\r\\nMale,21,6,3,4,5,1,lively\\r\\nFemale,18,6,3,5,3,2,extraverted\\r\\nFemale,17,5,4,1,5,2,extraverted\\r\\nMale,19,5,3,1,3,3,responsible\\r\\nFemale,18,5,5,2,6,4,serious\\r\\nFemale,19,5,7,2,4,2,extraverted\\r\\nFemale,19,5,4,2,1,5,lively\\r\\nMale,18,7,7,1,1,1,extraverted\\r\\nFemale,19,6,2,2,7,4,extraverted\\r\\nMale,20,5,3,1,5,5,serious\\r\\nFemale,19,5,7,1,6,6,serious\\r\\nMale,19,4,5,5,4,3,serious\\r\\nFemale,18,5,3,4,6,2,responsible\\r\\nFemale,19,6,1,5,4,5,serious\\r\\nFemale,27,5,2,3,7,5,extraverted\\r\\nFemale,23,6,7,3,7,7,lively\\r\\nMale,20,6,5,1,7,4,lively\\r\\nMale,25,5,7,1,3,6,extraverted\\r\\nFemale,18,6,7,4,4,6,serious\\r\\nMale,21,5,5,2,7,1,dependable\\r\\nMale,22,3,4,7,6,5,serious\\r\\nMale,17,4,4,7,6,5,lively\\r\\nFemale,20,4,5,3,4,1,responsible\\r\\nMale,18,6,3,1,5,7,lively\\r\\nFemale,19,5,2,3,6,1,serious\\r\\nMale,19,4,5,5,7,5,extraverted\\r\\nFemale,18,5,3,1,5,5,extraverted\\r\\nFemale,18,2,7,1,4,4,responsible\\r\\nMale,20,6,6,1,2,2,lively\\r\\nFemale,18,5,5,3,6,1,extraverted\\r\\nMale,19,5,5,2,7,4,dependable\\r\\nMale,19,4,7,4,6,4,responsible\\r\\nMale,17,6,2,1,6,6,serious\\r\\nFemale,19,4,5,2,5,5,responsible\\r\\nMale,18,7,2,1,7,6,dependable\\r\\nMale,19,3,4,3,6,3,responsible\\r\\nFemale,19,6,1,1,7,6,serious\\r\\nFemale,18,2,5,7,7,7,dependable\\r\\nMale,22,6,1,2,7,4,serious\\r\\nMale,19,5,1,1,2,3,lively\\r\\nFemale,18,5,5,6,6,5,extraverted\\r\\nFemale,17,4,4,4,7,5,serious\\r\\nFemale,19,4,1,1,3,5,dependable\\r\\nMale,18,4,3,3,7,7,serious\\r\\nFemale,20,5,1,5,7,6,lively\\r\\nFemale,23,5,5,5,7,6,extraverted\\r\\nMale,20,6,2,7,6,1,lively\\r\\nFemale,25,6,1,4,6,4,responsible\\r\\nFemale,18,4,1,2,7,5,responsible\\r\\nFemale,21,6,1,5,7,7,extraverted\\r\\nMale,22,5,4,6,5,3,serious\\r\\nMale,19,7,2,1,6,4,extraverted\\r\\nFemale,18,6,1,3,7,5,responsible\\r\\nMale,19,1,2,3,7,6,responsible\\r\\nFemale,19,4,1,4,7,4,responsible\\r\\nFemale,19,5,5,5,4,4,dependable\\r\\nMale,19,5,1,5,6,6,dependable\\r\\nFemale,19,5,1,7,6,5,dependable\\r\\nFemale,19,5,1,2,5,4,responsible\\r\\nMale,19,7,2,6,4,4,serious\\r\\nMale,19,6,7,6,6,4,extraverted\\r\\nFemale,18,4,5,5,4,6,serious\\r\\nMale,17,3,4,3,1,5,lively\\r\\nFemale,19,6,1,2,7,7,extraverted\\r\\nMale,18,7,2,4,6,5,extraverted\\r\\nFemale,19,6,5,5,4,6,dependable\\r\\nMale,19,5,3,6,6,5,lively\\r\\nMale,19,2,1,5,6,6,lively\\r\\nFemale,19,6,1,4,6,7,serious\\r\\nFemale,19,5,1,3,7,5,responsible\\r\\nMale,19,5,3,2,7,7,dependable\\r\\nFemale,19,5,1,3,5,4,responsible\\r\\nMale,19,3,4,2,4,6,extraverted\\r\\nMale,18,6,3,6,7,6,responsible\\r\\nFemale,21,6,4,5,5,5,extraverted\\r\\nFemale,22,5,1,1,7,6,serious\\r\\nFemale,17,7,3,3,1,6,dependable\\r\\nMale,20,6,1,6,4,5,extraverted\\r\\nMale,18,5,7,6,5,6,extraverted\\r\\nFemale,19,4,5,5,4,4,dependable\\r\\nMale,19,6,5,1,4,7,responsible\\r\\nMale,22,3,4,3,4,7,lively\\r\\nMale,19,5,7,2,6,5,serious\\r\\nMale,18,2,6,7,3,6,serious\\r\\nFemale,19,5,6,3,4,7,serious\\r\\nFemale,19,3,5,3,3,4,extraverted\\r\\nMale,19,5,6,5,6,1,dependable\\r\\nFemale,19,7,3,3,5,5,responsible\\r\\nMale,23,4,3,6,2,6,dependable\\r\\nFemale,20,3,4,7,6,4,lively\\r\\nMale,25,2,6,6,2,5,responsible\\r\\nMale,18,6,6,4,4,4,lively\\r\\nFemale,21,6,6,4,7,5,extraverted\\r\\nMale,22,7,7,2,5,4,serious\\r\\nMale,17,4,7,7,3,5,responsible\\r\\nFemale,25,5,5,5,4,5,responsible\\r\\nFemale,26,1,5,4,6,5,dependable\\r\\nMale,27,1,5,2,7,3,dependable\\r\\nMale,20,4,2,3,5,5,serious\\r\\nFemale,17,6,3,3,1,5,serious\\r\\nFemale,19,6,1,6,4,6,serious\\r\\nMale,19,6,3,3,6,7,lively\\r\\nMale,21,7,2,4,6,4,serious\\r\\nFemale,22,6,4,4,4,5,extraverted\\r\\nMale,23,3,3,2,3,7,responsible\\r\\nMale,21,4,4,1,6,6,lively\\r\\nFemale,21,7,1,4,5,4,dependable\\r\\nMale,20,7,4,6,3,4,serious\\r\\nFemale,20,6,5,1,3,5,lively\\r\\nFemale,18,4,4,1,5,3,dependable\\r\\nMale,18,4,4,4,6,3,lively\\r\\nMale,19,5,4,3,5,6,dependable\\r\\nMale,18,4,3,3,5,3,serious\\r\\nFemale,19,6,6,2,3,7,extraverted\\r\\nMale,20,6,6,6,3,3,dependable\\r\\nMale,21,6,2,2,7,5,lively\\r\\nFemale,21,6,4,7,5,7,serious\\r\\nMale,25,7,7,5,6,7,extraverted\\r\\nFemale,22,3,6,7,4,3,lively\\r\\nMale,17,5,2,7,5,1,lively\\r\\nMale,20,3,4,7,5,5,extraverted\\r\\nFemale,18,5,5,5,7,5,dependable\\r\\nFemale,19,5,6,7,4,5,serious\\r\\nFemale,19,3,5,6,5,5,extraverted\\r\\nMale,18,3,5,2,5,2,responsible\\r\\nFemale,18,5,4,6,7,5,serious\\r\\nFemale,20,6,4,7,5,5,serious\\r\\nMale,18,7,4,3,6,5,responsible\\r\\nMale,17,5,4,6,7,1,lively\\r\\nFemale,17,5,5,7,6,4,serious\\r\\nMale,20,6,6,5,4,5,serious\\r\\nMale,18,6,3,1,4,6,lively\\r\\nFemale,19,3,5,3,5,4,serious\\r\\nMale,19,6,6,6,4,6,responsible\\r\\nFemale,18,5,7,6,7,6,dependable\\r\\nFemale,18,2,7,5,7,4,dependable\\r\\nFemale,20,6,6,1,5,1,lively\\r\\nMale,18,6,7,3,1,5,extraverted\\r\\nFemale,20,3,6,2,5,7,extraverted\\r\\nMale,18,7,7,7,6,2,lively\\r\\nMale,18,6,6,3,6,5,responsible\\r\\nFemale,18,6,6,3,6,3,serious\\r\\nFemale,18,5,5,7,5,6,serious\\r\\nMale,21,7,6,7,5,5,responsible\\r\\nMale,21,6,7,7,4,2,dependable\\r\\nFemale,18,4,6,3,5,4,serious\\r\\nMale,18,6,5,5,4,5,extraverted\\r\\nFemale,19,6,6,6,6,4,dependable\\r\\nMale,19,2,5,5,3,5,extraverted\\r\\nFemale,18,5,4,6,4,5,lively\\r\\nMale,19,4,5,7,4,3,dependable\\r\\nMale,19,1,6,5,1,7,dependable\\r\\nFemale,20,3,7,3,2,6,lively\\r\\nMale,22,5,6,7,5,4,responsible\\r\\nMale,21,4,6,7,6,5,lively\\r\\nFemale,20,2,6,7,4,3,serious\\r\\nMale,17,3,7,6,3,5,serious\\r\\nFemale,18,3,7,6,6,7,dependable\\r\\nFemale,19,7,7,3,5,7,serious\\r\\nFemale,17,6,7,3,7,5,extraverted\\r\\nMale,20,3,7,7,5,3,extraverted\\r\\nFemale,17,4,4,5,2,3,lively\\r\\nFemale,19,7,4,1,3,6,extraverted\\r\\nMale,19,6,5,5,6,5,responsible\\r\\nFemale,21,4,5,7,7,4,extraverted\\r\\nFemale,22,7,5,7,5,5,serious\\r\\nMale,26,1,6,3,6,6,lively\\r\\nFemale,26,3,5,5,5,5,serious\\r\\nMale,24,5,4,5,7,5,serious\\r\\nMale,21,2,6,6,7,6,extraverted\\r\\nFemale,20,4,5,2,2,3,extraverted\\r\\nMale,18,6,5,4,3,7,serious\\r\\nMale,19,1,5,4,7,4,dependable\\r\\nMale,17,3,3,2,6,4,lively\\r\\nFemale,17,5,5,3,6,5,lively\\r\\nFemale,21,2,3,6,7,5,dependable\\r\\nMale,20,4,7,3,5,1,lively\\r\\nFemale,22,7,3,4,7,5,dependable\\r\\nMale,17,4,5,2,5,6,serious\\r\\nMale,20,6,4,5,7,5,extraverted\\r\\nFemale,18,1,4,2,5,2,dependable\\r\\nMale,19,5,3,4,5,2,responsible\\r\\nFemale,19,5,7,6,4,4,dependable\\r\\nMale,18,5,1,7,5,3,serious\\r\\nMale,20,7,4,7,6,5,serious\\r\\nMale,25,5,2,3,5,4,responsible\\r\\nFemale,18,6,1,5,5,5,responsible\\r\\nFemale,21,7,1,3,4,5,extraverted\\r\\nMale,22,6,2,2,4,5,dependable\\r\\nFemale,17,4,4,5,4,5,lively\\r\\nMale,20,4,3,3,4,3,serious\\r\\nFemale,18,5,4,3,4,6,serious\\r\\nMale,19,4,3,1,7,3,lively\\r\\nMale,19,7,4,4,3,6,responsible\\r\\nMale,18,7,4,3,2,6,responsible\\r\\nFemale,18,5,8,1,7,4,extraverted\\r\\nMale,20,1,7,6,3,6,lively\\r\\nMale,17,5,5,4,5,3,lively\\r\\nMale,17,6,4,7,4,6,extraverted\\r\\nFemale,18,6,6,5,3,1,dependable\\r\\nFemale,19,6,2,7,1,2,dependable\\r\\nMale,26,5,6,3,5,4,serious\\r\\nMale,24,6,2,5,6,2,extraverted\\r\\nFemale,21,1,6,6,2,6,dependable\\r\\nMale,20,4,6,6,3,4,lively\\r\\nFemale,18,4,2,6,2,3,serious\\r\\nMale,19,6,3,4,4,5,extraverted\\r\\nMale,17,6,5,6,4,5,responsible\\r\\nFemale,17,7,6,5,5,4,extraverted\\r\\nFemale,17,7,5,7,2,3,extraverted\\r\\nMale,19,5,5,7,4,5,responsible\\r\\nMale,18,7,4,5,2,5,dependable\\r\\nFemale,19,6,5,4,4,5,serious\\r\\nMale,19,6,5,7,4,5,lively\\r\\nFemale,19,6,4,2,7,6,serious\\r\\nMale,21,6,6,7,3,6,extraverted\\r\\nFemale,20,5,6,6,3,6,dependable\\r\\nFemale,20,5,5,4,4,4,responsible\\r\\nFemale,18,4,6,6,4,5,extraverted\\r\\nMale,25,6,4,4,6,6,serious\\r\\nFemale,25,7,4,5,5,5,serious\\r\\nMale,17,3,7,1,5,7,responsible\\r\\nMale,21,5,5,6,6,4,lively\\r\\nFemale,25,7,6,7,1,1,responsible\\r\\nFemale,22,5,5,4,3,5,serious\\r\\nMale,17,6,3,7,1,4,dependable\\r\\nFemale,20,5,6,6,4,4,dependable\\r\\nMale,23,1,3,5,6,4,serious\\r\\nMale,24,4,7,6,4,6,dependable\\r\\nFemale,19,6,3,2,4,6,dependable\\r\\nMale,22,4,5,6,5,5,responsible\\r\\nFemale,17,5,5,6,4,6,lively\\r\\nMale,20,1,2,7,6,4,dependable\\r\\nMale,18,3,3,6,5,3,responsible\\r\\nFemale,19,4,4,7,5,6,serious\\r\\nFemale,19,5,4,6,4,3,lively\\r\\nMale,18,2,5,7,6,7,dependable\\r\\nMale,18,7,5,6,2,6,serious\\r\\nFemale,20,6,7,5,4,3,lively\\r\\nFemale,18,3,5,3,5,6,responsible\\r\\nFemale,17,3,5,6,3,4,responsible\\r\\nMale,17,5,4,5,2,7,extraverted\\r\\nMale,20,5,5,7,2,4,serious\\r\\nFemale,18,4,5,7,4,7,lively\\r\\nFemale,19,2,4,4,3,5,serious\\r\\nFemale,19,6,4,7,5,7,lively\\r\\nMale,26,1,2,7,4,6,extraverted\\r\\nMale,27,1,6,7,4,4,lively\\r\\nMale,20,6,4,4,4,6,dependable\\r\\nMale,21,5,4,4,6,3,lively\\r\\nFemale,18,6,1,7,6,5,dependable\\r\\nMale,19,3,3,4,4,3,responsible\\r\\nFemale,20,4,5,2,6,2,responsible\\r\\nFemale,20,4,4,4,4,6,responsible\\r\\nMale,24,7,2,4,3,4,serious\\r\\nFemale,17,5,4,5,7,6,dependable\\r\\nMale,17,4,4,3,5,5,responsible\\r\\nMale,18,5,3,5,6,6,serious\\r\\nFemale,19,4,2,1,5,6,serious\\r\\nFemale,23,6,3,4,5,4,lively\\r\\nFemale,24,5,3,5,5,5,serious\\r\\nFemale,25,5,7,3,7,4,extraverted\\r\\nMale,18,4,5,6,5,5,responsible\\r\\nMale,19,5,4,5,1,3,responsible\\r\\nFemale,19,6,1,3,6,6,extraverted\\r\\nMale,17,6,6,7,6,5,extraverted\\r\\nFemale,18,4,6,3,5,4,serious\\r\\nMale,22,7,4,2,6,4,dependable\\r\\nMale,23,3,6,5,4,3,lively\\r\\nFemale,21,4,2,3,5,6,responsible\\r\\nFemale,20,4,4,6,4,3,lively\\r\\nMale,5,4,5,5,2,2,extraverted\\r\\nMale,25,5,5,5,4,6,extraverted\\r\\nFemale,26,6,2,6,3,2,dependable\\r\\nFemale,26,7,4,7,5,5,responsible\\r\\nFemale,18,3,3,6,3,5,extraverted\\r\\nMale,19,2,4,7,6,6,responsible\\r\\nMale,20,2,2,4,7,3,extraverted\\r\\nMale,23,3,7,3,3,7,extraverted\\r\\n5,21,2,5,6,1,5,serious\\r\\nMale,18,5,4,5,5,1,lively\\r\\nFemale,19,2,5,4,6,6,serious\\r\\nMale,17,3,6,6,1,6,serious\\r\\nFemale,20,3,4,5,1,4,extraverted\\r\\nFemale,25,4,6,4,5,6,dependable\\r\\nMale,24,5,6,3,3,4,responsible\\r\\nMale,26,5,6,6,2,3,lively\\r\\nFemale,21,3,5,7,4,6,extraverted\\r\\nFemale,5,2,5,3,2,7,responsible\\r\\nMale,23,5,7,1,3,4,extraverted\\r\\nFemale,20,6,5,6,2,7,dependable\\r\\nMale,19,6,4,5,4,3,dependable\\r\\nFemale,24,2,6,6,5,6,serious\\r\\nMale,24,4,5,5,6,4,responsible\\r\\nMale,27,6,6,5,3,6,dependable\\r\\nMale,28,1,5,6,2,5,serious\\r\\nFemale,20,3,5,5,5,5,dependable\\r\\nFemale,21,4,4,5,6,5,responsible\\r\\nFemale,23,5,2,7,7,6,responsible\\r\\nMale,24,5,5,5,2,6,serious\\r\\nFemale,25,3,2,4,4,3,lively\\r\\nMale,26,6,4,6,6,5,extraverted\\r\\nMale,27,7,5,5,1,5,dependable\\r\\nMale,19,4,6,4,2,7,extraverted\\r\\nFemale,18,3,5,6,4,7,serious\\r\\nFemale,20,4,5,5,2,5,serious\\r\\nFemale,21,1,4,6,7,5,responsible\\r\\nMale,21,3,4,5,1,4,serious\\r\\nMale,21,3,4,5,2,7,serious\\r\\nMale,18,3,3,5,7,4,extraverted\\r\\nFemale,23,5,1,1,5,5,extraverted\\r\\nFemale,24,3,5,4,1,7,responsible\\r\\nMale,23,3,6,6,1,6,lively\\r\\nMale,25,7,2,5,5,6,responsible\\r\\nMale,19,3,3,3,5,4,dependable\\r\\nFemale,19,2,2,5,4,4,extraverted\\r\\nMale,20,4,4,4,4,6,dependable\\r\\nFemale,21,5,4,2,5,6,dependable\\r\\nFemale,22,5,5,7,7,4,dependable\\r\\nFemale,18,3,2,7,4,5,dependable\\r\\nMale,20,6,4,5,7,5,extraverted\\r\\nMale,23,7,5,4,6,4,lively\\r\\nFemale,24,7,6,4,3,5,lively\\r\\nFemale,26,4,7,5,7,3,extraverted\\r\\nMale,20,5,3,6,7,6,responsible\\r\\nMale,18,6,2,7,6,6,dependable\\r\\nMale,19,2,2,6,4,6,extraverted\\r\\nFemale,21,5,3,4,5,6,dependable\\r\\nMale,21,1,1,3,6,6,serious\\r\\nMale,17,6,5,5,5,5,responsible\\r\\nFemale,18,7,6,6,6,4,serious\\r\\nFemale,23,5,2,7,6,6,extraverted\\r\\nFemale,24,6,3,6,4,5,extraverted\\r\\nMale,23,5,2,3,4,6,serious\\r\\nMale,25,7,4,6,5,6,serious\\r\\nFemale,19,5,4,6,4,6,lively\\r\\nFemale,17,2,5,7,6,4,responsible\\r\\nFemale,20,3,2,7,6,4,dependable\\r\\nMale,25,4,4,7,6,4,serious\\r\\nMale,20,5,2,4,5,7,lively\\r\\nMale,21,7,4,1,3,4,dependable\\r\\nMale,22,8,4,2,2,5,lively\\r\\nFemale,20,7,7,7,7,2,extraverted\\r\\nMale,19,4,6,4,6,6,dependable\\r\\nMale,20,7,6,4,5,5,dependable\\r\\nMale,22,7,6,7,4,3,serious\\r\\nFemale,19,4,4,5,5,4,lively\\r\\nMale,18,5,6,6,6,6,lively\\r\\nFemale,17,5,6,5,7,4,extraverted\\r\\nMale,17,6,6,7,5,7,serious\\r\\nMale,21,5,7,5,6,7,lively\\r\\nFemale,19,5,5,5,5,5,lively\\r\\nMale,22,6,7,5,6,3,serious\\r\\nFemale,19,7,6,7,7,6,extraverted\\r\\nMale,21,6,6,6,6,6,serious\\r\\nMale,22,6,7,5,5,5,dependable\\r\\nMale,21,5,5,5,5,5,extraverted\\r\\nMale,17,4,6,7,3,3,extraverted\\r\\nMale,19,7,7,2,6,5,serious\\r\\nFemale,21,6,7,4,4,2,responsible\\r\\nMale,19,5,6,6,4,3,responsible\\r\\nFemale,21,4,6,3,3,3,extraverted\\r\\nMale,19,6,4,6,3,6,responsible\\r\\nMale,22,4,5,4,3,6,serious\\r\\nFemale,21,5,5,5,5,5,responsible\\r\\nMale,17,5,3,3,4,4,extraverted\\r\\nMale,19,7,7,5,5,7,serious\\r\\nMale,19,7,5,6,6,5,serious\\r\\nFemale,18,6,7,5,5,7,responsible\\r\\nFemale,22,4,6,4,6,6,extraverted\\r\\nFemale,26,6,5,6,4,5,lively\\r\\nFemale,20,7,4,7,6,5,dependable\\r\\nFemale,21,6,6,3,5,4,extraverted\\r\\nMale,23,6,5,5,6,3,extraverted\\r\\nMale,18,6,6,5,6,6,dependable\\r\\nFemale,24,6,3,5,5,4,lively\\r\\nMale,18,5,7,3,6,4,extraverted\\r\\nFemale,22,7,6,6,6,5,lively\\r\\nMale,18,1,6,6,7,5,responsible\\r\\nFemale,20,7,7,5,7,3,dependable\\r\\nFemale,21,7,3,7,7,3,dependable\\r\\nFemale,18,6,5,4,5,5,serious\\r\\nMale,23,3,5,5,4,2,responsible\\r\\nFemale,25,6,7,6,6,6,extraverted\\r\\nFemale,18,7,5,6,6,4,lively\\r\\nFemale,20,5,5,5,6,2,extraverted\\r\\nMale,23,6,5,7,6,4,dependable\\r\\nMale,21,5,6,5,5,3,serious\\r\\nFemale,22,5,5,4,4,3,responsible\\r\\nFemale,20,7,5,5,5,5,serious\\r\\nMale,18,6,4,3,6,2,lively\\r\\nMale,17,6,4,7,6,4,lively\\r\\nFemale,19,3,4,5,5,1,responsible\\r\\nFemale,18,4,4,4,6,1,extraverted\\r\\nMale,17,5,4,3,6,6,serious\\r\\nMale,23,7,7,4,4,5,extraverted\\r\\nFemale,19,7,6,7,6,6,lively\\r\\nMale,18,7,5,6,4,3,serious\\r\\nFemale,17,4,5,4,8,4,extraverted\\r\\nMale,22,6,6,5,4,4,dependable\\r\\nFemale,19,7,8,5,4,7,lively\\r\\nMale,19,5,4,3,6,3,lively\\r\\nMale,19,3,7,2,6,5,serious\\r\\nMale,23,7,6,5,5,5,extraverted\\r\\nFemale,19,7,7,4,5,2,responsible\\r\\nMale,19,6,6,4,8,6,dependable\\r\\nFemale,18,7,5,5,4,4,lively\\r\\nFemale,24,6,6,5,5,4,serious\\r\\nFemale,17,7,6,5,4,4,responsible\\r\\nFemale,19,5,6,6,7,4,dependable\\r\\nMale,19,6,5,5,6,4,lively\\r\\nMale,22,5,5,5,7,3,dependable\\r\\nMale,18,7,8,4,4,3,extraverted\\r\\nMale,18,7,6,8,5,7,extraverted\\r\\nFemale,17,5,5,5,5,6,lively\\r\\nMale,24,5,5,4,4,4,dependable\\r\\nFemale,18,6,6,5,6,4,responsible\\r\\nFemale,18,7,4,7,7,4,serious\\r\\nFemale,17,4,6,4,4,7,extraverted\\r\\nMale,24,7,4,5,5,5,dependable\\r\\nFemale,19,5,5,5,5,6,lively\\r\\nFemale,18,5,1,6,6,2,lively\\r\\nMale,18,3,6,3,3,7,responsible\\r\\nMale,22,7,5,7,5,2,lively\\r\\nMale,21,8,8,5,5,3,serious\\r\\nFemale,21,6,5,4,7,2,responsible\\r\\nFemale,18,6,4,4,6,5,lively\\r\\nFemale,22,7,5,7,6,1,serious\\r\\nFemale,19,6,3,7,4,4,dependable\\r\\nFemale,18,4,6,4,4,4,serious\\r\\nMale,20,5,6,6,5,4,lively\\r\\nFemale,20,6,7,6,5,4,responsible\\r\\nFemale,18,5,5,5,4,6,dependable\\r\\nMale,18,6,5,4,4,3,extraverted\\r\\nFemale,18,7,5,2,4,6,dependable\\r\\nFemale,17,4,4,4,4,4,serious\\r\\nMale,21,5,8,5,6,4,lively\\r\\nMale,18,3,6,7,4,3,responsible\\r\\nFemale,18,4,4,5,7,6,extraverted\\r\\nMale,23,5,5,4,6,3,lively\\r\\nMale,19,6,3,3,6,4,serious\\r\\nMale,23,5,5,2,2,1,responsible\\r\\nMale,18,6,6,3,6,2,responsible\\r\\nFemale,19,6,5,4,5,3,lively\\r\\nMale,27,7,5,6,7,5,serious\\r\\nFemale,19,6,5,4,7,5,dependable\\r\\nFemale,21,5,5,3,5,2,lively\\r\\nFemale,18,7,6,5,5,1,extraverted\\r\\nFemale,17,7,4,7,3,5,serious\\r\\nMale,22,5,1,5,1,5,lively\\r\\nFemale,18,5,7,3,2,3,extraverted\\r\\nMale,22,7,5,6,7,3,dependable\\r\\nFemale,19,5,5,6,3,4,responsible\\r\\nMale,23,7,5,7,1,5,serious\\r\\nFemale,17,6,6,4,6,4,lively\\r\\nMale,19,3,4,5,5,5,lively\\r\\nMale,18,2,6,6,7,7,dependable\\r\\nMale,23,6,2,6,5,5,responsible\\r\\nFemale,19,5,5,5,1,4,dependable\\r\\nMale,19,4,6,5,7,5,dependable\\r\\nFemale,28,6,4,6,5,6,lively\\r\\nMale,23,5,3,4,7,6,dependable\\r\\nFemale,18,4,6,5,6,5,responsible\\r\\nMale,20,7,5,5,5,2,serious\\r\\nFemale,18,4,5,5,6,4,dependable\\r\\nMale,22,4,6,6,5,6,lively\\r\\nFemale,19,4,4,6,5,2,serious\\r\\nMale,28,7,3,5,5,3,extraverted\\r\\nFemale,17,2,6,3,6,3,lively\\r\\nFemale,22,5,7,7,6,2,extraverted\\r\\nMale,20,6,6,4,5,2,responsible\\r\\nFemale,18,3,1,5,3,2,responsible\\r\\nFemale,19,5,3,4,5,4,dependable\\r\\nMale,22,3,5,5,7,4,extraverted\\r\\nFemale,21,4,6,3,3,5,responsible\\r\\nFemale,18,5,5,5,6,3,serious\\r\\nFemale,17,4,3,7,6,5,lively\\r\\nMale,20,4,7,6,5,3,serious\\r\\nFemale,18,5,5,6,1,6,serious\\r\\nMale,22,2,6,7,2,6,extraverted\\r\\nMale,19,6,2,6,6,4,serious\\r\\nMale,21,7,5,6,2,6,dependable\\r\\nFemale,17,6,6,6,6,4,dependable\\r\\nFemale,19,6,2,6,7,3,lively\\r\\nFemale,18,5,3,6,7,5,extraverted\\r\\nMale,19,5,5,6,2,5,dependable\\r\\nFemale,18,6,5,5,1,6,responsible\\r\\nMale,19,3,5,6,8,5,serious\\r\\nFemale,19,5,2,3,4,3,lively\\r\\nFemale,22,5,3,6,7,4,serious\\r\\nFemale,17,7,4,5,5,7,extraverted\\r\\nMale,23,5,3,6,6,5,serious\\r\\nFemale,19,3,4,7,7,3,serious\\r\\nMale,20,7,5,4,1,5,dependable\\r\\nFemale,17,4,1,6,5,5,responsible\\r\\nFemale,18,3,6,3,7,4,serious\\r\\nMale,21,6,4,3,1,7,extraverted\\r\\nFemale,19,7,3,2,2,4,dependable\\r\\nFemale,19,2,2,5,5,4,serious\\r\\nMale,18,6,3,2,3,5,dependable\\r\\nMale,22,4,6,6,5,4,extraverted\\r\\nMale,19,6,5,4,6,2,lively\\r\\nMale,18,2,5,4,6,1,serious\\r\\nFemale,19,4,7,5,4,4,responsible\\r\\nMale,21,4,7,4,7,3,dependable\\r\\nFemale,19,5,5,5,5,6,lively\\r\\nFemale,19,7,6,7,4,7,dependable\\r\\nFemale,19,5,7,7,7,6,serious\\r\\nFemale,22,6,7,5,4,1,dependable\\r\\nFemale,19,6,6,4,4,6,responsible\\r\\nMale,27,5,5,7,5,7,lively\\r\\nMale,17,2,7,2,6,4,dependable\\r\\nFemale,20,6,3,4,5,1,lively\\r\\nFemale,18,5,5,5,3,2,extraverted\\r\\nFemale,17,5,4,4,4,2,extraverted\\r\\nMale,19,5,3,1,3,5,lively\\r\\nMale,21,5,5,2,6,4,serious\\r\\nFemale,19,6,6,2,4,2,extraverted\\r\\nFemale,19,5,4,4,4,5,lively\\r\\nMale,18,7,7,1,1,4,dependable\\r\\nMale,22,6,2,2,7,4,extraverted\\r\\nMale,20,6,6,1,5,5,serious\\r\\nFemale,19,5,7,5,5,6,serious\\r\\nMale,19,4,5,5,4,5,dependable\\r\\nMale,21,5,3,4,6,2,responsible\\r\\nFemale,19,5,5,4,4,5,serious\\r\\nFemale,27,5,2,5,5,5,extraverted\\r\\nFemale,23,6,7,3,7,6,serious\\r\\nFemale,18,6,5,1,7,4,lively\\r\\nMale,25,5,5,1,3,6,extraverted\\r\\nFemale,18,6,7,5,5,6,serious\\r\\nMale,21,5,6,2,7,4,responsible\\r\\nFemale,19,3,4,7,6,5,serious\\r\\nMale,17,5,5,7,6,5,lively\\r\\nFemale,20,4,5,6,6,1,responsible\\r\\nMale,18,6,3,1,5,5,dependable\\r\\nMale,22,5,2,3,6,1,serious\\r\\nMale,19,5,6,5,7,5,extraverted\\r\\nFemale,18,5,5,7,6,5,extraverted\\r\\n'}"]},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":["from google.colab import files\n","files.upload()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":130},"id":"UG4qOb_hgjlZ","executionInfo":{"status":"ok","timestamp":1726119001038,"user_tz":-330,"elapsed":6972,"user":{"displayName":"siddharth P santhosh","userId":"13793384757789431104"}},"outputId":"347bab89-c145-432e-e00c-441e6bf92851"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-468ac90d-cc57-47ad-b78e-7fe76490d21d\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-468ac90d-cc57-47ad-b78e-7fe76490d21d\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving test.csv to test.csv\n"]},{"output_type":"execute_result","data":{"text/plain":["{'test.csv': b'Gender,Age,openness,neuroticism,conscientiousness,agreeableness,extraversion,Personality (class label)\\r\\nFemale,20,7,9,9,5,5,dependable\\r\\nMale,17,5,4,5,2,4,serious\\r\\nFemale,25,5,5,7,2,4,serious\\r\\nFemale,18,6,2,7,4,7,serious\\r\\nFemale,19,2,4,7,1,3,responsible\\r\\nFemale,19,6,4,7,5,5,serious\\r\\nFemale,24,1,2,7,4,6,extraverted\\r\\nMale,27,4,5,7,4,4,serious\\r\\nMale,20,6,4,5,6,6,serious\\r\\nMale,21,5,4,4,6,4,serious\\r\\nMale,20,6,1,7,6,5,serious\\r\\nMale,19,4,4,4,4,3,responsible\\r\\nFemale,20,4,5,5,5,2,responsible\\r\\nFemale,20,4,4,4,4,5,serious\\r\\nFemale,19,7,2,4,3,4,lively\\r\\nFemale,17,6,6,5,7,6,extraverted\\r\\nMale,17,5,4,6,6,5,serious\\r\\nMale,18,5,3,5,6,7,serious\\r\\nMale,23,4,2,1,5,6,serious\\r\\nFemale,23,5,4,4,5,4,extraverted\\r\\nFemale,24,5,3,7,3,5,serious\\r\\nFemale,25,5,7,3,7,6,dependable\\r\\nFemale,20,4,5,6,5,5,serious\\r\\nMale,19,6,6,5,1,3,extraverted\\r\\nFemale,19,6,1,5,5,6,extraverted\\r\\nMale,17,6,6,7,6,4,serious\\r\\nMale,17,4,6,3,5,4,extraverted\\r\\nMale,22,6,8,2,6,4,dependable\\r\\nMale,23,3,6,6,7,3,serious\\r\\nFemale,21,4,2,3,5,4,responsible\\r\\nMale,19,4,4,6,4,3,serious\\r\\nMale,24,6,2,5,2,2,lively\\r\\nMale,25,5,5,1,7,6,extraverted\\r\\nFemale,26,6,2,6,3,3,lively\\r\\nMale,23,7,4,7,5,5,serious\\r\\nFemale,18,4,4,6,3,5,serious\\r\\nMale,19,2,4,5,5,6,serious\\r\\nMale,20,2,2,4,7,5,serious\\r\\nFemale,17,3,7,3,3,7,extraverted\\r\\nFemale,21,5,4,6,1,5,serious\\r\\nMale,18,5,4,6,2,1,responsible\\r\\nFemale,19,2,5,4,6,3,responsible\\r\\nFemale,22,3,6,6,1,6,serious\\r\\nFemale,20,8,2,5,1,4,extraverted\\r\\nFemale,25,4,6,6,3,6,dependable\\r\\nMale,24,5,6,3,3,8,serious\\r\\nFemale,17,5,6,6,2,3,responsible\\r\\nFemale,21,5,6,7,4,6,dependable\\r\\nFemale,25,2,5,4,4,7,serious\\r\\nMale,23,5,7,1,3,6,extraverted\\r\\nMale,17,6,5,6,2,7,serious\\r\\nMale,19,5,5,5,4,3,serious\\r\\nFemale,24,2,6,7,4,6,serious\\r\\nMale,24,4,5,5,6,2,lively\\r\\nFemale,19,6,6,5,3,6,extraverted\\r\\nMale,28,4,7,6,2,5,serious\\r\\nFemale,20,3,5,3,8,5,extraverted\\r\\nFemale,21,4,4,5,6,4,serious\\r\\nMale,19,5,2,7,7,6,serious\\r\\nMale,24,6,4,5,2,6,serious\\r\\nFemale,25,3,2,7,2,3,responsible\\r\\nMale,26,6,4,6,6,4,serious\\r\\nFemale,21,7,5,5,1,5,dependable\\r\\nMale,19,5,5,4,2,7,serious\\r\\nFemale,18,3,5,4,8,7,serious\\r\\nFemale,20,4,5,5,2,4,responsible\\r\\nMale,19,1,4,6,7,5,serious\\r\\nMale,21,5,6,5,1,4,serious\\r\\nMale,21,3,4,6,4,7,serious\\r\\nMale,18,3,3,5,7,5,serious\\r\\nMale,19,5,1,1,5,5,serious\\r\\nFemale,24,6,4,4,1,7,serious\\r\\nMale,23,3,6,5,5,6,serious\\r\\nMale,25,7,2,5,5,5,serious\\r\\nFemale,23,3,3,3,5,4,responsible\\r\\nFemale,19,4,6,5,4,4,extraverted\\r\\nMale,20,4,4,5,7,6,serious\\r\\nFemale,21,5,4,2,5,8,serious\\r\\nMale,19,5,5,7,7,4,serious\\r\\nFemale,18,5,7,7,4,5,extraverted\\r\\nMale,20,6,4,7,6,5,serious\\r\\nMale,23,7,5,4,6,6,serious\\r\\nMale,19,7,6,4,3,5,extraverted\\r\\nFemale,26,5,6,5,7,3,extraverted\\r\\nMale,20,5,3,7,8,6,serious\\r\\nMale,18,6,2,7,6,4,lively\\r\\nFemale,23,2,2,6,4,6,serious\\r\\nFemale,21,4,3,4,5,6,serious\\r\\nMale,21,1,1,6,5,6,serious\\r\\nFemale,17,6,3,5,6,4,serious\\r\\nMale,24,4,4,4,5,6,dependable\\r\\nFemale,19,6,3,2,4,3,responsible\\r\\nFemale,22,5,5,5,5,6,responsible\\r\\nFemale,21,5,3,6,8,6,serious\\r\\nFemale,20,6,2,5,6,7,serious\\r\\nMale,23,3,6,6,4,3,serious\\r\\nMale,19,5,4,4,5,5,serious\\r\\nFemale,23,5,6,6,6,3,extraverted\\r\\nFemale,18,5,5,8,6,5,serious\\r\\nFemale,18,4,5,6,5,6,serious\\r\\nFemale,24,6,5,5,6,3,extraverted\\r\\nFemale,18,2,7,1,4,8,extraverted\\r\\nFemale,23,6,6,1,2,2,extraverted\\r\\nFemale,18,7,4,3,6,1,extraverted\\r\\nMale,19,5,5,4,6,4,dependable\\r\\nMale,19,4,7,4,6,8,serious\\r\\nFemale,22,6,2,1,6,6,serious\\r\\nFemale,19,5,6,2,5,5,extraverted\\r\\nMale,18,7,2,7,3,6,dependable\\r\\nMale,19,3,4,3,6,5,serious\\r\\nMale,20,6,1,1,7,6,serious\\r\\nFemale,18,4,6,7,7,7,serious\\r\\nMale,22,6,1,5,6,4,lively\\r\\nMale,19,5,1,1,2,8,serious\\r\\nMale,25,5,5,6,6,5,extraverted\\r\\nFemale,17,6,6,4,7,5,extraverted\\r\\nFemale,19,4,1,5,7,5,serious\\r\\nMale,18,4,3,3,7,4,serious\\r\\nMale,17,5,1,5,7,6,serious\\r\\nFemale,23,6,7,5,7,6,extraverted\\r\\nMale,20,6,2,5,8,1,lively\\r\\nFemale,25,6,1,4,6,3,lively\\r\\nMale,20,4,1,2,7,5,responsible\\r\\nFemale,21,7,4,5,7,7,serious\\r\\nMale,22,5,4,7,5,3,lively\\r\\nMale,19,7,2,1,6,5,serious\\r\\nMale,20,6,1,3,7,5,serious\\r\\nMale,19,5,5,3,7,6,responsible\\r\\nFemale,19,4,1,6,6,4,responsible\\r\\nFemale,19,5,5,5,4,6,serious\\r\\nFemale,22,5,1,5,6,6,dependable\\r\\nFemale,19,6,6,7,6,5,dependable\\r\\nMale,24,5,1,2,5,4,serious\\r\\nMale,19,6,6,6,4,4,serious\\r\\nMale,19,6,7,7,4,4,dependable\\r\\nFemale,18,4,5,5,4,5,responsible\\r\\nFemale,22,3,4,3,1,5,responsible\\r\\nFemale,19,5,5,2,7,7,extraverted\\r\\nMale,18,7,2,5,5,5,serious\\r\\nFemale,19,6,5,5,4,7,serious\\r\\nFemale,22,5,3,6,6,5,serious\\r\\nMale,19,5,5,5,6,6,serious\\r\\nFemale,19,6,1,7,3,7,serious\\r\\nFemale,19,5,1,3,7,6,serious\\r\\nFemale,25,5,3,2,7,7,dependable\\r\\nFemale,19,6,4,3,5,4,extraverted\\r\\nMale,19,3,4,5,6,6,serious\\r\\nMale,18,6,3,6,7,5,serious\\r\\nMale,26,6,4,5,5,5,serious\\r\\nFemale,22,4,4,1,7,6,serious\\r\\nFemale,17,7,3,5,3,6,serious\\r\\nMale,20,6,1,6,4,4,lively\\r\\nFemale,23,5,7,6,5,6,extraverted\\r\\nFemale,19,5,6,5,4,4,extraverted\\r\\nMale,19,6,5,4,5,7,responsible\\r\\nMale,22,3,4,3,4,3,responsible\\r\\nFemale,21,5,7,2,6,5,extraverted\\r\\nMale,18,3,5,7,3,6,serious\\r\\nFemale,19,5,6,4,2,7,serious\\r\\nFemale,19,3,5,3,3,2,responsible\\r\\nFemale,20,5,6,5,6,1,extraverted\\r\\nFemale,19,5,4,3,5,5,serious\\r\\nMale,23,4,3,2,6,6,dependable\\r\\nFemale,20,3,4,7,6,6,serious\\r\\nFemale,17,2,6,6,2,5,responsible\\r\\nMale,18,4,4,4,4,4,lively\\r\\nFemale,21,6,6,5,6,5,extraverted\\r\\nMale,22,7,7,2,5,7,responsible\\r\\nFemale,19,4,7,7,3,5,extraverted\\r\\nFemale,25,3,3,5,4,5,serious\\r\\nFemale,26,1,5,5,5,5,serious\\r\\nMale,27,1,5,2,7,6,serious\\r\\nFemale,18,4,2,3,5,5,responsible\\r\\nFemale,17,5,5,3,1,5,responsible\\r\\nFemale,19,6,1,5,5,6,serious\\r\\nMale,19,6,3,3,6,5,serious\\r\\nFemale,23,7,2,4,6,4,lively\\r\\nFemale,22,7,3,4,4,5,serious\\r\\nMale,23,3,3,5,4,7,responsible\\r\\nMale,21,4,4,1,6,4,serious\\r\\nMale,17,7,1,4,5,4,lively\\r\\nMale,20,5,6,6,3,4,serious\\r\\nFemale,20,6,5,4,4,5,extraverted\\r\\nFemale,18,4,4,1,5,6,extraverted\\r\\nFemale,24,4,4,4,6,3,extraverted\\r\\nMale,19,7,3,3,5,6,serious\\r\\nMale,18,4,3,6,6,3,serious\\r\\nFemale,19,6,6,2,3,5,extraverted\\r\\nFemale,23,6,6,6,3,3,extraverted\\r\\nMale,21,5,5,2,7,5,serious\\r\\nFemale,21,6,4,6,6,5,serious\\r\\nMale,25,7,7,5,6,6,extraverted\\r\\nMale,18,3,6,7,4,3,lively\\r\\nMale,17,7,5,7,5,1,lively\\r\\nMale,20,3,4,6,6,5,serious\\r\\nFemale,18,5,5,5,7,4,extraverted\\r\\nMale,24,5,6,7,4,5,serious\\r\\nFemale,19,6,6,6,5,5,extraverted\\r\\nMale,18,3,5,4,4,2,responsible\\r\\nFemale,18,5,4,6,7,4,dependable\\r\\nMale,21,6,4,7,5,5,serious\\r\\nMale,18,4,6,3,6,5,serious\\r\\nMale,17,5,4,5,8,1,lively\\r\\nFemale,17,5,4,6,7,5,extraverted\\r\\nFemale,21,5,5,7,6,4,serious\\r\\nMale,20,7,5,5,4,5,serious\\r\\nMale,18,6,3,6,6,6,serious\\r\\nFemale,19,3,5,3,5,5,extraverted\\r\\nFemale,23,6,6,6,4,6,responsible\\r\\nMale,18,8,3,6,7,6,serious\\r\\nFemale,18,2,7,6,6,4,extraverted\\r\\nFemale,20,6,6,1,5,5,responsible\\r\\nMale,24,6,7,3,1,5,extraverted\\r\\nFemale,20,5,8,2,5,7,extraverted\\r\\nMale,18,7,7,8,4,2,lively\\r\\nMale,18,6,6,3,6,6,dependable\\r\\nMale,23,6,6,3,6,3,extraverted\\r\\nFemale,18,7,7,7,5,6,dependable\\r\\nMale,21,7,6,6,6,5,serious\\r\\nMale,21,6,7,7,4,5,dependable\\r\\nMale,22,4,6,3,5,4,lively\\r\\nMale,18,5,7,5,4,5,extraverted\\r\\nFemale,19,6,6,5,4,4,dependable\\r\\nMale,19,2,5,5,3,7,serious\\r\\nMale,23,5,4,6,4,5,serious\\r\\nMale,19,7,8,7,4,3,extraverted\\r\\nMale,19,1,6,7,8,7,serious\\r\\nFemale,20,3,7,3,2,5,extraverted\\r\\nFemale,18,5,6,7,5,4,responsible\\r\\nMale,21,6,7,7,6,5,serious\\r\\nFemale,20,2,6,5,5,3,extraverted\\r\\nMale,17,3,7,6,3,7,serious\\r\\nMale,22,3,7,6,6,7,serious\\r\\nFemale,19,6,6,3,5,7,serious\\r\\nFemale,17,6,7,4,4,5,extraverted\\r\\nMale,20,3,7,7,5,6,serious\\r\\nMale,22,4,4,5,2,3,serious\\r\\nFemale,19,6,8,1,3,6,extraverted\\r\\nMale,19,6,5,6,7,5,serious\\r\\nFemale,21,4,5,7,7,5,serious\\r\\nMale,18,7,5,7,5,5,serious\\r\\nMale,26,2,5,3,6,6,serious\\r\\nFemale,26,3,6,6,6,5,extraverted\\r\\nMale,24,5,4,5,7,8,serious\\r\\nFemale,18,2,6,6,7,6,extraverted\\r\\nFemale,20,5,6,2,2,3,extraverted\\r\\nMale,18,6,5,5,5,7,serious\\r\\nMale,19,1,5,4,7,6,serious\\r\\nFemale,22,3,3,2,6,4,responsible\\r\\nFemale,17,6,6,3,6,5,extraverted\\r\\nFemale,21,2,3,7,8,5,serious\\r\\nMale,20,4,7,3,5,4,responsible\\r\\nMale,19,7,3,4,7,5,serious\\r\\nMale,17,6,6,2,5,6,extraverted\\r\\nMale,20,6,4,8,5,5,serious\\r\\nFemale,18,1,4,2,5,5,lively\\r\\nFemale,22,5,3,4,5,2,responsible\\r\\nFemale,19,6,8,6,4,4,extraverted\\r\\nMale,18,5,1,6,6,3,lively\\r\\nMale,20,7,4,7,6,7,serious\\r\\nFemale,19,6,2,3,5,4,responsible\\r\\nFemale,5,5,5,5,5,5,responsible\\r\\nFemale,21,7,1,7,8,5,lively\\r\\nMale,22,6,2,2,4,4,dependable\\r\\nMale,19,4,4,5,4,5,serious\\r\\nMale,20,5,5,3,4,3,serious\\r\\nFemale,18,5,4,4,6,6,serious\\r\\nMale,19,4,3,1,7,5,serious\\r\\nFemale,22,7,4,4,3,6,responsible\\r\\nMale,18,6,6,3,2,6,serious\\r\\nFemale,18,5,8,5,5,4,extraverted\\r\\nMale,20,1,7,6,3,7,serious\\r\\nFemale,22,5,5,4,5,3,lively\\r\\nMale,17,3,2,7,4,6,serious\\r\\nFemale,18,6,6,8,2,1,responsible\\r\\nFemale,19,6,2,7,1,4,responsible\\r\\nFemale,21,5,6,3,5,4,serious\\r\\nMale,24,4,6,5,6,2,extraverted\\r\\nFemale,21,1,6,7,4,6,serious\\r\\nMale,20,4,6,6,3,6,serious\\r\\nMale,19,4,2,6,2,3,responsible\\r\\nMale,19,7,7,4,4,5,extraverted\\r\\nMale,17,6,5,5,5,5,responsible\\r\\nFemale,17,7,6,5,5,5,extraverted\\r\\nMale,22,7,5,7,2,3,lively\\r\\nFemale,17,6,7,7,4,5,responsible\\r\\nMale,18,6,6,7,6,5,serious\\r\\nFemale,19,6,5,5,6,4,extraverted\\r\\nFemale,23,6,5,7,4,3,extraverted\\r\\nMale,20,7,7,2,7,6,extraverted\\r\\nMale,21,5,8,5,6,6,extraverted\\r\\nFemale,20,5,6,4,6,7,extraverted\\r\\nFemale,20,5,5,4,4,5,lively\\r\\nMale,19,4,6,6,4,5,serious\\r\\nMale,25,5,8,4,6,6,extraverted\\r\\nFemale,25,7,4,3,8,5,extraverted\\r\\nMale,17,3,7,1,5,5,extraverted\\r\\nFemale,18,5,5,6,6,4,extraverted\\r\\nFemale,25,5,8,7,1,1,extraverted\\r\\nFemale,22,6,5,5,7,5,extraverted\\r\\nMale,17,6,3,7,1,8,serious\\r\\nMale,18,5,6,6,4,4,serious\\r\\nMale,23,4,4,5,6,4,serious\\r\\nMale,24,4,7,7,3,6,serious\\r\\nFemale,19,6,3,2,4,8,serious\\r\\nFemale,19,4,5,6,5,5,serious\\r\\nFemale,17,6,3,6,4,6,serious\\r\\nMale,20,1,2,5,8,4,serious\\r\\nMale,18,3,3,6,5,5,serious\\r\\nMale,22,4,4,7,5,6,serious\\r\\nFemale,19,6,5,6,4,3,extraverted\\r\\nMale,18,2,5,8,3,7,dependable\\r\\nMale,18,7,5,6,2,7,serious\\r\\nMale,23,6,7,5,4,3,extraverted\\r\\nFemale,18,5,7,3,5,6,extraverted\\r\\n'}"]},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["personality_train = pd.read_csv('train.csv')\n","personality_test = pd.read_csv('test.csv')\n"],"metadata":{"id":"voGrB_FkgoNC"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["personality_train"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":423},"id":"cXH_I-S2g2uJ","executionInfo":{"status":"ok","timestamp":1726119001039,"user_tz":-330,"elapsed":121,"user":{"displayName":"siddharth P santhosh","userId":"13793384757789431104"}},"outputId":"53028776-2468-4fb9-f75d-3068e63fc4d3"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     Gender  Age  openness  neuroticism  conscientiousness  agreeableness  \\\n","0      Male   17         7            4                  7              3   \n","1      Male   19         4            5                  4              6   \n","2    Female   18         7            6                  4              5   \n","3    Female   22         5            6                  7              4   \n","4    Female   19         7            4                  6              5   \n","..      ...  ...       ...          ...                ...            ...   \n","704  Female   20         4            5                  6              6   \n","705    Male   18         6            3                  1              5   \n","706    Male   22         5            2                  3              6   \n","707    Male   19         5            6                  5              7   \n","708  Female   18         5            5                  7              6   \n","\n","     extraversion Personality (Class label)  \n","0               2               extraverted  \n","1               6                   serious  \n","2               5                dependable  \n","3               3               extraverted  \n","4               4                    lively  \n","..            ...                       ...  \n","704             1               responsible  \n","705             5                dependable  \n","706             1                   serious  \n","707             5               extraverted  \n","708             5               extraverted  \n","\n","[709 rows x 8 columns]"],"text/html":["\n","  <div id=\"df-00d6c72d-ff89-4ae6-baa4-c33a73c053b1\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Gender</th>\n","      <th>Age</th>\n","      <th>openness</th>\n","      <th>neuroticism</th>\n","      <th>conscientiousness</th>\n","      <th>agreeableness</th>\n","      <th>extraversion</th>\n","      <th>Personality (Class label)</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Male</td>\n","      <td>17</td>\n","      <td>7</td>\n","      <td>4</td>\n","      <td>7</td>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>extraverted</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Male</td>\n","      <td>19</td>\n","      <td>4</td>\n","      <td>5</td>\n","      <td>4</td>\n","      <td>6</td>\n","      <td>6</td>\n","      <td>serious</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Female</td>\n","      <td>18</td>\n","      <td>7</td>\n","      <td>6</td>\n","      <td>4</td>\n","      <td>5</td>\n","      <td>5</td>\n","      <td>dependable</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Female</td>\n","      <td>22</td>\n","      <td>5</td>\n","      <td>6</td>\n","      <td>7</td>\n","      <td>4</td>\n","      <td>3</td>\n","      <td>extraverted</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Female</td>\n","      <td>19</td>\n","      <td>7</td>\n","      <td>4</td>\n","      <td>6</td>\n","      <td>5</td>\n","      <td>4</td>\n","      <td>lively</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>704</th>\n","      <td>Female</td>\n","      <td>20</td>\n","      <td>4</td>\n","      <td>5</td>\n","      <td>6</td>\n","      <td>6</td>\n","      <td>1</td>\n","      <td>responsible</td>\n","    </tr>\n","    <tr>\n","      <th>705</th>\n","      <td>Male</td>\n","      <td>18</td>\n","      <td>6</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>5</td>\n","      <td>5</td>\n","      <td>dependable</td>\n","    </tr>\n","    <tr>\n","      <th>706</th>\n","      <td>Male</td>\n","      <td>22</td>\n","      <td>5</td>\n","      <td>2</td>\n","      <td>3</td>\n","      <td>6</td>\n","      <td>1</td>\n","      <td>serious</td>\n","    </tr>\n","    <tr>\n","      <th>707</th>\n","      <td>Male</td>\n","      <td>19</td>\n","      <td>5</td>\n","      <td>6</td>\n","      <td>5</td>\n","      <td>7</td>\n","      <td>5</td>\n","      <td>extraverted</td>\n","    </tr>\n","    <tr>\n","      <th>708</th>\n","      <td>Female</td>\n","      <td>18</td>\n","      <td>5</td>\n","      <td>5</td>\n","      <td>7</td>\n","      <td>6</td>\n","      <td>5</td>\n","      <td>extraverted</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>709 rows × 8 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-00d6c72d-ff89-4ae6-baa4-c33a73c053b1')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-00d6c72d-ff89-4ae6-baa4-c33a73c053b1 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-00d6c72d-ff89-4ae6-baa4-c33a73c053b1');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-9d45e5dd-4772-405a-9efe-8d5b66ad9962\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9d45e5dd-4772-405a-9efe-8d5b66ad9962')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-9d45e5dd-4772-405a-9efe-8d5b66ad9962 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_915db714-7fd3-499e-b7d5-48f0de171956\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('personality_train')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_915db714-7fd3-499e-b7d5-48f0de171956 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('personality_train');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"personality_train","summary":"{\n  \"name\": \"personality_train\",\n  \"rows\": 709,\n  \"fields\": [\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Male\",\n          \"Female\",\n          \"5\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 5,\n        \"max\": 28,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          24,\n          25,\n          17\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"openness\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 8,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          4,\n          2,\n          7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"neuroticism\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 8,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          5,\n          1,\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"conscientiousness\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 8,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          4,\n          3,\n          7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"agreeableness\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 8,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          6,\n          1,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"extraversion\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 7,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          2,\n          6,\n          7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Personality (Class label)\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"serious\",\n          \"responsible\",\n          \"dependable\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["personality_train.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"VcnNVLOsg7tA","executionInfo":{"status":"ok","timestamp":1726119001039,"user_tz":-330,"elapsed":118,"user":{"displayName":"siddharth P santhosh","userId":"13793384757789431104"}},"outputId":"3cc17c42-b7f1-4faf-b934-52d5d0582308"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Gender  Age  openness  neuroticism  conscientiousness  agreeableness  \\\n","0    Male   17         7            4                  7              3   \n","1    Male   19         4            5                  4              6   \n","2  Female   18         7            6                  4              5   \n","3  Female   22         5            6                  7              4   \n","4  Female   19         7            4                  6              5   \n","\n","   extraversion Personality (Class label)  \n","0             2               extraverted  \n","1             6                   serious  \n","2             5                dependable  \n","3             3               extraverted  \n","4             4                    lively  "],"text/html":["\n","  <div id=\"df-078ef09a-e9f4-4760-90b8-cf6e6d43c456\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Gender</th>\n","      <th>Age</th>\n","      <th>openness</th>\n","      <th>neuroticism</th>\n","      <th>conscientiousness</th>\n","      <th>agreeableness</th>\n","      <th>extraversion</th>\n","      <th>Personality (Class label)</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Male</td>\n","      <td>17</td>\n","      <td>7</td>\n","      <td>4</td>\n","      <td>7</td>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>extraverted</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Male</td>\n","      <td>19</td>\n","      <td>4</td>\n","      <td>5</td>\n","      <td>4</td>\n","      <td>6</td>\n","      <td>6</td>\n","      <td>serious</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Female</td>\n","      <td>18</td>\n","      <td>7</td>\n","      <td>6</td>\n","      <td>4</td>\n","      <td>5</td>\n","      <td>5</td>\n","      <td>dependable</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Female</td>\n","      <td>22</td>\n","      <td>5</td>\n","      <td>6</td>\n","      <td>7</td>\n","      <td>4</td>\n","      <td>3</td>\n","      <td>extraverted</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Female</td>\n","      <td>19</td>\n","      <td>7</td>\n","      <td>4</td>\n","      <td>6</td>\n","      <td>5</td>\n","      <td>4</td>\n","      <td>lively</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-078ef09a-e9f4-4760-90b8-cf6e6d43c456')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-078ef09a-e9f4-4760-90b8-cf6e6d43c456 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-078ef09a-e9f4-4760-90b8-cf6e6d43c456');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-5aaddf9e-6420-470d-9dfd-f9526c0f64cc\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5aaddf9e-6420-470d-9dfd-f9526c0f64cc')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-5aaddf9e-6420-470d-9dfd-f9526c0f64cc button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"personality_train","summary":"{\n  \"name\": \"personality_train\",\n  \"rows\": 709,\n  \"fields\": [\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Male\",\n          \"Female\",\n          \"5\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 5,\n        \"max\": 28,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          24,\n          25,\n          17\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"openness\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 8,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          4,\n          2,\n          7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"neuroticism\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 8,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          5,\n          1,\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"conscientiousness\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 8,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          4,\n          3,\n          7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"agreeableness\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 8,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          6,\n          1,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"extraversion\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 7,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          2,\n          6,\n          7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Personality (Class label)\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"serious\",\n          \"responsible\",\n          \"dependable\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["personality_train.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OCmXViLug_JA","executionInfo":{"status":"ok","timestamp":1726119001040,"user_tz":-330,"elapsed":117,"user":{"displayName":"siddharth P santhosh","userId":"13793384757789431104"}},"outputId":"1ca46b20-e458-44ec-a6d2-e3c2176dbed5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 709 entries, 0 to 708\n","Data columns (total 8 columns):\n"," #   Column                     Non-Null Count  Dtype \n","---  ------                     --------------  ----- \n"," 0   Gender                     709 non-null    object\n"," 1   Age                        709 non-null    int64 \n"," 2   openness                   709 non-null    int64 \n"," 3   neuroticism                709 non-null    int64 \n"," 4   conscientiousness          709 non-null    int64 \n"," 5   agreeableness              709 non-null    int64 \n"," 6   extraversion               709 non-null    int64 \n"," 7   Personality (Class label)  709 non-null    object\n","dtypes: int64(6), object(2)\n","memory usage: 44.4+ KB\n"]}]},{"cell_type":"code","source":["personality_train['Personality (Class label)'].value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":272},"id":"uUReDyRDkIWq","executionInfo":{"status":"ok","timestamp":1726119001040,"user_tz":-330,"elapsed":108,"user":{"displayName":"siddharth P santhosh","userId":"13793384757789431104"}},"outputId":"74bf3622-bc8d-46a7-ee21-fcc85607d9f5"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Personality (Class label)\n","serious        161\n","extraverted    150\n","dependable     138\n","lively         134\n","responsible    126\n","Name: count, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>Personality (Class label)</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>serious</th>\n","      <td>161</td>\n","    </tr>\n","    <tr>\n","      <th>extraverted</th>\n","      <td>150</td>\n","    </tr>\n","    <tr>\n","      <th>dependable</th>\n","      <td>138</td>\n","    </tr>\n","    <tr>\n","      <th>lively</th>\n","      <td>134</td>\n","    </tr>\n","    <tr>\n","      <th>responsible</th>\n","      <td>126</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":10}]},{"cell_type":"code","source":["personality_train['Gender'].unique()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8BQwqhM_qXHH","executionInfo":{"status":"ok","timestamp":1726119001040,"user_tz":-330,"elapsed":97,"user":{"displayName":"siddharth P santhosh","userId":"13793384757789431104"}},"outputId":"dedd85d3-5cb3-4118-be3f-419b41b61fe5"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array(['Male', 'Female', '5'], dtype=object)"]},"metadata":{},"execution_count":11}]},{"cell_type":"code","source":["personality_train.describe()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"4C5Xdd8vhDtR","executionInfo":{"status":"ok","timestamp":1726119001040,"user_tz":-330,"elapsed":93,"user":{"displayName":"siddharth P santhosh","userId":"13793384757789431104"}},"outputId":"21d8e676-46e3-4f14-fe16-e4c4eed70450"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["              Age    openness  neuroticism  conscientiousness  agreeableness  \\\n","count  709.000000  709.000000   709.000000         709.000000     709.000000   \n","mean    19.685472    5.019746     4.647391           4.643159       4.827927   \n","std      2.510672    1.519052     1.658673           1.703569       1.632564   \n","min      5.000000    1.000000     1.000000           1.000000       1.000000   \n","25%     18.000000    4.000000     4.000000           3.000000       4.000000   \n","50%     19.000000    5.000000     5.000000           5.000000       5.000000   \n","75%     21.000000    6.000000     6.000000           6.000000       6.000000   \n","max     28.000000    8.000000     8.000000           8.000000       8.000000   \n","\n","       extraversion  \n","count    709.000000  \n","mean       4.409027  \n","std        1.567404  \n","min        1.000000  \n","25%        3.000000  \n","50%        5.000000  \n","75%        6.000000  \n","max        7.000000  "],"text/html":["\n","  <div id=\"df-f0cf5f23-af70-4203-963d-7dc194322556\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Age</th>\n","      <th>openness</th>\n","      <th>neuroticism</th>\n","      <th>conscientiousness</th>\n","      <th>agreeableness</th>\n","      <th>extraversion</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>709.000000</td>\n","      <td>709.000000</td>\n","      <td>709.000000</td>\n","      <td>709.000000</td>\n","      <td>709.000000</td>\n","      <td>709.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>19.685472</td>\n","      <td>5.019746</td>\n","      <td>4.647391</td>\n","      <td>4.643159</td>\n","      <td>4.827927</td>\n","      <td>4.409027</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>2.510672</td>\n","      <td>1.519052</td>\n","      <td>1.658673</td>\n","      <td>1.703569</td>\n","      <td>1.632564</td>\n","      <td>1.567404</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>5.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>18.000000</td>\n","      <td>4.000000</td>\n","      <td>4.000000</td>\n","      <td>3.000000</td>\n","      <td>4.000000</td>\n","      <td>3.000000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>19.000000</td>\n","      <td>5.000000</td>\n","      <td>5.000000</td>\n","      <td>5.000000</td>\n","      <td>5.000000</td>\n","      <td>5.000000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>21.000000</td>\n","      <td>6.000000</td>\n","      <td>6.000000</td>\n","      <td>6.000000</td>\n","      <td>6.000000</td>\n","      <td>6.000000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>28.000000</td>\n","      <td>8.000000</td>\n","      <td>8.000000</td>\n","      <td>8.000000</td>\n","      <td>8.000000</td>\n","      <td>7.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f0cf5f23-af70-4203-963d-7dc194322556')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-f0cf5f23-af70-4203-963d-7dc194322556 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-f0cf5f23-af70-4203-963d-7dc194322556');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-8affd8d7-abec-4b49-ba9a-68a1057283d8\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8affd8d7-abec-4b49-ba9a-68a1057283d8')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-8affd8d7-abec-4b49-ba9a-68a1057283d8 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"personality_train\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 245.0973592998053,\n        \"min\": 2.510672239506456,\n        \"max\": 709.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          19.685472496473906,\n          19.0,\n          709.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"openness\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 249.13731185815152,\n        \"min\": 1.0,\n        \"max\": 709.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          5.019746121297603,\n          5.0,\n          709.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"neuroticism\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 249.14874140238416,\n        \"min\": 1.0,\n        \"max\": 709.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          4.6473906911142455,\n          5.0,\n          709.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"conscientiousness\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 249.19756211181593,\n        \"min\": 1.0,\n        \"max\": 709.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          4.643159379407616,\n          5.0,\n          709.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"agreeableness\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 249.141023473554,\n        \"min\": 1.0,\n        \"max\": 709.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          4.827926657263752,\n          5.0,\n          709.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"extraversion\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 249.26495194336235,\n        \"min\": 1.0,\n        \"max\": 709.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          4.409026798307475,\n          5.0,\n          709.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":12}]},{"cell_type":"code","source":["personality_train.isnull().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":335},"id":"eKB_8tgthKLk","executionInfo":{"status":"ok","timestamp":1726119001041,"user_tz":-330,"elapsed":91,"user":{"displayName":"siddharth P santhosh","userId":"13793384757789431104"}},"outputId":"24431780-f438-481b-9bd2-a93b2fbe1418"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Gender                       0\n","Age                          0\n","openness                     0\n","neuroticism                  0\n","conscientiousness            0\n","agreeableness                0\n","extraversion                 0\n","Personality (Class label)    0\n","dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>Gender</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Age</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>openness</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>neuroticism</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>conscientiousness</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>agreeableness</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>extraversion</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Personality (Class label)</th>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":13}]},{"cell_type":"code","source":["plt.figure(figsize = (6,6))\n","sns.barplot(x = 'Gender', y = 'Age',data = personality_train, color = random.choice(colors))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":560},"id":"islz_OARhN8r","executionInfo":{"status":"ok","timestamp":1726119001476,"user_tz":-330,"elapsed":517,"user":{"displayName":"siddharth P santhosh","userId":"13793384757789431104"}},"outputId":"3050f8af-0192-4b36-d2a7-0694869c0a71"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: xlabel='Gender', ylabel='Age'>"]},"metadata":{},"execution_count":14},{"output_type":"display_data","data":{"text/plain":["<Figure size 600x600 with 1 Axes>"],"image/png":"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PPOMNWrUKJdjDh8+bEmycnNz3XlZMGDSpEmWp6en5ePj41zuv/9+a+TIkdZzzz3nMvbPf/6zFRwc7FyXZM2ePdu5npmZaUmyli9f7tz2zjvvWN7e3rXOoXfv3tYf/vAH53qnTp2sBQsWWJZlWZ988onl6+trnTlzxuWYrl27WsuWLavz9aL52Lhxo7VmzRprz549VlpamhUREWF17NjRKikpMT21ZqfR/9h2mBEQEKC77rpLycnJsixLd911V5Xbkfv379ecOXO0c+dOnTx50nkHpKCgoNofk79nzx59/PHHatOmTZV9eXl56t69u3suBsaMGDFCS5Ysca77+PioX79++vTTT13ufFRUVOjMmTP6/vvv1bp1a0lSv379nPsv/JqGvn37umw7c+aMSkpK5Ovrq9LSUs2bN08bNmzQsWPHdP78ef3www81/h/snj17VFpaqnbt2rls/+GHHy76sSKat+joaOef+/Xrp/DwcHXq1Elr1qzR1KlTDc6s+SFCUKMHH3zQebt78eLFVfbHxMSoU6dOeuONNxQSEqLKykr16dNHZ8+erfZ8paWliomJ0QsvvFBlX3BwcP1OHo2Cj4+PunXr5rKttLRUTz/9tO69994q4729vZ1/btGihfPPNputxm0X4nfmzJnavHmzXn75ZXXr1k2tWrXS/fffX+v7MTg4WFu2bKmyz9/f/9IuEFcFf39/de/enW92uQERghqNHj1aZ8+elc1mU1RUlMu+U6dOKTc3V2+88YZuu+02Sbro0+ODBg3SX//6V4WFhcnLi7fe1WrQoEHKzc2tEidX6tNPP9XkyZM1duxYSf+KjPz8/Frn4XA45OXlpbCwsHqdC5qX0tJS5eXl6ec//7npqTQ7PJiKGnl6eurrr7/WV199JU9PT5d911xzjdq1a6fXX39dBw4c0EcffaSEhIRazzdt2jR9++23iouL02effaa8vDz97W9/05QpU1RRUeHOS0EjMmfOHL311lt6+umn9eWXX+rrr79WSkqKZs+efUXnveGGG7R27Vrl5ORoz549+tnPflbjQ9KSFBkZqYiICMXGxmrTpk3Kz89XRkaGnnrqKWVlZV3RXNC0zZw5U1u3bnW+J8aOHStPT0/FxcWZnlqzQ4SgVr6+vvL19a2y3cPDQykpKcrOzlafPn3061//Wi+99FKt5woJCdGnn36qiooKjRo1Sn379tWMGTPk7+8vDw/eileLqKgorV+/Xps2bdLNN9+sIUOGaMGCBerUqdMVnffVV1/VNddco6FDhyomJkZRUVEaNGhQjeNtNps2btyo22+/XVOmTFH37t31wAMP6NChQ85nUHB1OnLkiOLi4tSjRw+NHz9e7dq1044dOxQQEGB6as2OzbIsy/QkAADA1Yf//QQAAEYQIQAAwAgiBAAAGEGEAAAAI4gQAABgBBECAACMIEIAAIARRAiAZmn48OGaMWOG6WkAqAURAsBtHA6HHnvsMXXr1k3e3t4KDAzUrbfeqiVLluj77783PT0AhvFbxAC4xT/+8Q/deuut8vf313PPPae+ffvKbrdr7969ev3113XdddfpnnvuMT3NGlVUVMhms/ErBQA34r8uAG7xy1/+Ul5eXsrKytL48eN14403qkuXLhozZow2bNigmJgYSVJRUZEeeughBQQEyNfXV3feeaf27NnjPM+8efM0YMAA/fnPf1ZYWJj8/Pz0wAMP6PTp084xZWVlio+PV5s2bRQcHKxXXnmlynzKy8s1c+ZMXXfddfLx8VF4eLi2bNni3J+cnCx/f3+9//776tWrl+x2uwoKCtz3FwSACAFQ/06dOqVNmzZp2rRp8vHxqXaMzWaTJI0bN07Hjx/XBx98oOzsbA0aNEgjR47Ut99+6xybl5en1NRUrV+/XuvXr9fWrVv1/PPPO/fPmjVLW7du1bp167Rp0yZt2bJFu3fvdnm96dOnKzMzUykpKfriiy80btw4jR49Wvv373eO+f777/XCCy/oT3/6k7788kt16NChPv9aAPyYBQD1bMeOHZYka+3atS7b27VrZ/n4+Fg+Pj7WE088YX3yySeWr6+vdebMGZdxXbt2tZYtW2ZZlmXNnTvXat26tVVSUuLcP2vWLCs8PNyyLMs6ffq01bJlS2vNmjXO/adOnbJatWplPfbYY5ZlWdahQ4csT09P65///KfL64wcOdJKTEy0LMuyVq5caUmycnJy6ucvAcBF8UwIgAaza9cuVVZWauLEiSovL9eePXtUWlqqdu3auYz74YcflJeX51wPCwtT27ZtnevBwcE6fvy4pH/dJTl79qzCw8Od+6+99lr16NHDub53715VVFSoe/fuLq9TXl7u8totW7ZUv3796udiAVwUEQKg3nXr1k02m025ubku27t06SJJatWqlSSptLRUwcHBLs9mXODv7+/8c4sWLVz22Ww2VVZWXvJ8SktL5enpqezsbHl6errsa9OmjfPPrVq1cn5MBMD9iBAA9a5du3b6yU9+okWLFulXv/pVjc+FDBo0SA6HQ15eXgoLC7us1+ratatatGihnTt3qmPHjpKk7777Tn//+991xx13SJIGDhyoiooKHT9+XLfddttlvQ6A+seDqQDc4o9//KPOnz+vm266SatXr9bXX3+t3Nxcvf322/rmm2/k6empyMhIRUREKDY2Vps2bVJ+fr4yMjL01FNPKSsr65Jep02bNpo6dapmzZqljz76SPv27dPkyZNdvlrbvXt3TZw4UfHx8Vq7dq0OHjyoXbt2KSkpSRs2bHDXXwGAi+BOCAC36Nq1qz7//HM999xzSkxM1JEjR2S329WrVy/NnDlTv/zlL2Wz2bRx40Y99dRTmjJlik6cOKGgoCDdfvvtCgwMvOTXeumll1RaWqqYmBi1bdtWjz/+uIqLi13GrFy5Us8++6wef/xx/fOf/1T79u01ZMgQ3X333fV96QAukc2yLMv0JAAAwNWHj2MAAIARRAgAADCCCAEAAEYQIQAAwAgiBAAAGEGEAAAAI4gQAABgBBECAACMIEIAAIARRAgAADCCCAEAAEYQIQAAwIj/B2NJuMK0Fs+qAAAAAElFTkSuQmCC\n"},"metadata":{}}]},{"cell_type":"code","source":["plt.figure(figsize = (6,6))\n","sns.barplot(x = 'Gender', y = 'Personality (Class label)',data = personality_train, color = random.choice(colors))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":565},"id":"SehWIwjIiZRm","executionInfo":{"status":"ok","timestamp":1726119019988,"user_tz":-330,"elapsed":578,"user":{"displayName":"siddharth P santhosh","userId":"13793384757789431104"}},"outputId":"3ce7aa2a-9dcf-49b8-d186-1ffa41dc9da4"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: xlabel='Gender', ylabel='Personality (Class label)'>"]},"metadata":{},"execution_count":16},{"output_type":"display_data","data":{"text/plain":["<Figure size 600x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["plt.figure(figsize = (6,6))\n","sns.barplot(y = 'Age', x = 'Personality (Class label)',data = personality_train, color = random.choice(colors))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":560},"id":"CEKLrwpDjFqn","executionInfo":{"status":"ok","timestamp":1726119057609,"user_tz":-330,"elapsed":1515,"user":{"displayName":"siddharth P santhosh","userId":"13793384757789431104"}},"outputId":"57abcab5-e188-4070-94a7-ef60955c7002"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: xlabel='Personality (Class label)', ylabel='Age'>"]},"metadata":{},"execution_count":23},{"output_type":"display_data","data":{"text/plain":["<Figure size 600x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["plt.figure(figsize = (6,6))\n","sns.barplot(x = 'agreeableness', y = 'Personality (Class label)',data = personality_train, color = random.choice(colors))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":560},"id":"O4Tu_-b9jX66","executionInfo":{"status":"ok","timestamp":1726119095504,"user_tz":-330,"elapsed":942,"user":{"displayName":"siddharth P santhosh","userId":"13793384757789431104"}},"outputId":"2da85779-c955-4b18-a5e4-5cc56fa6424f"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: xlabel='agreeableness', ylabel='Personality (Class label)'>"]},"metadata":{},"execution_count":25},{"output_type":"display_data","data":{"text/plain":["<Figure size 600x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["\n","x = personality_train['Personality (Class label)'].unique()\n","\n","\n","sizes = personality_train['Personality (Class label)'].value_counts()\n","colors = ['teal', 'brown', 'grey', 'purple', 'violet']\n","plt.pie(x=sizes, labels=x, colors=colors)\n","plt.axis('equal')\n","plt.title('Personality')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":434},"id":"s8Ndz8_TmFgE","executionInfo":{"status":"ok","timestamp":1726119103316,"user_tz":-330,"elapsed":712,"user":{"displayName":"siddharth P santhosh","userId":"13793384757789431104"}},"outputId":"f7ca6a27-1526-446d-80b5-489a6cb4b3c6"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["personality_train.replace({'Gender':{'Male':0,'Female':1}}, inplace = True)\n","personality_train.replace({'Personality (Class label)':{'dependable':0, 'serious':1, 'responsible':2, 'extraverted':3, 'lively':4}}, inplace = True)\n","personality_test.replace({'Gender':{'Male':0,'Female':1}}, inplace = True)\n","personality_test.replace({'Personality (class label)':{'dependable':0, 'serious':1, 'responsible':2, 'extraverted':3, 'lively':4}}, inplace = True)"],"metadata":{"id":"rNoNZbUgnBn0"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["personality_train.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EFqYJGb4n5_3","executionInfo":{"status":"ok","timestamp":1726119110867,"user_tz":-330,"elapsed":1551,"user":{"displayName":"siddharth P santhosh","userId":"13793384757789431104"}},"outputId":"7c95a35b-3def-4989-b13b-fa0222cf37a4"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 709 entries, 0 to 708\n","Data columns (total 8 columns):\n"," #   Column                     Non-Null Count  Dtype \n","---  ------                     --------------  ----- \n"," 0   Gender                     709 non-null    object\n"," 1   Age                        709 non-null    int64 \n"," 2   openness                   709 non-null    int64 \n"," 3   neuroticism                709 non-null    int64 \n"," 4   conscientiousness          709 non-null    int64 \n"," 5   agreeableness              709 non-null    int64 \n"," 6   extraversion               709 non-null    int64 \n"," 7   Personality (Class label)  709 non-null    int64 \n","dtypes: int64(7), object(1)\n","memory usage: 44.4+ KB\n"]}]},{"cell_type":"code","source":["correlation = personality_train.corr()"],"metadata":{"id":"Y5KZU7sQoC3s"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["personality_test.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0dft8DH8pdwa","executionInfo":{"status":"ok","timestamp":1726119115378,"user_tz":-330,"elapsed":4,"user":{"displayName":"siddharth P santhosh","userId":"13793384757789431104"}},"outputId":"e3ba8a65-9a43-4e41-e312-ece14747fdfa"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 315 entries, 0 to 314\n","Data columns (total 8 columns):\n"," #   Column                     Non-Null Count  Dtype\n","---  ------                     --------------  -----\n"," 0   Gender                     315 non-null    int64\n"," 1   Age                        315 non-null    int64\n"," 2   openness                   315 non-null    int64\n"," 3   neuroticism                315 non-null    int64\n"," 4   conscientiousness          315 non-null    int64\n"," 5   agreeableness              315 non-null    int64\n"," 6   extraversion               315 non-null    int64\n"," 7   Personality (class label)  315 non-null    int64\n","dtypes: int64(8)\n","memory usage: 19.8 KB\n"]}]},{"cell_type":"code","source":["plt.figure(figsize=(6,6))\n","sns.heatmap(correlation)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":698},"id":"odDWd8jJoGel","executionInfo":{"status":"ok","timestamp":1726119119557,"user_tz":-330,"elapsed":718,"user":{"displayName":"siddharth P santhosh","userId":"13793384757789431104"}},"outputId":"c5c94dbf-5764-47c6-d52d-e8810dd3b297"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: >"]},"metadata":{},"execution_count":31},{"output_type":"display_data","data":{"text/plain":["<Figure size 600x600 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["X_train = personality_train.drop('Personality (Class label)', axis = 1)\n","X_test = personality_test.drop('Personality (class label)', axis = 1)\n","Y_train = personality_train['Personality (Class label)']\n","Y_test = personality_test['Personality (class label)']\n","\n"],"metadata":{"id":"aVJtMmANoQ3v"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn.preprocessing import StandardScaler\n","scaler = StandardScaler()\n","scaler.fit(X_train)\n","S_X_train = scaler.transform(X_train)\n","scaler.fit(X_test)\n","S_X_test = scaler.transform(X_test)"],"metadata":{"id":"rHsJHEiCziUu"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# ***Logisticregression***\n"],"metadata":{"id":"-TlVZed0uPPQ"}},{"cell_type":"code","source":["logreg = LogisticRegression()\n","logreg\n","\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":74},"id":"foegQlfEr-Cm","executionInfo":{"status":"ok","timestamp":1726120814278,"user_tz":-330,"elapsed":17,"user":{"displayName":"siddharth P santhosh","userId":"13793384757789431104"}},"outputId":"4be57761-8595-4878-e43c-3f60bf896731"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["LogisticRegression()"],"text/html":["<style>#sk-container-id-7 {color: black;}#sk-container-id-7 pre{padding: 0;}#sk-container-id-7 div.sk-toggleable {background-color: white;}#sk-container-id-7 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-7 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-7 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-7 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-7 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-7 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-7 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-7 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-7 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-7 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-7 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-7 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-7 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-7 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-7 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-7 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-7 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-7 div.sk-item {position: relative;z-index: 1;}#sk-container-id-7 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-7 div.sk-item::before, #sk-container-id-7 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-7 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-7 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-7 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-7 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-7 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-7 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-7 div.sk-label-container {text-align: center;}#sk-container-id-7 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-7 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-7\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-7\" type=\"checkbox\" checked><label for=\"sk-estimator-id-7\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression()</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":71}]},{"cell_type":"code","source":["logreg.fit(S_X_train,Y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":74},"id":"jbtG_S6-uAou","executionInfo":{"status":"ok","timestamp":1726120816861,"user_tz":-330,"elapsed":438,"user":{"displayName":"siddharth P santhosh","userId":"13793384757789431104"}},"outputId":"0973d313-9864-4f4b-a5fd-9121931661bc"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["LogisticRegression()"],"text/html":["<style>#sk-container-id-8 {color: black;}#sk-container-id-8 pre{padding: 0;}#sk-container-id-8 div.sk-toggleable {background-color: white;}#sk-container-id-8 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-8 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-8 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-8 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-8 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-8 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-8 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-8 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-8 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-8 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-8 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-8 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-8 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-8 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-8 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-8 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-8 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-8 div.sk-item {position: relative;z-index: 1;}#sk-container-id-8 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-8 div.sk-item::before, #sk-container-id-8 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-8 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-8 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-8 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-8 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-8 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-8 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-8 div.sk-label-container {text-align: center;}#sk-container-id-8 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-8 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-8\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-8\" type=\"checkbox\" checked><label for=\"sk-estimator-id-8\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression()</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":72}]},{"cell_type":"code","source":["train_data_prediction = logreg.predict(S_X_train)\n","train_data_accuracy = metrics.accuracy_score(Y_train,train_data_prediction)\n","print(train_data_accuracy)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vwyYhptzt90e","executionInfo":{"status":"ok","timestamp":1726120840256,"user_tz":-330,"elapsed":421,"user":{"displayName":"siddharth P santhosh","userId":"13793384757789431104"}},"outputId":"7d7b8da7-f1ad-48ff-9b9c-593979176af7"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0.2468265162200282\n"]}]},{"cell_type":"code","source":["test_data_prediction = logreg.predict(S_X_test)\n","test_data_accuracy = metrics.accuracy_score(Y_test,test_data_prediction)\n","print(train_data_accuracy)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gPLMHM1euNJk","executionInfo":{"status":"ok","timestamp":1726120859660,"user_tz":-330,"elapsed":399,"user":{"displayName":"siddharth P santhosh","userId":"13793384757789431104"}},"outputId":"63281c84-21bf-40c5-f692-b4a08d279fe3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0.2468265162200282\n"]}]},{"cell_type":"code","source":["input_data=(1,19,2,4,7,1,3)\n","input_data_as_numpy_array = np.asarray(input_data)\n","input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)\n","prediction = logreg.predict(input_data_reshaped)\n","print(prediction)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QmHHrPyXwfT2","executionInfo":{"status":"ok","timestamp":1726120439782,"user_tz":-330,"elapsed":416,"user":{"displayName":"siddharth P santhosh","userId":"13793384757789431104"}},"outputId":"053b5806-2d01-4c6d-f179-aa82a844711c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[2]\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:465: UserWarning: X does not have valid feature names, but LogisticRegression was fitted with feature names\n","  warnings.warn(\n"]}]},{"cell_type":"code","source":["X_test"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":423},"id":"hUC-kbzUxKIg","executionInfo":{"status":"ok","timestamp":1726120334710,"user_tz":-330,"elapsed":473,"user":{"displayName":"siddharth P santhosh","userId":"13793384757789431104"}},"outputId":"a5a413c9-85ef-4099-9659-8ebde5cad310"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     Gender  Age  openness  neuroticism  conscientiousness  agreeableness  \\\n","0         1   20         7            9                  9              5   \n","1         0   17         5            4                  5              2   \n","2         1   25         5            5                  7              2   \n","3         1   18         6            2                  7              4   \n","4         1   19         2            4                  7              1   \n","..      ...  ...       ...          ...                ...            ...   \n","310       1   19         6            5                  6              4   \n","311       0   18         2            5                  8              3   \n","312       0   18         7            5                  6              2   \n","313       0   23         6            7                  5              4   \n","314       1   18         5            7                  3              5   \n","\n","     extraversion  \n","0               5  \n","1               4  \n","2               4  \n","3               7  \n","4               3  \n","..            ...  \n","310             3  \n","311             7  \n","312             7  \n","313             3  \n","314             6  \n","\n","[315 rows x 7 columns]"],"text/html":["\n","  <div id=\"df-14a1a55f-ec59-4b26-ac50-5e5a7f2f836b\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Gender</th>\n","      <th>Age</th>\n","      <th>openness</th>\n","      <th>neuroticism</th>\n","      <th>conscientiousness</th>\n","      <th>agreeableness</th>\n","      <th>extraversion</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>20</td>\n","      <td>7</td>\n","      <td>9</td>\n","      <td>9</td>\n","      <td>5</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>17</td>\n","      <td>5</td>\n","      <td>4</td>\n","      <td>5</td>\n","      <td>2</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>25</td>\n","      <td>5</td>\n","      <td>5</td>\n","      <td>7</td>\n","      <td>2</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>18</td>\n","      <td>6</td>\n","      <td>2</td>\n","      <td>7</td>\n","      <td>4</td>\n","      <td>7</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1</td>\n","      <td>19</td>\n","      <td>2</td>\n","      <td>4</td>\n","      <td>7</td>\n","      <td>1</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>310</th>\n","      <td>1</td>\n","      <td>19</td>\n","      <td>6</td>\n","      <td>5</td>\n","      <td>6</td>\n","      <td>4</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>311</th>\n","      <td>0</td>\n","      <td>18</td>\n","      <td>2</td>\n","      <td>5</td>\n","      <td>8</td>\n","      <td>3</td>\n","      <td>7</td>\n","    </tr>\n","    <tr>\n","      <th>312</th>\n","      <td>0</td>\n","      <td>18</td>\n","      <td>7</td>\n","      <td>5</td>\n","      <td>6</td>\n","      <td>2</td>\n","      <td>7</td>\n","    </tr>\n","    <tr>\n","      <th>313</th>\n","      <td>0</td>\n","      <td>23</td>\n","      <td>6</td>\n","      <td>7</td>\n","      <td>5</td>\n","      <td>4</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>314</th>\n","      <td>1</td>\n","      <td>18</td>\n","      <td>5</td>\n","      <td>7</td>\n","      <td>3</td>\n","      <td>5</td>\n","      <td>6</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>315 rows × 7 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-14a1a55f-ec59-4b26-ac50-5e5a7f2f836b')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-14a1a55f-ec59-4b26-ac50-5e5a7f2f836b button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-14a1a55f-ec59-4b26-ac50-5e5a7f2f836b');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-d1da0a33-5460-40d2-9a52-747e048c038a\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d1da0a33-5460-40d2-9a52-747e048c038a')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-d1da0a33-5460-40d2-9a52-747e048c038a button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_3c869a27-f4a6-4648-92e9-d315984f1e42\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('X_test')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_3c869a27-f4a6-4648-92e9-d315984f1e42 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('X_test');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"X_test","summary":"{\n  \"name\": \"X_test\",\n  \"rows\": 315,\n  \"fields\": [\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 5,\n        \"max\": 28,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          28,\n          22\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"openness\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 8,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          5,\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"neuroticism\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 9,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          7,\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"conscientiousness\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 9,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          2,\n          5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"agreeableness\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 8,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          2,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"extraversion\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 8,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          4,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":52}]},{"cell_type":"code","source":["Y_test"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":458},"id":"zMlHpjrgyyti","executionInfo":{"status":"ok","timestamp":1726120410024,"user_tz":-330,"elapsed":417,"user":{"displayName":"siddharth P santhosh","userId":"13793384757789431104"}},"outputId":"4220e0e8-7bf6-4e42-d378-375fcb1e50e6"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0      0\n","1      1\n","2      1\n","3      1\n","4      2\n","      ..\n","310    3\n","311    0\n","312    1\n","313    3\n","314    3\n","Name: Personality (class label), Length: 315, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Personality (class label)</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>310</th>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>311</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>312</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>313</th>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>314</th>\n","      <td>3</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>315 rows × 1 columns</p>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":58}]},{"cell_type":"code","source":[],"metadata":{"id":"2yGO74YE-NO3"},"execution_count":null,"outputs":[]}]}