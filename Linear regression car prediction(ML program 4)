{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyN1wbtyY4BTVUSZOP31jXCb"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"r29XLjzR3Ezp"},"outputs":[],"source":["import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","from sklearn.model_selection import train_test_split\n","from sklearn.linear_model import LinearRegression\n","from sklearn.ensemble import RandomForestClassifier\n","\n","from sklearn import metrics"]},{"cell_type":"code","source":["from google.colab import files\n","files.upload()"],"metadata":{"id":"vtNRV3By3tl-","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1724389211566,"user_tz":-330,"elapsed":12468,"user":{"displayName":"siddharth P santhosh","userId":"13793384757789431104"}},"outputId":"a486eeae-adcb-4167-ce6f-321fb0f95feb"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-f7194b6d-6b07-4837-b8cd-1387e94ac7e0\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-f7194b6d-6b07-4837-b8cd-1387e94ac7e0\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving car data (7).csv to car data (7).csv\n"]},{"output_type":"execute_result","data":{"text/plain":["{'car data (7).csv': b'Car_Name,Year,Selling_Price,Present_Price,Kms_Driven,Fuel_Type,Seller_Type,Transmission,Owner\\r\\nritz,2014,3.35,5.59,27000,Petrol,Dealer,Manual,0\\r\\nsx4,2013,4.75,9.54,43000,Diesel,Dealer,Manual,0\\r\\nciaz,2017,7.25,9.85,6900,Petrol,Dealer,Manual,0\\r\\nwagon r,2011,2.85,4.15,5200,Petrol,Dealer,Manual,0\\r\\nswift,2014,4.6,6.87,42450,Diesel,Dealer,Manual,0\\r\\nvitara brezza,2018,9.25,9.83,2071,Diesel,Dealer,Manual,0\\r\\nciaz,2015,6.75,8.12,18796,Petrol,Dealer,Manual,0\\r\\ns cross,2015,6.5,8.61,33429,Diesel,Dealer,Manual,0\\r\\nciaz,2016,8.75,8.89,20273,Diesel,Dealer,Manual,0\\r\\nciaz,2015,7.45,8.92,42367,Diesel,Dealer,Manual,0\\r\\nalto 800,2017,2.85,3.6,2135,Petrol,Dealer,Manual,0\\r\\nciaz,2015,6.85,10.38,51000,Diesel,Dealer,Manual,0\\r\\nciaz,2015,7.5,9.94,15000,Petrol,Dealer,Automatic,0\\r\\nertiga,2015,6.1,7.71,26000,Petrol,Dealer,Manual,0\\r\\ndzire,2009,2.25,7.21,77427,Petrol,Dealer,Manual,0\\r\\nertiga,2016,7.75,10.79,43000,Diesel,Dealer,Manual,0\\r\\nertiga,2015,7.25,10.79,41678,Diesel,Dealer,Manual,0\\r\\nertiga,2016,7.75,10.79,43000,Diesel,Dealer,Manual,0\\r\\nwagon r,2015,3.25,5.09,35500,CNG,Dealer,Manual,0\\r\\nsx4,2010,2.65,7.98,41442,Petrol,Dealer,Manual,0\\r\\nalto k10,2016,2.85,3.95,25000,Petrol,Dealer,Manual,0\\r\\nignis,2017,4.9,5.71,2400,Petrol,Dealer,Manual,0\\r\\nsx4,2011,4.4,8.01,50000,Petrol,Dealer,Automatic,0\\r\\nalto k10,2014,2.5,3.46,45280,Petrol,Dealer,Manual,0\\r\\nwagon r,2013,2.9,4.41,56879,Petrol,Dealer,Manual,0\\r\\nswift,2011,3,4.99,20000,Petrol,Dealer,Manual,0\\r\\nswift,2013,4.15,5.87,55138,Petrol,Dealer,Manual,0\\r\\nswift,2017,6,6.49,16200,Petrol,Individual,Manual,0\\r\\nalto k10,2010,1.95,3.95,44542,Petrol,Dealer,Manual,0\\r\\nciaz,2015,7.45,10.38,45000,Diesel,Dealer,Manual,0\\r\\nritz,2012,3.1,5.98,51439,Diesel,Dealer,Manual,0\\r\\nritz,2011,2.35,4.89,54200,Petrol,Dealer,Manual,0\\r\\nswift,2014,4.95,7.49,39000,Diesel,Dealer,Manual,0\\r\\nertiga,2014,6,9.95,45000,Diesel,Dealer,Manual,0\\r\\ndzire,2014,5.5,8.06,45000,Diesel,Dealer,Manual,0\\r\\nsx4,2011,2.95,7.74,49998,CNG,Dealer,Manual,0\\r\\ndzire,2015,4.65,7.2,48767,Petrol,Dealer,Manual,0\\r\\n800,2003,0.35,2.28,127000,Petrol,Individual,Manual,0\\r\\nalto k10,2016,3,3.76,10079,Petrol,Dealer,Manual,0\\r\\nsx4,2003,2.25,7.98,62000,Petrol,Dealer,Manual,0\\r\\nbaleno,2016,5.85,7.87,24524,Petrol,Dealer,Automatic,0\\r\\nalto k10,2014,2.55,3.98,46706,Petrol,Dealer,Manual,0\\r\\nsx4,2008,1.95,7.15,58000,Petrol,Dealer,Manual,0\\r\\ndzire,2014,5.5,8.06,45780,Diesel,Dealer,Manual,0\\r\\nomni,2012,1.25,2.69,50000,Petrol,Dealer,Manual,0\\r\\nciaz,2014,7.5,12.04,15000,Petrol,Dealer,Automatic,0\\r\\nritz,2013,2.65,4.89,64532,Petrol,Dealer,Manual,0\\r\\nwagon r,2006,1.05,4.15,65000,Petrol,Dealer,Manual,0\\r\\nertiga,2015,5.8,7.71,25870,Petrol,Dealer,Manual,0\\r\\nciaz,2017,7.75,9.29,37000,Petrol,Dealer,Automatic,0\\r\\nfortuner,2012,14.9,30.61,104707,Diesel,Dealer,Automatic,0\\r\\nfortuner,2015,23,30.61,40000,Diesel,Dealer,Automatic,0\\r\\ninnova,2017,18,19.77,15000,Diesel,Dealer,Automatic,0\\r\\nfortuner,2013,16,30.61,135000,Diesel,Individual,Automatic,0\\r\\ninnova,2005,2.75,10.21,90000,Petrol,Individual,Manual,0\\r\\ncorolla altis,2009,3.6,15.04,70000,Petrol,Dealer,Automatic,0\\r\\netios cross,2015,4.5,7.27,40534,Petrol,Dealer,Manual,0\\r\\ncorolla altis,2010,4.75,18.54,50000,Petrol,Dealer,Manual,0\\r\\netios g,2014,4.1,6.8,39485,Petrol,Dealer,Manual,1\\r\\nfortuner,2014,19.99,35.96,41000,Diesel,Dealer,Automatic,0\\r\\ncorolla altis,2013,6.95,18.61,40001,Petrol,Dealer,Manual,0\\r\\netios cross,2015,4.5,7.7,40588,Petrol,Dealer,Manual,0\\r\\nfortuner,2014,18.75,35.96,78000,Diesel,Dealer,Automatic,0\\r\\nfortuner,2015,23.5,35.96,47000,Diesel,Dealer,Automatic,0\\r\\nfortuner,2017,33,36.23,6000,Diesel,Dealer,Automatic,0\\r\\netios liva,2014,4.75,6.95,45000,Diesel,Dealer,Manual,0\\r\\ninnova,2017,19.75,23.15,11000,Petrol,Dealer,Automatic,0\\r\\nfortuner,2010,9.25,20.45,59000,Diesel,Dealer,Manual,0\\r\\ncorolla altis,2011,4.35,13.74,88000,Petrol,Dealer,Manual,0\\r\\ncorolla altis,2016,14.25,20.91,12000,Petrol,Dealer,Manual,0\\r\\netios liva,2014,3.95,6.76,71000,Diesel,Dealer,Manual,0\\r\\ncorolla altis,2011,4.5,12.48,45000,Diesel,Dealer,Manual,0\\r\\ncorolla altis,2013,7.45,18.61,56001,Petrol,Dealer,Manual,0\\r\\netios liva,2011,2.65,5.71,43000,Petrol,Dealer,Manual,0\\r\\netios cross,2014,4.9,8.93,83000,Diesel,Dealer,Manual,0\\r\\netios g,2015,3.95,6.8,36000,Petrol,Dealer,Manual,0\\r\\ncorolla altis,2013,5.5,14.68,72000,Petrol,Dealer,Manual,0\\r\\ncorolla,2004,1.5,12.35,135154,Petrol,Dealer,Automatic,0\\r\\ncorolla altis,2010,5.25,22.83,80000,Petrol,Dealer,Automatic,0\\r\\nfortuner,2012,14.5,30.61,89000,Diesel,Dealer,Automatic,0\\r\\ncorolla altis,2016,14.73,14.89,23000,Diesel,Dealer,Manual,0\\r\\netios gd,2015,4.75,7.85,40000,Diesel,Dealer,Manual,0\\r\\ninnova,2017,23,25.39,15000,Diesel,Dealer,Automatic,0\\r\\ninnova,2015,12.5,13.46,38000,Diesel,Dealer,Manual,0\\r\\ninnova,2005,3.49,13.46,197176,Diesel,Dealer,Manual,0\\r\\ncamry,2006,2.5,23.73,142000,Petrol,Individual,Automatic,3\\r\\nland cruiser,2010,35,92.6,78000,Diesel,Dealer,Manual,0\\r\\ncorolla altis,2012,5.9,13.74,56000,Petrol,Dealer,Manual,0\\r\\netios liva,2013,3.45,6.05,47000,Petrol,Dealer,Manual,0\\r\\netios g,2014,4.75,6.76,40000,Petrol,Dealer,Manual,0\\r\\ncorolla altis,2009,3.8,18.61,62000,Petrol,Dealer,Manual,0\\r\\ninnova,2014,11.25,16.09,58242,Diesel,Dealer,Manual,0\\r\\ninnova,2005,3.51,13.7,75000,Petrol,Dealer,Manual,0\\r\\nfortuner,2015,23,30.61,40000,Diesel,Dealer,Automatic,0\\r\\ncorolla altis,2008,4,22.78,89000,Petrol,Dealer,Automatic,0\\r\\ncorolla altis,2012,5.85,18.61,72000,Petrol,Dealer,Manual,0\\r\\ninnova,2016,20.75,25.39,29000,Diesel,Dealer,Automatic,0\\r\\ncorolla altis,2017,17,18.64,8700,Petrol,Dealer,Manual,0\\r\\ncorolla altis,2013,7.05,18.61,45000,Petrol,Dealer,Manual,0\\r\\nfortuner,2010,9.65,20.45,50024,Diesel,Dealer,Manual,0\\r\\nRoyal Enfield Thunder 500,2016,1.75,1.9,3000,Petrol,Individual,Manual,0\\r\\nUM Renegade Mojave,2017,1.7,1.82,1400,Petrol,Individual,Manual,0\\r\\nKTM RC200,2017,1.65,1.78,4000,Petrol,Individual,Manual,0\\r\\nBajaj Dominar 400,2017,1.45,1.6,1200,Petrol,Individual,Manual,0\\r\\nRoyal Enfield Classic 350,2017,1.35,1.47,4100,Petrol,Individual,Manual,0\\r\\nKTM RC390,2015,1.35,2.37,21700,Petrol,Individual,Manual,0\\r\\nHyosung GT250R,2014,1.35,3.45,16500,Petrol,Individual,Manual,1\\r\\nRoyal Enfield Thunder 350,2013,1.25,1.5,15000,Petrol,Individual,Manual,0\\r\\nRoyal Enfield Thunder 350,2016,1.2,1.5,18000,Petrol,Individual,Manual,0\\r\\nRoyal Enfield Classic 350,2017,1.2,1.47,11000,Petrol,Individual,Manual,0\\r\\nKTM RC200,2016,1.2,1.78,6000,Petrol,Individual,Manual,0\\r\\nRoyal Enfield Thunder 350,2016,1.15,1.5,8700,Petrol,Individual,Manual,0\\r\\nKTM 390 Duke ,2014,1.15,2.4,7000,Petrol,Individual,Manual,0\\r\\nMahindra Mojo XT300,2016,1.15,1.4,35000,Petrol,Individual,Manual,0\\r\\nRoyal Enfield Classic 350,2015,1.15,1.47,17000,Petrol,Individual,Manual,0\\r\\nRoyal Enfield Classic 350,2015,1.11,1.47,17500,Petrol,Individual,Manual,0\\r\\nRoyal Enfield Classic 350,2013,1.1,1.47,33000,Petrol,Individual,Manual,0\\r\\nRoyal Enfield Thunder 500,2015,1.1,1.9,14000,Petrol,Individual,Manual,0\\r\\nRoyal Enfield Classic 350,2015,1.1,1.47,26000,Petrol,Individual,Manual,0\\r\\nRoyal Enfield Thunder 500,2013,1.05,1.9,5400,Petrol,Individual,Manual,0\\r\\nBajaj Pulsar RS200,2016,1.05,1.26,5700,Petrol,Individual,Manual,0\\r\\nRoyal Enfield Thunder 350,2011,1.05,1.5,6900,Petrol,Individual,Manual,0\\r\\nRoyal Enfield Bullet 350,2016,1.05,1.17,6000,Petrol,Individual,Manual,0\\r\\nRoyal Enfield Classic 350,2013,1,1.47,46500,Petrol,Individual,Manual,0\\r\\nRoyal Enfield Classic 500,2012,0.95,1.75,11500,Petrol,Individual,Manual,0\\r\\nRoyal Enfield Classic 500,2009,0.9,1.75,40000,Petrol,Individual,Manual,0\\r\\nBajaj Avenger 220,2017,0.9,0.95,1300,Petrol,Individual,Manual,0\\r\\nBajaj Avenger 150,2016,0.75,0.8,7000,Petrol,Individual,Manual,0\\r\\nHonda CB Hornet 160R,2017,0.8,0.87,3000,Petrol,Individual,Manual,0\\r\\nYamaha FZ S V 2.0,2017,0.78,0.84,5000,Petrol,Individual,Manual,0\\r\\nHonda CB Hornet 160R,2017,0.75,0.87,11000,Petrol,Individual,Manual,0\\r\\nYamaha FZ 16,2015,0.75,0.82,18000,Petrol,Individual,Manual,0\\r\\nBajaj Avenger 220,2017,0.75,0.95,3500,Petrol,Individual,Manual,0\\r\\nBajaj Avenger 220,2016,0.72,0.95,500,Petrol,Individual,Manual,0\\r\\nTVS Apache RTR 160,2017,0.65,0.81,11800,Petrol,Individual,Manual,0\\r\\nBajaj Pulsar 150,2015,0.65,0.74,5000,Petrol,Individual,Manual,0\\r\\nHonda CBR 150,2014,0.65,1.2,23500,Petrol,Individual,Manual,0\\r\\nHero Extreme,2013,0.65,0.787,16000,Petrol,Individual,Manual,0\\r\\nHonda CB Hornet 160R,2016,0.6,0.87,15000,Petrol,Individual,Manual,0\\r\\nBajaj Avenger 220 dtsi,2015,0.6,0.95,16600,Petrol,Individual,Manual,0\\r\\nHonda CBR 150,2013,0.6,1.2,32000,Petrol,Individual,Manual,0\\r\\nBajaj Avenger 150 street,2016,0.6,0.8,20000,Petrol,Individual,Manual,0\\r\\nYamaha FZ  v 2.0,2015,0.6,0.84,29000,Petrol,Individual,Manual,0\\r\\nYamaha FZ  v 2.0,2016,0.6,0.84,25000,Petrol,Individual,Manual,0\\r\\nBajaj Pulsar  NS 200,2014,0.6,0.99,25000,Petrol,Individual,Manual,0\\r\\nTVS Apache RTR 160,2012,0.6,0.81,19000,Petrol,Individual,Manual,0\\r\\nHero Extreme,2014,0.55,0.787,15000,Petrol,Individual,Manual,0\\r\\nYamaha FZ S V 2.0,2015,0.55,0.84,58000,Petrol,Individual,Manual,0\\r\\nBajaj Pulsar 220 F,2010,0.52,0.94,45000,Petrol,Individual,Manual,0\\r\\nBajaj Pulsar 220 F,2016,0.51,0.94,24000,Petrol,Individual,Manual,0\\r\\nTVS Apache RTR 180,2011,0.5,0.826,6000,Petrol,Individual,Manual,0\\r\\nHero Passion X pro,2016,0.5,0.55,31000,Petrol,Individual,Manual,0\\r\\nBajaj Pulsar NS 200,2012,0.5,0.99,13000,Petrol,Individual,Manual,0\\r\\nBajaj Pulsar NS 200,2013,0.5,0.99,45000,Petrol,Individual,Manual,0\\r\\nYamaha Fazer ,2014,0.5,0.88,8000,Petrol,Individual,Manual,0\\r\\nHonda Activa 4G,2017,0.48,0.51,4300,Petrol,Individual,Automatic,0\\r\\nTVS Sport ,2017,0.48,0.52,15000,Petrol,Individual,Manual,0\\r\\nYamaha FZ S V 2.0,2015,0.48,0.84,23000,Petrol,Individual,Manual,0\\r\\nHonda Dream Yuga ,2017,0.48,0.54,8600,Petrol,Individual,Manual,0\\r\\nHonda Activa 4G,2017,0.45,0.51,4000,Petrol,Individual,Automatic,0\\r\\nBajaj Avenger Street 220,2011,0.45,0.95,24000,Petrol,Individual,Manual,0\\r\\nTVS Apache RTR 180,2014,0.45,0.826,23000,Petrol,Individual,Manual,0\\r\\nBajaj Pulsar NS 200,2012,0.45,0.99,14500,Petrol,Individual,Manual,0\\r\\nBajaj Avenger 220 dtsi,2010,0.45,0.95,27000,Petrol,Individual,Manual,0\\r\\nHero Splender iSmart,2016,0.45,0.54,14000,Petrol,Individual,Manual,0\\r\\nActiva 3g,2016,0.45,0.54,500,Petrol,Individual,Automatic,0\\r\\nHero Passion Pro,2016,0.45,0.55,1000,Petrol,Individual,Manual,0\\r\\nTVS Apache RTR 160,2014,0.42,0.81,42000,Petrol,Individual,Manual,0\\r\\nHonda CB Trigger,2013,0.42,0.73,12000,Petrol,Individual,Manual,0\\r\\nHero Splender iSmart,2015,0.4,0.54,14000,Petrol,Individual,Manual,0\\r\\nYamaha FZ S ,2012,0.4,0.83,5500,Petrol,Individual,Manual,0\\r\\nHero Passion Pro,2015,0.4,0.55,6700,Petrol,Individual,Manual,0\\r\\nBajaj Pulsar 135 LS,2014,0.4,0.64,13700,Petrol,Individual,Manual,0\\r\\nActiva 4g,2017,0.4,0.51,1300,Petrol,Individual,Automatic,0\\r\\nHonda CB Unicorn,2015,0.38,0.72,38600,Petrol,Individual,Manual,0\\r\\nHero Honda CBZ extreme,2011,0.38,0.787,75000,Petrol,Individual,Manual,0\\r\\nHonda Karizma,2011,0.35,1.05,30000,Petrol,Individual,Manual,0\\r\\nHonda Activa 125,2016,0.35,0.57,24000,Petrol,Individual,Automatic,0\\r\\nTVS Jupyter,2014,0.35,0.52,19000,Petrol,Individual,Automatic,0\\r\\nHonda Karizma,2010,0.31,1.05,213000,Petrol,Individual,Manual,0\\r\\nHero Honda Passion Pro,2012,0.3,0.51,60000,Petrol,Individual,Manual,0\\r\\nHero Splender Plus,2016,0.3,0.48,50000,Petrol,Individual,Manual,0\\r\\nHonda CB Shine,2013,0.3,0.58,30000,Petrol,Individual,Manual,0\\r\\nBajaj Discover 100,2013,0.27,0.47,21000,Petrol,Individual,Manual,0\\r\\nBajaj Pulsar 150,2008,0.25,0.75,26000,Petrol,Individual,Manual,1\\r\\nSuzuki Access 125,2008,0.25,0.58,1900,Petrol,Individual,Automatic,0\\r\\nTVS Wego,2010,0.25,0.52,22000,Petrol,Individual,Automatic,0\\r\\nHonda CB twister,2013,0.25,0.51,32000,Petrol,Individual,Manual,0\\r\\nHero Glamour,2013,0.25,0.57,18000,Petrol,Individual,Manual,0\\r\\nHero Super Splendor,2005,0.2,0.57,55000,Petrol,Individual,Manual,0\\r\\nBajaj Pulsar 150,2008,0.2,0.75,60000,Petrol,Individual,Manual,0\\r\\nBajaj Discover 125,2012,0.2,0.57,25000,Petrol,Individual,Manual,1\\r\\nHero Hunk,2007,0.2,0.75,49000,Petrol,Individual,Manual,1\\r\\nHero  Ignitor Disc,2013,0.2,0.65,24000,Petrol,Individual,Manual,1\\r\\nHero  CBZ Xtreme,2008,0.2,0.787,50000,Petrol,Individual,Manual,0\\r\\nBajaj  ct 100,2015,0.18,0.32,35000,Petrol,Individual,Manual,0\\r\\nActiva 3g,2008,0.17,0.52,500000,Petrol,Individual,Automatic,0\\r\\nHonda CB twister,2010,0.16,0.51,33000,Petrol,Individual,Manual,0\\r\\nBajaj Discover 125,2011,0.15,0.57,35000,Petrol,Individual,Manual,1\\r\\nHonda CB Shine,2007,0.12,0.58,53000,Petrol,Individual,Manual,0\\r\\nBajaj Pulsar 150,2006,0.1,0.75,92233,Petrol,Individual,Manual,0\\r\\ni20,2010,3.25,6.79,58000,Diesel,Dealer,Manual,1\\r\\ngrand i10,2015,4.4,5.7,28200,Petrol,Dealer,Manual,0\\r\\ni10,2011,2.95,4.6,53460,Petrol,Dealer,Manual,0\\r\\neon,2015,2.75,4.43,28282,Petrol,Dealer,Manual,0\\r\\ngrand i10,2016,5.25,5.7,3493,Petrol,Dealer,Manual,1\\r\\nxcent,2017,5.75,7.13,12479,Petrol,Dealer,Manual,0\\r\\ngrand i10,2015,5.15,5.7,34797,Petrol,Dealer,Automatic,0\\r\\ni20,2017,7.9,8.1,3435,Petrol,Dealer,Manual,0\\r\\ngrand i10,2015,4.85,5.7,21125,Diesel,Dealer,Manual,0\\r\\ni10,2012,3.1,4.6,35775,Petrol,Dealer,Manual,0\\r\\nelantra,2015,11.75,14.79,43535,Diesel,Dealer,Manual,0\\r\\ncreta,2016,11.25,13.6,22671,Petrol,Dealer,Manual,0\\r\\ni20,2011,2.9,6.79,31604,Petrol,Dealer,Manual,0\\r\\ngrand i10,2017,5.25,5.7,20114,Petrol,Dealer,Manual,0\\r\\nverna,2012,4.5,9.4,36100,Petrol,Dealer,Manual,0\\r\\neon,2016,2.9,4.43,12500,Petrol,Dealer,Manual,0\\r\\neon,2016,3.15,4.43,15000,Petrol,Dealer,Manual,0\\r\\nverna,2014,6.45,9.4,45078,Petrol,Dealer,Manual,0\\r\\nverna,2012,4.5,9.4,36000,Petrol,Dealer,Manual,0\\r\\neon,2017,3.5,4.43,38488,Petrol,Dealer,Manual,0\\r\\ni20,2013,4.5,6.79,32000,Petrol,Dealer,Automatic,0\\r\\ni20,2014,6,7.6,77632,Diesel,Dealer,Manual,0\\r\\nverna,2015,8.25,9.4,61381,Diesel,Dealer,Manual,0\\r\\nverna,2013,5.11,9.4,36198,Petrol,Dealer,Automatic,0\\r\\ni10,2011,2.7,4.6,22517,Petrol,Dealer,Manual,0\\r\\ngrand i10,2015,5.25,5.7,24678,Petrol,Dealer,Manual,0\\r\\ni10,2011,2.55,4.43,57000,Petrol,Dealer,Manual,0\\r\\nverna,2012,4.95,9.4,60000,Diesel,Dealer,Manual,0\\r\\ni20,2012,3.1,6.79,52132,Diesel,Dealer,Manual,0\\r\\nverna,2013,6.15,9.4,45000,Diesel,Dealer,Manual,0\\r\\nverna,2017,9.25,9.4,15001,Petrol,Dealer,Manual,0\\r\\nelantra,2015,11.45,14.79,12900,Petrol,Dealer,Automatic,0\\r\\ngrand i10,2013,3.9,5.7,53000,Diesel,Dealer,Manual,0\\r\\ngrand i10,2015,5.5,5.7,4492,Petrol,Dealer,Manual,0\\r\\nverna,2017,9.1,9.4,15141,Petrol,Dealer,Manual,0\\r\\neon,2016,3.1,4.43,11849,Petrol,Dealer,Manual,0\\r\\ncreta,2015,11.25,13.6,68000,Diesel,Dealer,Manual,0\\r\\nverna,2013,4.8,9.4,60241,Petrol,Dealer,Manual,0\\r\\neon,2012,2,4.43,23709,Petrol,Dealer,Manual,0\\r\\nverna,2012,5.35,9.4,32322,Diesel,Dealer,Manual,0\\r\\nxcent,2015,4.75,7.13,35866,Petrol,Dealer,Manual,1\\r\\nxcent,2014,4.4,7.13,34000,Petrol,Dealer,Manual,0\\r\\ni20,2016,6.25,7.6,7000,Petrol,Dealer,Manual,0\\r\\nverna,2013,5.95,9.4,49000,Diesel,Dealer,Manual,0\\r\\nverna,2012,5.2,9.4,71000,Diesel,Dealer,Manual,0\\r\\ni20,2012,3.75,6.79,35000,Petrol,Dealer,Manual,0\\r\\nverna,2015,5.95,9.4,36000,Petrol,Dealer,Manual,0\\r\\ni10,2013,4,4.6,30000,Petrol,Dealer,Manual,0\\r\\ni20,2016,5.25,7.6,17000,Petrol,Dealer,Manual,0\\r\\ncreta,2016,12.9,13.6,35934,Diesel,Dealer,Manual,0\\r\\ncity,2013,5,9.9,56701,Petrol,Dealer,Manual,0\\r\\nbrio,2015,5.4,6.82,31427,Petrol,Dealer,Automatic,0\\r\\ncity,2014,7.2,9.9,48000,Diesel,Dealer,Manual,0\\r\\ncity,2013,5.25,9.9,54242,Petrol,Dealer,Manual,0\\r\\nbrio,2012,3,5.35,53675,Petrol,Dealer,Manual,0\\r\\ncity,2016,10.25,13.6,49562,Petrol,Dealer,Manual,0\\r\\ncity,2015,8.5,13.6,40324,Petrol,Dealer,Manual,0\\r\\ncity,2015,8.4,13.6,25000,Petrol,Dealer,Manual,0\\r\\namaze,2014,3.9,7,36054,Petrol,Dealer,Manual,0\\r\\ncity,2016,9.15,13.6,29223,Petrol,Dealer,Manual,0\\r\\nbrio,2016,5.5,5.97,5600,Petrol,Dealer,Manual,0\\r\\namaze,2015,4,5.8,40023,Petrol,Dealer,Manual,0\\r\\njazz,2016,6.6,7.7,16002,Petrol,Dealer,Manual,0\\r\\namaze,2015,4,7,40026,Petrol,Dealer,Manual,0\\r\\njazz,2017,6.5,8.7,21200,Petrol,Dealer,Manual,0\\r\\namaze,2014,3.65,7,35000,Petrol,Dealer,Manual,0\\r\\ncity,2016,8.35,9.4,19434,Diesel,Dealer,Manual,0\\r\\nbrio,2017,4.8,5.8,19000,Petrol,Dealer,Manual,0\\r\\ncity,2015,6.7,10,18828,Petrol,Dealer,Manual,0\\r\\ncity,2011,4.1,10,69341,Petrol,Dealer,Manual,0\\r\\ncity,2009,3,10,69562,Petrol,Dealer,Manual,0\\r\\ncity,2015,7.5,10,27600,Petrol,Dealer,Manual,0\\r\\njazz,2010,2.25,7.5,61203,Petrol,Dealer,Manual,0\\r\\nbrio,2014,5.3,6.8,16500,Petrol,Dealer,Manual,0\\r\\ncity,2016,10.9,13.6,30753,Petrol,Dealer,Automatic,0\\r\\ncity,2015,8.65,13.6,24800,Petrol,Dealer,Manual,0\\r\\ncity,2015,9.7,13.6,21780,Petrol,Dealer,Manual,0\\r\\njazz,2016,6,8.4,4000,Petrol,Dealer,Manual,0\\r\\ncity,2014,6.25,13.6,40126,Petrol,Dealer,Manual,0\\r\\nbrio,2015,5.25,5.9,14465,Petrol,Dealer,Manual,0\\r\\ncity,2006,2.1,7.6,50456,Petrol,Dealer,Manual,0\\r\\ncity,2014,8.25,14,63000,Diesel,Dealer,Manual,0\\r\\ncity,2016,8.99,11.8,9010,Petrol,Dealer,Manual,0\\r\\nbrio,2013,3.5,5.9,9800,Petrol,Dealer,Manual,0\\r\\njazz,2016,7.4,8.5,15059,Petrol,Dealer,Automatic,0\\r\\njazz,2016,5.65,7.9,28569,Petrol,Dealer,Manual,0\\r\\namaze,2015,5.75,7.5,44000,Petrol,Dealer,Automatic,0\\r\\ncity,2015,8.4,13.6,34000,Petrol,Dealer,Manual,0\\r\\ncity,2016,10.11,13.6,10980,Petrol,Dealer,Manual,0\\r\\namaze,2014,4.5,6.4,19000,Petrol,Dealer,Manual,0\\r\\nbrio,2015,5.4,6.1,31427,Petrol,Dealer,Manual,0\\r\\njazz,2016,6.4,8.4,12000,Petrol,Dealer,Manual,0\\r\\ncity,2010,3.25,9.9,38000,Petrol,Dealer,Manual,0\\r\\namaze,2014,3.75,6.8,33019,Petrol,Dealer,Manual,0\\r\\ncity,2015,8.55,13.09,60076,Diesel,Dealer,Manual,0\\r\\ncity,2016,9.5,11.6,33988,Diesel,Dealer,Manual,0\\r\\nbrio,2015,4,5.9,60000,Petrol,Dealer,Manual,0\\r\\ncity,2009,3.35,11,87934,Petrol,Dealer,Manual,0\\r\\ncity,2017,11.5,12.5,9000,Diesel,Dealer,Manual,0\\r\\nbrio,2016,5.3,5.9,5464,Petrol,Dealer,Manual,0\\r\\n'}"]},"metadata":{},"execution_count":3}]},{"cell_type":"code","source":["car_dataset = pd.read_csv('car data (7).csv')\n","car_dataset"],"metadata":{"id":"sr5mrU984RBV","colab":{"base_uri":"https://localhost:8080/","height":423},"executionInfo":{"status":"ok","timestamp":1724389276590,"user_tz":-330,"elapsed":452,"user":{"displayName":"siddharth P santhosh","userId":"13793384757789431104"}},"outputId":"16d151b7-c410-4b76-e843-95c680b340a6"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["    Car_Name  Year  Selling_Price  Present_Price  Kms_Driven Fuel_Type  \\\n","0       ritz  2014           3.35           5.59       27000    Petrol   \n","1        sx4  2013           4.75           9.54       43000    Diesel   \n","2       ciaz  2017           7.25           9.85        6900    Petrol   \n","3    wagon r  2011           2.85           4.15        5200    Petrol   \n","4      swift  2014           4.60           6.87       42450    Diesel   \n","..       ...   ...            ...            ...         ...       ...   \n","296     city  2016           9.50          11.60       33988    Diesel   \n","297     brio  2015           4.00           5.90       60000    Petrol   \n","298     city  2009           3.35          11.00       87934    Petrol   \n","299     city  2017          11.50          12.50        9000    Diesel   \n","300     brio  2016           5.30           5.90        5464    Petrol   \n","\n","    Seller_Type Transmission  Owner  \n","0        Dealer       Manual      0  \n","1        Dealer       Manual      0  \n","2        Dealer       Manual      0  \n","3        Dealer       Manual      0  \n","4        Dealer       Manual      0  \n","..          ...          ...    ...  \n","296      Dealer       Manual      0  \n","297      Dealer       Manual      0  \n","298      Dealer       Manual      0  \n","299      Dealer       Manual      0  \n","300      Dealer       Manual      0  \n","\n","[301 rows x 9 columns]"],"text/html":["\n","  <div id=\"df-674aafac-de9d-4612-95ef-0aec39423cb6\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Car_Name</th>\n","      <th>Year</th>\n","      <th>Selling_Price</th>\n","      <th>Present_Price</th>\n","      <th>Kms_Driven</th>\n","      <th>Fuel_Type</th>\n","      <th>Seller_Type</th>\n","      <th>Transmission</th>\n","      <th>Owner</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>ritz</td>\n","      <td>2014</td>\n","      <td>3.35</td>\n","      <td>5.59</td>\n","      <td>27000</td>\n","      <td>Petrol</td>\n","      <td>Dealer</td>\n","      <td>Manual</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>sx4</td>\n","      <td>2013</td>\n","      <td>4.75</td>\n","      <td>9.54</td>\n","      <td>43000</td>\n","      <td>Diesel</td>\n","      <td>Dealer</td>\n","      <td>Manual</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>ciaz</td>\n","      <td>2017</td>\n","      <td>7.25</td>\n","      <td>9.85</td>\n","      <td>6900</td>\n","      <td>Petrol</td>\n","      <td>Dealer</td>\n","      <td>Manual</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>wagon r</td>\n","      <td>2011</td>\n","      <td>2.85</td>\n","      <td>4.15</td>\n","      <td>5200</td>\n","      <td>Petrol</td>\n","      <td>Dealer</td>\n","      <td>Manual</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>swift</td>\n","      <td>2014</td>\n","      <td>4.60</td>\n","      <td>6.87</td>\n","      <td>42450</td>\n","      <td>Diesel</td>\n","      <td>Dealer</td>\n","      <td>Manual</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>296</th>\n","      <td>city</td>\n","      <td>2016</td>\n","      <td>9.50</td>\n","      <td>11.60</td>\n","      <td>33988</td>\n","      <td>Diesel</td>\n","      <td>Dealer</td>\n","      <td>Manual</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>297</th>\n","      <td>brio</td>\n","      <td>2015</td>\n","      <td>4.00</td>\n","      <td>5.90</td>\n","      <td>60000</td>\n","      <td>Petrol</td>\n","      <td>Dealer</td>\n","      <td>Manual</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>298</th>\n","      <td>city</td>\n","      <td>2009</td>\n","      <td>3.35</td>\n","      <td>11.00</td>\n","      <td>87934</td>\n","      <td>Petrol</td>\n","      <td>Dealer</td>\n","      <td>Manual</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>299</th>\n","      <td>city</td>\n","      <td>2017</td>\n","      <td>11.50</td>\n","      <td>12.50</td>\n","      <td>9000</td>\n","      <td>Diesel</td>\n","      <td>Dealer</td>\n","      <td>Manual</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>300</th>\n","      <td>brio</td>\n","      <td>2016</td>\n","      <td>5.30</td>\n","      <td>5.90</td>\n","      <td>5464</td>\n","      <td>Petrol</td>\n","      <td>Dealer</td>\n","      <td>Manual</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>301 rows × 9 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-674aafac-de9d-4612-95ef-0aec39423cb6')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-674aafac-de9d-4612-95ef-0aec39423cb6 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-674aafac-de9d-4612-95ef-0aec39423cb6');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-0491d223-bc8f-46ab-9102-05832a472bf6\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0491d223-bc8f-46ab-9102-05832a472bf6')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-0491d223-bc8f-46ab-9102-05832a472bf6 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_9efcb1f8-7715-4b37-9ef7-da5f5a9a7e6b\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('car_dataset')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_9efcb1f8-7715-4b37-9ef7-da5f5a9a7e6b button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('car_dataset');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"car_dataset","summary":"{\n  \"name\": \"car_dataset\",\n  \"rows\": 301,\n  \"fields\": [\n    {\n      \"column\": \"Car_Name\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 98,\n        \"samples\": [\n          \"Hero Passion Pro\",\n          \"Honda CB Hornet 160R\",\n          \"city\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 2003,\n        \"max\": 2018,\n        \"num_unique_values\": 16,\n        \"samples\": [\n          2014,\n          2013,\n          2015\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Selling_Price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.082811556177803,\n        \"min\": 0.1,\n        \"max\": 35.0,\n        \"num_unique_values\": 156,\n        \"samples\": [\n          0.4,\n          7.05,\n          0.9\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Present_Price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8.644115402015787,\n        \"min\": 0.32,\n        \"max\": 92.6,\n        \"num_unique_values\": 147,\n        \"samples\": [\n          7.6,\n          36.23,\n          11.8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Kms_Driven\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 38886,\n        \"min\": 500,\n        \"max\": 500000,\n        \"num_unique_values\": 206,\n        \"samples\": [\n          41678,\n          42367,\n          60076\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fuel_Type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Petrol\",\n          \"Diesel\",\n          \"CNG\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Seller_Type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Individual\",\n          \"Dealer\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Transmission\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Automatic\",\n          \"Manual\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Owner\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 3,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["car_dataset.tail()"],"metadata":{"id":"xoKnLd0Y5Qw5","colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"status":"ok","timestamp":1724389287713,"user_tz":-330,"elapsed":431,"user":{"displayName":"siddharth P santhosh","userId":"13793384757789431104"}},"outputId":"f71adf89-cc43-4b7d-822d-e6fb3f4f2c57"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["    Car_Name  Year  Selling_Price  Present_Price  Kms_Driven Fuel_Type  \\\n","296     city  2016           9.50           11.6       33988    Diesel   \n","297     brio  2015           4.00            5.9       60000    Petrol   \n","298     city  2009           3.35           11.0       87934    Petrol   \n","299     city  2017          11.50           12.5        9000    Diesel   \n","300     brio  2016           5.30            5.9        5464    Petrol   \n","\n","    Seller_Type Transmission  Owner  \n","296      Dealer       Manual      0  \n","297      Dealer       Manual      0  \n","298      Dealer       Manual      0  \n","299      Dealer       Manual      0  \n","300      Dealer       Manual      0  "],"text/html":["\n","  <div id=\"df-49d9c4a4-0bd5-4651-a647-882d1027f16a\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Car_Name</th>\n","      <th>Year</th>\n","      <th>Selling_Price</th>\n","      <th>Present_Price</th>\n","      <th>Kms_Driven</th>\n","      <th>Fuel_Type</th>\n","      <th>Seller_Type</th>\n","      <th>Transmission</th>\n","      <th>Owner</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>296</th>\n","      <td>city</td>\n","      <td>2016</td>\n","      <td>9.50</td>\n","      <td>11.6</td>\n","      <td>33988</td>\n","      <td>Diesel</td>\n","      <td>Dealer</td>\n","      <td>Manual</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>297</th>\n","      <td>brio</td>\n","      <td>2015</td>\n","      <td>4.00</td>\n","      <td>5.9</td>\n","      <td>60000</td>\n","      <td>Petrol</td>\n","      <td>Dealer</td>\n","      <td>Manual</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>298</th>\n","      <td>city</td>\n","      <td>2009</td>\n","      <td>3.35</td>\n","      <td>11.0</td>\n","      <td>87934</td>\n","      <td>Petrol</td>\n","      <td>Dealer</td>\n","      <td>Manual</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>299</th>\n","      <td>city</td>\n","      <td>2017</td>\n","      <td>11.50</td>\n","      <td>12.5</td>\n","      <td>9000</td>\n","      <td>Diesel</td>\n","      <td>Dealer</td>\n","      <td>Manual</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>300</th>\n","      <td>brio</td>\n","      <td>2016</td>\n","      <td>5.30</td>\n","      <td>5.9</td>\n","      <td>5464</td>\n","      <td>Petrol</td>\n","      <td>Dealer</td>\n","      <td>Manual</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-49d9c4a4-0bd5-4651-a647-882d1027f16a')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-49d9c4a4-0bd5-4651-a647-882d1027f16a button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-49d9c4a4-0bd5-4651-a647-882d1027f16a');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-2a99212f-5ac4-40ee-b137-a2d9a70b0d18\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2a99212f-5ac4-40ee-b137-a2d9a70b0d18')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-2a99212f-5ac4-40ee-b137-a2d9a70b0d18 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"car_dataset\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"Car_Name\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"brio\",\n          \"city\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 2009,\n        \"max\": 2017,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2015,\n          2017\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Selling_Price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.5828759398003163,\n        \"min\": 3.35,\n        \"max\": 11.5,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          4.0,\n          5.3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Present_Price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.2213351269310677,\n        \"min\": 5.9,\n        \"max\": 12.5,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          5.9,\n          12.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Kms_Driven\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 34946,\n        \"min\": 5464,\n        \"max\": 87934,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          60000,\n          5464\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fuel_Type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Petrol\",\n          \"Diesel\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Seller_Type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Dealer\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Transmission\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Manual\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Owner\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["car_dataset.shape"],"metadata":{"id":"nJhsR6_75YST","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1724389290772,"user_tz":-330,"elapsed":437,"user":{"displayName":"siddharth P santhosh","userId":"13793384757789431104"}},"outputId":"1e627592-e8bb-44b5-af56-5650cf3efa51"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(301, 9)"]},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["car_dataset.info()"],"metadata":{"id":"DKdyZ9Lx5eYq","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1724389293654,"user_tz":-330,"elapsed":490,"user":{"displayName":"siddharth P santhosh","userId":"13793384757789431104"}},"outputId":"f6920e4c-d7ee-4859-bc8d-f17d19d0b37a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 301 entries, 0 to 300\n","Data columns (total 9 columns):\n"," #   Column         Non-Null Count  Dtype  \n","---  ------         --------------  -----  \n"," 0   Car_Name       301 non-null    object \n"," 1   Year           301 non-null    int64  \n"," 2   Selling_Price  301 non-null    float64\n"," 3   Present_Price  301 non-null    float64\n"," 4   Kms_Driven     301 non-null    int64  \n"," 5   Fuel_Type      301 non-null    object \n"," 6   Seller_Type    301 non-null    object \n"," 7   Transmission   301 non-null    object \n"," 8   Owner          301 non-null    int64  \n","dtypes: float64(2), int64(3), object(4)\n","memory usage: 21.3+ KB\n"]}]},{"cell_type":"code","source":["#Checking for missing values\n","car_dataset.isnull().sum()"],"metadata":{"id":"0MnfesOb5l1s","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1724392617955,"user_tz":-330,"elapsed":459,"user":{"displayName":"siddharth P santhosh","userId":"13793384757789431104"}},"outputId":"eaf4852d-549d-447c-aff1-c8d97feb4338"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Car_Name         0\n","Year             0\n","Selling_Price    0\n","Present_Price    0\n","Kms_Driven       0\n","Fuel_Type        0\n","Seller_Type      0\n","Transmission     0\n","Owner            0\n","dtype: int64"]},"metadata":{},"execution_count":49}]},{"cell_type":"code","source":["#Null removing function\n","car_dataset =  car_dataset.dropna()"],"metadata":{"id":"fs35Dz2sz1Xf"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["car_dataset.describe()"],"metadata":{"id":"M2qQD_k557pN","colab":{"base_uri":"https://localhost:8080/","height":300},"executionInfo":{"status":"ok","timestamp":1724393126727,"user_tz":-330,"elapsed":566,"user":{"displayName":"siddharth P santhosh","userId":"13793384757789431104"}},"outputId":"7ae88e20-6194-457a-fd4b-97b7e5f143d5"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["              Year  Selling_Price  Present_Price     Kms_Driven   Fuel_Type  \\\n","count   301.000000     301.000000     301.000000     301.000000  301.000000   \n","mean   2013.627907       4.661296       7.628472   36947.205980    0.212625   \n","std       2.891554       5.082812       8.644115   38886.883882    0.425801   \n","min    2003.000000       0.100000       0.320000     500.000000    0.000000   \n","25%    2012.000000       0.900000       1.200000   15000.000000    0.000000   \n","50%    2014.000000       3.600000       6.400000   32000.000000    0.000000   \n","75%    2016.000000       6.000000       9.900000   48767.000000    0.000000   \n","max    2018.000000      35.000000      92.600000  500000.000000    2.000000   \n","\n","       Seller_Type  Transmission       Owner  \n","count   301.000000    301.000000  301.000000  \n","mean      0.352159      0.132890    0.043189  \n","std       0.478439      0.340021    0.247915  \n","min       0.000000      0.000000    0.000000  \n","25%       0.000000      0.000000    0.000000  \n","50%       0.000000      0.000000    0.000000  \n","75%       1.000000      0.000000    0.000000  \n","max       1.000000      1.000000    3.000000  "],"text/html":["\n","  <div id=\"df-69efbc0e-399d-435f-ae81-c17e287f5f7c\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Year</th>\n","      <th>Selling_Price</th>\n","      <th>Present_Price</th>\n","      <th>Kms_Driven</th>\n","      <th>Fuel_Type</th>\n","      <th>Seller_Type</th>\n","      <th>Transmission</th>\n","      <th>Owner</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>301.000000</td>\n","      <td>301.000000</td>\n","      <td>301.000000</td>\n","      <td>301.000000</td>\n","      <td>301.000000</td>\n","      <td>301.000000</td>\n","      <td>301.000000</td>\n","      <td>301.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>2013.627907</td>\n","      <td>4.661296</td>\n","      <td>7.628472</td>\n","      <td>36947.205980</td>\n","      <td>0.212625</td>\n","      <td>0.352159</td>\n","      <td>0.132890</td>\n","      <td>0.043189</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>2.891554</td>\n","      <td>5.082812</td>\n","      <td>8.644115</td>\n","      <td>38886.883882</td>\n","      <td>0.425801</td>\n","      <td>0.478439</td>\n","      <td>0.340021</td>\n","      <td>0.247915</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>2003.000000</td>\n","      <td>0.100000</td>\n","      <td>0.320000</td>\n","      <td>500.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>2012.000000</td>\n","      <td>0.900000</td>\n","      <td>1.200000</td>\n","      <td>15000.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>2014.000000</td>\n","      <td>3.600000</td>\n","      <td>6.400000</td>\n","      <td>32000.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>2016.000000</td>\n","      <td>6.000000</td>\n","      <td>9.900000</td>\n","      <td>48767.000000</td>\n","      <td>0.000000</td>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>2018.000000</td>\n","      <td>35.000000</td>\n","      <td>92.600000</td>\n","      <td>500000.000000</td>\n","      <td>2.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>3.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-69efbc0e-399d-435f-ae81-c17e287f5f7c')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-69efbc0e-399d-435f-ae81-c17e287f5f7c button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-69efbc0e-399d-435f-ae81-c17e287f5f7c');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-93a2a980-fff9-477b-97d4-b4f0009a4a53\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-93a2a980-fff9-477b-97d4-b4f0009a4a53')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-93a2a980-fff9-477b-97d4-b4f0009a4a53 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"car_dataset\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 865.0828154405388,\n        \"min\": 2.891554127336687,\n        \"max\": 2018.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          2013.6279069767443,\n          2014.0,\n          301.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Selling_Price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 104.23236562425845,\n        \"min\": 0.1,\n        \"max\": 301.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          4.661295681063123,\n          3.6,\n          301.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Present_Price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 104.59723300986236,\n        \"min\": 0.32,\n        \"max\": 301.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          7.628471760797343,\n          6.4,\n          301.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Kms_Driven\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 169026.31889375782,\n        \"min\": 301.0,\n        \"max\": 500000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          36947.20598006644,\n          32000.0,\n          301.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fuel_Type\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 106.28848197645988,\n        \"min\": 0.0,\n        \"max\": 301.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.21262458471760798,\n          2.0,\n          0.42580130960372065\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Seller_Type\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 106.27741586922122,\n        \"min\": 0.0,\n        \"max\": 301.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.3521594684385382,\n          1.0,\n          0.47843876774886235\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Transmission\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 106.34573030128948,\n        \"min\": 0.0,\n        \"max\": 301.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.132890365448505,\n          1.0,\n          0.3400214962913365\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Owner\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 106.25839718786118,\n        \"min\": 0.0,\n        \"max\": 301.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.04318936877076412,\n          3.0,\n          0.2479148926949197\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":52}]},{"cell_type":"code","source":["#Distribution of year\n","sns.set()\n","plt.figure(figsize=(6, 6))\n","sns.histplot(car_dataset['Year'])\n","plt.title('Year Distribution')\n","plt.show()"],"metadata":{"id":"XO0wmW6d6IAt","colab":{"base_uri":"https://localhost:8080/","height":573},"executionInfo":{"status":"ok","timestamp":1724393886371,"user_tz":-330,"elapsed":1544,"user":{"displayName":"siddharth P santhosh","userId":"13793384757789431104"}},"outputId":"573dec46-f215-4ec4-a310-6478191dd667"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 600x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["#fuel_type column\n","plt.figure(figsize = (6,6))\n","sns.countplot(x = 'Fuel_Type', data = car_dataset)\n","plt.title('FuelType Distribution')\n","plt.show()"],"metadata":{"id":"QYI63XC47YZ-","colab":{"base_uri":"https://localhost:8080/","height":573},"executionInfo":{"status":"ok","timestamp":1724389360042,"user_tz":-330,"elapsed":915,"user":{"displayName":"siddharth P santhosh","userId":"13793384757789431104"}},"outputId":"3201c27b-73ae-4228-ae1d-bdc32654e72d"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 600x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["car_dataset['Fuel_Type'].value_counts()"],"metadata":{"id":"RrZ-0h3S89Dn","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1724389363646,"user_tz":-330,"elapsed":6,"user":{"displayName":"siddharth P santhosh","userId":"13793384757789431104"}},"outputId":"0b546157-c5fd-4755-ecf1-df8c01c63607"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Fuel_Type\n","Petrol    239\n","Diesel     60\n","CNG         2\n","Name: count, dtype: int64"]},"metadata":{},"execution_count":16}]},{"cell_type":"code","source":["#selling price distribution\n","plt.figure(figsize = (6,6))\n","sns.distplot(car_dataset['Selling_Price'])\n","plt.title('Selling_Price Distribution')\n","plt.show()"],"metadata":{"id":"ynqf8Hm-9FvX","colab":{"base_uri":"https://localhost:8080/","height":764},"executionInfo":{"status":"ok","timestamp":1724389367438,"user_tz":-330,"elapsed":1260,"user":{"displayName":"siddharth P santhosh","userId":"13793384757789431104"}},"outputId":"a47303e2-a944-42e9-9b08-4562527b4ddb"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-17-aaf0665b4663>:3: UserWarning: \n","\n","`distplot` is a deprecated function and will be removed in seaborn v0.14.0.\n","\n","Please adapt your code to use either `displot` (a figure-level function with\n","similar flexibility) or `histplot` (an axes-level function for histograms).\n","\n","For a guide to updating your code to use the new functions, please see\n","https://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751\n","\n","  sns.distplot(car_dataset['Selling_Price'])\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 600x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["#Seller type column\n","plt.figure(figsize=(6,6))\n","sns.countplot(x = 'Seller_Type', data = car_dataset)\n","plt.title('Seller Type')\n","plt.show()"],"metadata":{"id":"Ranq_0rq-eQR","colab":{"base_uri":"https://localhost:8080/","height":573},"executionInfo":{"status":"ok","timestamp":1724389435166,"user_tz":-330,"elapsed":1135,"user":{"displayName":"siddharth P santhosh","userId":"13793384757789431104"}},"outputId":"350fa69a-cd25-48b4-c02d-adef1a29931b"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 600x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["car_dataset['Seller_Type'].value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GDTRxjFebufR","executionInfo":{"status":"ok","timestamp":1724389455002,"user_tz":-330,"elapsed":395,"user":{"displayName":"siddharth P santhosh","userId":"13793384757789431104"}},"outputId":"4493df20-1306-490e-c5b9-7a1759d60b82"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Seller_Type\n","Dealer        195\n","Individual    106\n","Name: count, dtype: int64"]},"metadata":{},"execution_count":21}]},{"cell_type":"code","source":["#Transimission column\n","plt.figure(figsize = (6, 6))\n","sns.countplot(x = 'Transmission', data = car_dataset)\n","plt.title('Transmission')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":573},"id":"_-_NNa9Mb9c3","executionInfo":{"status":"ok","timestamp":1724389468065,"user_tz":-330,"elapsed":1122,"user":{"displayName":"siddharth P santhosh","userId":"13793384757789431104"}},"outputId":"39da75ff-4d0c-42a1-a95a-b14c6e6dd6cb"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 600x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["car_dataset['Transmission'].value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0-tVLcIiceMv","executionInfo":{"status":"ok","timestamp":1724389471847,"user_tz":-330,"elapsed":4,"user":{"displayName":"siddharth P santhosh","userId":"13793384757789431104"}},"outputId":"7b5247fe-9c4a-4f5b-c12f-50e52d25e762"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Transmission\n","Manual       261\n","Automatic     40\n","Name: count, dtype: int64"]},"metadata":{},"execution_count":24}]},{"cell_type":"code","source":["#distribution of present price\n","sns.set()\n","plt.figure(figsize = (6, 6))\n","sns.distplot(car_dataset['Present_Price'])\n","plt.title('Prsent_Price Distribution')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":764},"id":"WcYStj5_clm-","executionInfo":{"status":"ok","timestamp":1724389475126,"user_tz":-330,"elapsed":1324,"user":{"displayName":"siddharth P santhosh","userId":"13793384757789431104"}},"outputId":"215d76d6-bd19-4478-a161-0c87901a21c6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-25-fb6f639f1317>:4: UserWarning: \n","\n","`distplot` is a deprecated function and will be removed in seaborn v0.14.0.\n","\n","Please adapt your code to use either `displot` (a figure-level function with\n","similar flexibility) or `histplot` (an axes-level function for histograms).\n","\n","For a guide to updating your code to use the new functions, please see\n","https://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751\n","\n","  sns.distplot(car_dataset['Present_Price'])\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 600x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["#distribution of kms driven\n","sns.set()\n","plt.figure(figsize =(6, 6))\n","sns.distplot(car_dataset['Kms_Driven'])\n","plt.title('Kms_driven Distribution')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":764},"id":"yUR1nU8EemKR","executionInfo":{"status":"ok","timestamp":1724389479926,"user_tz":-330,"elapsed":1317,"user":{"displayName":"siddharth P santhosh","userId":"13793384757789431104"}},"outputId":"0a44ef1e-ec50-430e-a355-e6900c5b06f0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-26-06ab6352aa46>:4: UserWarning: \n","\n","`distplot` is a deprecated function and will be removed in seaborn v0.14.0.\n","\n","Please adapt your code to use either `displot` (a figure-level function with\n","similar flexibility) or `histplot` (an axes-level function for histograms).\n","\n","For a guide to updating your code to use the new functions, please see\n","https://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751\n","\n","  sns.distplot(car_dataset['Kms_Driven'])\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 600x600 with 1 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAAAisAAAIsCAYAAAAzq+mQAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAAB18ElEQVR4nO3dd3xT5eI/8M852R3pYA8ZRagUKEUZlkpRBLGA4hYHIrN6EcXx/Ql8r14FHPh1XAWvooKg170FC4pyBWXdexVZyiwbLNDSpGmTZpzz+yNN2pCOlKTNSfJ5v155Qc7Kk6cp+fCsI8iyLIOIiIhIocRwF4CIiIioPgwrREREpGgMK0RERKRoDCtERESkaAwrREREpGgMK0RERKRoDCtERESkaAwrREREpGgMK0RERKRoDCtEVKctW7YgPT0dW7ZsCej48ePHY/z48U1cqub1+eefIz09HceOHWvy15o1axaGDRvmfX7s2DGkp6djyZIlTf7aALBw4UKkp6c3y2sRNQbDClET8HzB7dixw2d7WVkZbrrpJvTp0wfr168PU+lilyd8eR69e/fG4MGDMX78eLz++usoKSkJyetYrVYsXLgw4JDXnJRcNqK6MKwQNROLxYJJkyZhz549WLRoEXJzc8NdpJBbsmRJs7UCBGP8+PF47rnnMG/ePEyePBlJSUlYuHAh8vLysGnTJp9jx44di+3bt6NDhw4BX99qtWLRokX497//3ahyzZs3D6tXr27UOY1VX9nuvfdebN++vUlfn+h8qMNdAKJYYLFYMHnyZPzxxx9YtGgRhg4dGu4ihZTVaoXBYIBWqw13UQLSv39/XH311T7bdu/ejUmTJuH+++/HN998g9atWwMAVCoVVCpVk5anoqICcXFx0Gg0Tfo6DVGr1VCr+bVAysOWFaImVl5ejilTpmDXrl1YuHAhLr/8cp/9s2bNQr9+/XDixAnk5+ejX79+GDJkCN577z0AwJ49e3DXXXchKysLV1xxBVasWOFzvsPhwKJFi3DVVVehT58+GDRoEG677TZs2LChUeX8888/8Ze//AVZWVnIzs7G008/Dbvd7nfc+PHjMWbMGOzcuRN33HEH+vbtixdffNG7zzNm5cyZM8jIyMCiRYv8rlFYWIj09HT885//9G4zm8146qmnMHToUPTu3RsjRozAG2+8AUmSvMfUHMPx0UcfYfjw4ejduzduvPHGoFsELrroIsyZMwdms9lb90DtY1Z27NiByZMnY9CgQcjMzMSwYcMwe/Zsbxmzs7MBAIsWLfJ2OS1cuBBA9c/7yJEjmDp1Kvr164dHHnnEu6/mmJWali1bhiuuuAKZmZm48847sXfvXp/9dY0XqnnNhspW25gVp9OJV1991VvXw4YNw4svvuj32Rg2bBjy8/Px3//+19vVeeWVV+LLL7+sp9aJAsMITdSErFYrpk6dip07d+Lll1/GFVdcUetxLpcLU6dORf/+/fHII49gxYoVmDt3LgwGA1566SVcc801uOqqq/Dhhx/i0UcfRVZWFi644AIA7i+dxYsX4+abb0ZmZiYsFgt27tyJXbt2IScnJ6By2mw2TJgwASdPnsT48ePRunVrfPXVV9i8eXOtx5eWlmLq1KkYPXo0rr32WrRo0cLvmJYtW2LAgAFYtWoV7rvvPp99BQUFUKlU3tYNq9WKO++8E0VFRRg3bhzatWuHrVu34sUXX8Tp06fxv//7vz7nr1y5EuXl5bj11lshCALeeustzJgxA99//31QrRMjR47E//7v/+Lnn3/Ggw8+WOsxxcXFmDx5MlJSUjBt2jQYjUYcO3YMa9asAQCkpqbiiSeewBNPPIERI0ZgxIgRAOATApxOJyZPnoxLLrkEjz76KPR6fb3l+vLLL1FeXo7bb78dlZWVePfddzFhwgSsWLECLVu2DPj9BVK2c/31r3/FF198gZEjR2LixInYvn07Fi9ejAMHDuDVV1/1Ofbw4cN44IEHcNNNN+H666/HZ599hlmzZqFXr17o3r17wOUkOhfDSogcPnwYS5YswbZt27Bv3z6kpaVh5cqVzfLaCxcurPV/r0888QRuu+22ZikD1W7WrFk4deoU/v73v+PKK6+s87jKykpce+21yM/PBwBcc801GDJkCObMmYMXX3wRo0aNAgAMHjwYeXl5+PLLLzFjxgwAwI8//oihQ4di3rx5513Ojz76CIcOHcLf//535OXlAQBuueUWjB07ttbjT58+jSeffBLjxo2r97qjRo3C448/jr1796JHjx7e7atWrcKAAQO8X7Rvv/02jh49ii+++AJdunQBAIwbNw6tW7fGkiVLMGnSJLRr1857/okTJ/Ddd98hKSkJANC1a1f85S9/wc8//1xnIAyERqNBly5dcPTo0TqP2bp1K0wmE5YsWYI+ffp4t3vCTVxcHEaOHIknnngC6enptdah3W7H1VdfjYcffjigch05cgTfffcd2rRpAwDIzc3FzTffjDfffNPbohOIQMpW0+7du/HFF1/g5ptvxvz58wEAd9xxB1JTU7F06VJs3rwZl156qff4gwcP4r333kP//v0BAHl5eRg6dCg+//xzPProowGXk+hc7AYKkX379mHdunXo3LkzunXr1uyvr9fr8dFHH/k8rrrqqmYvB/k6c+YMtFqtzxdtXW6++Wbv341GI7p27QqDweANDwCQlpYGo9Ho82VqNBqxb98+HDp06LzLuX79erRq1cpnHIfBYMAtt9xS6/FarRY33HBDg9cdMWIE1Go1CgoKvNv27t2L/fv3ewMYAKxevRqXXHIJjEYjSkpKvI/BgwfD5XLhP//5j891R40a5Q0qALxfjvWFjEDFxcWhvLy8zv2JiYkA3CHR4XCc9+s05j8Sw4cP9wYVAMjMzETfvn2xbt268379QHiuP3HiRJ/tkyZN8tnvceGFF3p/FoC7Jadr164h+blQbGNYCZFhw4Zh3bp1eOWVV9CrV69mf31RFJGVleXzqK1pnprX3LlzodFoMGXKFBQWFtZ5nE6nQ2pqqs+2xMREtG3bFoIg+G03m83e5/fffz/KysowcuRIXHPNNViwYAF2797dqHIeP34cnTt39nutrl271np8mzZtAhpMm5qaiksvvRSrVq3ybisoKIBarfZ2QQDulsmffvoJ2dnZPo+7774bAPymFJ8b/jzBpWa9nK+KigrEx8fXuX/gwIEYOXIkFi1ahEsvvRT33nsvPvvss1rH99RFrVajbdu2AR/fuXNnv21dunTB8ePHA77G+Th+/DhEUUSnTp18trdq1QpGo9Hv9WsL5UlJSTCZTE1aTop+DCshIooNV6Usy1iyZAlGjhyJ3r1748orr8SyZcuavnAUNt26dcObb74Jm82GSZMm4eTJk7UeV9dsk7q2y7Ls/fuAAQOwZs0aPP300+jevTs+/fRT3HDDDfjkk0+CfwN1aGiMRU2jR4/GoUOH8McffwBwdwFdeumlPuFMkiTk5OTg7bffrvVxbithIPVyPhwOBw4dOuT35VyTIAh45ZVX8NFHH3nH2cyZMwc33HBDvS0yNWm12oD+zQgFl8sV9DXODbF1aepZUxS7GFaa0VNPPYVXXnkF1113Hd544w1cf/31eP755/HBBx8EfW2bzYZLL70UGRkZGDVqFD7++OMQlJhCITMzE//4xz9QXFyMiRMnhmzhsZqSk5Nx44034sUXX8SPP/7oM8MjEB06dMCRI0f8vuwPHjwYdNmGDx8OjUaDgoIC/PHHHzh06BBGjx7tc0ynTp1QUVGBwYMH1/po37590OUIxLfffgubzYbLLruswWOzsrLw4IMP4vPPP8fzzz+Pffv2ebu7Av1yD9Thw4f9th06dMhn7ZekpKRaW5ZOnDjh87wxZevQoQMkSfJ7/TNnzsBsNjdq7RmiYDCsNJMjR47gn//8J+bMmYN7770XgwcPxn333Ye7774br776qs/0zMbq1KkTHnnkEbz00kv4xz/+gZ49e+Kxxx6LiMW5YkV2djZefPFFHDlyBFOmTIHFYgnZtc+ePevzPD4+Hp06dWpUt0Rubi5OnTrlsyCZ1WoNSeg1Go247LLLsGrVKnzzzTfQaDQYPny4zzF5eXnYunUrfvrpJ7/zzWYznE5n0OVoyO7du/H0008jKSkJd9xxR53HmUwmv1DXs2dPAPDWucFgABCabikA+P7771FUVOR9vn37dmzbts1nYcELLrgAhYWFPmF49+7d+PXXX32u1ZiyedYDWr58uc/2t99+22c/UVPjbKBmsnHjRgDAVVdd5fMP7+DBg/Hmm2/i5MmT6NChA6xWq9//hGrTrl07xMXFAYDfiP7LL78cDocDr732Gu66666wLzRFbiNGjMC8efO8gfWtt96CTqcL+rqjR4/GwIED0atXLyQnJ2PHjh349ttvceeddwZ8jVtuuQXvvfceHn30UezatQutWrXCV1991ajunvqMGjUK//M//4P3338fl112GYxGo8/+yZMnY+3atbjnnntw/fXXo1evXrBardi7dy++/fZb/PDDD35jeoLx3//+F5WVlZAkCaWlpfj111+xdu1aJCQkYNGiRWjVqlWd537xxRf44IMPMHz4cHTq1Anl5eX4+OOPkZCQ4A0Per0eF154IVatWoUuXbogOTkZ3bt395kR1RidOnXCbbfdhttuuw12ux3vvPMOkpOTMWXKFO8xN910E5YtW4bJkyfjpptuQnFxMT788ENceOGFPt1TjSnbRRddhOuvvx4fffQRzGYzBgwYgB07duCLL77A8OHDfWYCETUlhpVmcvbsWciy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sHDhQjzyyCPo0aMHPvjgA/z8889+i8J5pj8/9NBDsFqteO6555Cenq74ReGIiIhilaLCCuBebn/evHk+y+0/+OCDPsvtjx8/HsePH8fatWu922RZxhtvvOG33H6/fv18rl9zuX21Wo0RI0Zgzpw5EbHcPhERUSxSXFghIiIiqklRY1aIiIiIzsWwQkRERIrGsEJERESKxrBCREREisawQkRERIrGsEJERESKxrBCREREisawEqMOHDiAiRMnIisrCzk5OXjuuedgt9vDXaxGOXz4MB5//HGMHTsWGRkZGDNmTK3HffLJJxg5ciT69OmDa6+9Fv/617/8jikrK8OcOXMwcOBA9OvXD/fffz9OnTrld9yvv/6KW2+9FZmZmbjiiivwxhtv4NylijwLFF5++eXIzMzErbfeit9++83vWkVFRZgxYwb69euHgQMH4n//939rvdFmMFatWoV7770Xubm5yMrKwtixY/Hpp5/6lTmW6wgA1q1bhzvvvBOXXnopevfujSuvvBLPPPOM341V165di2uvvRZ9+vTByJEj8dlnn/ldy263Y8GCBcjJyUFWVhYmTpzod08yIPDfwVD+bEKpvLwcubm5SE9Px44dO5qszJH2efr888+Rnp7u93j++ed9jovlOjovMsWc0tJSOScnR77jjjvk9evXy5988ol8ySWXyE8++WS4i9Yoa9askXNzc+UZM2bIY8aMkUePHu13zMqVK+X09HT5pZdekjdt2iQ/9thjckZGhrx161af4yZNmiTn5ubK33zzjfz999/LY8aMka+99lrZ4XB4jzl06JCclZUlT58+Xd64caP89ttvy7169ZLfeustn2stXrxY7tWrl/z222/LGzdulKdPny7369dPPnLkiPcYu90ujxkzRh4zZoz8ww8/yN98842cm5srT5s2LaR1dMstt8gPPvig/M0338gbN26Un3/+efmiiy6SFy5cyDqq4csvv5QXLFggr169Wt68ebP87rvvygMHDpQnTpzoPeY///mP3LNnT/mxxx6TN23aJL/00ktyenq6vGrVKp9rPfbYY/Ill1wif/LJJ/L69evl22+/XR4yZIhsNpu9xwT6OxjKn02oPffcc/LgwYPlHj16yNu3b2+SMkfi5+mzzz6Te/ToIa9fv17eunWr93HixAnWURAYVmLQ66+/LmdlZclnz571bvvw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e01eu3atvHHjRnnp0qVyTk6OfM0113jrybMo3N/+9jd58+bN8ssvvyynp6fLBQUFPtd67LHH5P79+8uffvqp/NNPP8l33nlnnYvCNfQ7GMqfTVPYvHmz3zorsf55mjRpkrx48WL5xx9/lH/88Uf5sccek9PT0+WnnnqKdRQEhpUYtX//fnnChAlyZmamnJ2dLT/77LM+iwpFgqNHj8o9evSo9bF582bvcR9//LE8YsQIuVevXt5fwnOZzWZ59uzZcv/+/eWsrCz5vvvuq3WBvF9++UW++eab5d69e8u5ubny4sWLZUmSfI6RJEl+/fXX5dzcXLl3797yzTff7PePkCzL8p9//infd999clZWlty/f3959uzZcllZWQhqptoVV1xRZx0dPXrUe1ws15Esu/8hHzt2rNyvXz85KytLHj16tPz3v//d77U8q4j26tVLHjFihPzJJ5/4XauyslJ+9tln5ezsbDkzM1O+++675f379/sdF+jvYCh/NqFWW1gJdZkj7fM0b948+aqrrpIzMzPl3r17y2PGjJGXL1/uV+ZYrqPzIcjyOR1iRERERArCMStERESkaAwrREREpGgMK0RERKRoDCtERESkaAwrREREpGgMK0RERKRoDCtERESkaAwrRER1+Pzzz5Geno5jx46FuyhEMY1hhYjq5fnC3rFjh8/2srIy3HTTTejTpw/Wr18fptL5OnbsGNLT072PXr16YdCgQRg3bhxefPFFnDhxItxFJKLzoA53AYgo8lgsFkyaNAl79uzBokWLQnrDvFAYM2YMcnNzIcsyTCYTduzYgeXLl+Odd97BU089hdGjRwd0nbFjx2L06NHem8sRUXgwrBBRo1gsFkyePBl//PEHFi1aFP67sdYiIyMDY8eO9dl2/PhxTJo0CY8++ii6deuGiy66qM7zKyoqEBcXB5VKBZVK1dTFJaIGsBuIiAJWXl6OKVOmYNeuXVi4cCEuv/xy775Zs2ahX79+OHHiBPLz89GvXz8MGTIE7733HgBgz549uOuuu5CVlYUrrrgCK1as8Lm2w+HAokWLcNVVV6FPnz4YNGgQbrvtNmzYsCEkZe/QoQOeffZZOBwOvPnmm97tnm6uf//733jiiSeQnZ3tDWDnjlnJz8/HlVdeWev1b731Vtxwww0+27766ivccMMNyMzMxMCBA/Hggw/i5MmTPseMHz8eY8aMwf79+zF+/Hj07dsXQ4YM8SkjUaxjWCGigFitVkydOhU7d+7Eyy+/jCuuuMLvGJfLhalTp6Jt27Z45JFH0KFDB8ydOxeff/45pkyZgt69e+ORRx5BfHw8Hn30URw9etR77qJFi7Bo0SIMGjQIjz/+OO655x60b98eu3btCtl76NevHzp16oSNGzf67XvyySdx4MABTJ8+HVOnTq31/Ly8PBw7dgzbt2/32X78+HH89ttvPt1Lr732Gh599FF07twZs2bNwl133YVNmzbhjjvugNls9jnfZDJhypQpuOiii/Doo48iLS0Nzz//PNatWxeCd00U+dgNREQBmTVrFk6dOoW///3vdbYuVFZW4tprr0V+fj4A4JprrsGQIUMwZ84cvPjiixg1ahQAYPDgwcjLy8OXX36JGTNmAAB+/PFHDB06FPPmzWvS99G9e3f88MMPsFgsSEhI8G5PSkrCsmXL6u32GT58OLRaLVatWoXMzEzv9lWrVkEQBOTl5QFwh5eFCxdi5syZuOeee7zHXXXVVbj++uvx/vvv+2w/deoUFixYgOuuuw4AcNNNN2HYsGH47LPPFNnNRtTc2LJCRAE5c+YMtFot2rVrV+9xN998s/fvRqMRXbt2hcFg8H6RA0BaWhqMRqNPy4rRaMS+fftw6NChkJe9pri4OADuLq2abrnllgbHpyQkJCA3NxerVq2CLMve7QUFBcjKykL79u0BAGvWrIEkScjLy0NJSYn30bJlS3Tu3BlbtmzxK1PNMTZarRZ9+vTxqR+iWMawQkQBmTt3LjQaDaZMmYLCwsJaj9HpdEhNTfXZlpiYiLZt20IQBL/tNbtD7r//fpSVlWHkyJG45pprsGDBAuzevTvk76OiogIAEB8f77O9Y8eOAZ0/atQonDx5Elu3bgUAHDlyBLt27fIJY4cOHYIsy7jqqquQnZ3t8zhw4ACKi4t9rllb/SQlJcFkMjX6/RFFI3YDEVFAunXrhjfffBMTJkzApEmT8MEHH/i1stTVMlHX9pqtEwMGDMCaNWvwww8/YMOGDfj000+xfPlyPPnkkz6tNcHat28fWrRo4dMFBLiDViCuuOIKGAwGrFq1ChdffDFWrVoFURRx9dVXe4+RJAmCIODNN9+s9b17Wnc8OOOIqH5sWSGigGVmZuIf//gHiouLMXHiRJSUlIT0+snJybjxxhvx4osv4scff0R6ejoWLlwYsutv3boVR44cQU5OznlfIy4uDpdffjlWr14NSZJQUFCA/v37o02bNt5jOnXqBFmW0bFjRwwePNjvkZWVFYJ3QxQ7GFaIqFGys7Px4osv4siRI5gyZQosFktIrnv27Fmf5/Hx8ejUqRPsdntIrn/8+HHMmjULGo0GkydPDupao0aNwqlTp/DJJ59g9+7dPl1AgHsgrUqlwqJFi3xajwB3a9K575WI6sduICJqtBEjRmDevHmYM2cO7r33Xrz11ltBX3P06NEYOHAgevXqheTkZOzYsQPffvst7rzzzkZf6/fff8dXX30FWZZhNpuxY8cOfPfddxAEAc8991y9C8IFYujQoYiPj8eCBQugUqkwcuRIn/2dOnXCzJkz8cILL+D48eMYPnw44uPjcezYMXz//fe45ZZbgg5MRLGEYYWIzsuNN94Ik8mEBQsW4IEHHvAbA9JY48ePx9q1a7FhwwbY7Xa0b98eM2fOPK8v9ZUrV2LlypVQq9VISEhA586dMWHCBIwbN847YycYOp0Ow4YNw4oVKzB48GC0aNHC75hp06ahS5cuWLZsGV599VUA7oG0OTk5GDZsWNBlIIolgnxuGyURERGRgnDMChERESkau4GISPHsdnuDa44kJiZCr9c3U4mIqDkxrBCR4m3duhV33XVXvcc888wzfjcSJKLowDErRKR4JpOpwRsaXnjhhWjdunUzlYiImhPDChERESkaB9gSERGRojGsEBERkaIxrBAREZGiMawQERGRojGsEBERkaIxrBAREZGiMawQERGRojGsEBERkaL9f2aO15tfBm9gAAAAAElFTkSuQmCC\n"},"metadata":{}}]},{"cell_type":"code","source":["car_dataset['Car_Name'].value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"510vZjVJ5W4D","executionInfo":{"status":"ok","timestamp":1724394146249,"user_tz":-330,"elapsed":439,"user":{"displayName":"siddharth P santhosh","userId":"13793384757789431104"}},"outputId":"18a9981e-0b04-4ea3-e101-4685cd8005c7"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Car_Name\n","city                        26\n","corolla altis               16\n","verna                       14\n","fortuner                    11\n","brio                        10\n","                            ..\n","Honda CB Trigger             1\n","Yamaha FZ S                  1\n","Bajaj Pulsar 135 LS          1\n","Activa 4g                    1\n","Bajaj Avenger Street 220     1\n","Name: count, Length: 98, dtype: int64"]},"metadata":{},"execution_count":59}]},{"cell_type":"code","source":["#Encoding the set column\n","car_dataset.replace({'Fuel_Type':{'Petrol':0, 'Diesel':1, 'CNG':2}}, inplace = True)\n","#Encoding the smoker column\n","car_dataset.replace({'Seller_Type':{'Dealer':0, 'Individual':1}}, inplace = True)\n","#Encoding the region column\n","car_dataset.replace({'Transmission':{'Manual':0, 'Automatic':1}}, inplace = True)"],"metadata":{"id":"AKzQFzhJfDVW"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["X = car_dataset.drop(columns = ['Selling_Price', 'Car_Name'], axis =1)\n","Y = car_dataset['Selling_Price']"],"metadata":{"id":"EctFJFD3g-uU"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(X)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nzRA0gSjhcwo","executionInfo":{"status":"ok","timestamp":1724389488198,"user_tz":-330,"elapsed":3,"user":{"displayName":"siddharth P santhosh","userId":"13793384757789431104"}},"outputId":"c5b46bf2-62bd-4bf8-fb91-ee633f0dba69"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["     Year  Present_Price  Kms_Driven  Fuel_Type  Seller_Type  Transmission  \\\n","0    2014           5.59       27000          0            0             0   \n","1    2013           9.54       43000          1            0             0   \n","2    2017           9.85        6900          0            0             0   \n","3    2011           4.15        5200          0            0             0   \n","4    2014           6.87       42450          1            0             0   \n","..    ...            ...         ...        ...          ...           ...   \n","296  2016          11.60       33988          1            0             0   \n","297  2015           5.90       60000          0            0             0   \n","298  2009          11.00       87934          0            0             0   \n","299  2017          12.50        9000          1            0             0   \n","300  2016           5.90        5464          0            0             0   \n","\n","     Owner  \n","0        0  \n","1        0  \n","2        0  \n","3        0  \n","4        0  \n","..     ...  \n","296      0  \n","297      0  \n","298      0  \n","299      0  \n","300      0  \n","\n","[301 rows x 7 columns]\n"]}]},{"cell_type":"code","source":["print(Y)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xfWMIEhWhetx","executionInfo":{"status":"ok","timestamp":1724389491374,"user_tz":-330,"elapsed":435,"user":{"displayName":"siddharth P santhosh","userId":"13793384757789431104"}},"outputId":"65320f5d-406b-4959-cabf-049f4c7be3b0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0       3.35\n","1       4.75\n","2       7.25\n","3       2.85\n","4       4.60\n","       ...  \n","296     9.50\n","297     4.00\n","298     3.35\n","299    11.50\n","300     5.30\n","Name: Selling_Price, Length: 301, dtype: float64\n"]}]},{"cell_type":"code","source":["X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, random_state =2)\n"],"metadata":{"id":"msgP5waOhkG1"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(X.shape,X_train.shape, X_test.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EKapckIVi_PZ","executionInfo":{"status":"ok","timestamp":1724389530751,"user_tz":-330,"elapsed":406,"user":{"displayName":"siddharth P santhosh","userId":"13793384757789431104"}},"outputId":"f9e5569c-66c3-4ff1-a087-57958cd66520"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(301, 7) (240, 7) (61, 7)\n"]}]},{"cell_type":"code","source":["print(X_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tDQlRhu_jMez","executionInfo":{"status":"ok","timestamp":1724389534487,"user_tz":-330,"elapsed":6,"user":{"displayName":"siddharth P santhosh","userId":"13793384757789431104"}},"outputId":"c1744103-1dc7-4de3-e5bb-cd79ff744e86"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["     Year  Present_Price  Kms_Driven  Fuel_Type  Seller_Type  Transmission  \\\n","235  2017           9.40       15141          0            0             0   \n","106  2014           3.45       16500          0            1             0   \n","10   2017           3.60        2135          0            0             0   \n","152  2012           0.99       13000          0            1             0   \n","77   2004          12.35      135154          0            0             1   \n","..    ...            ...         ...        ...          ...           ...   \n","75   2015           6.80       36000          0            0             0   \n","22   2011           8.01       50000          0            0             1   \n","72   2013          18.61       56001          0            0             0   \n","15   2016          10.79       43000          1            0             0   \n","168  2013           0.73       12000          0            1             0   \n","\n","     Owner  \n","235      0  \n","106      1  \n","10       0  \n","152      0  \n","77       0  \n","..     ...  \n","75       0  \n","22       0  \n","72       0  \n","15       0  \n","168      0  \n","\n","[240 rows x 7 columns]\n"]}]},{"cell_type":"code","source":["print(Y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"j03Te6CmjQmZ","executionInfo":{"status":"ok","timestamp":1724389537408,"user_tz":-330,"elapsed":430,"user":{"displayName":"siddharth P santhosh","userId":"13793384757789431104"}},"outputId":"d459d826-ae50-4ecf-d440-25c7cf17b9c4"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["235    9.10\n","106    1.35\n","10     2.85\n","152    0.50\n","77     1.50\n","       ... \n","75     3.95\n","22     4.40\n","72     7.45\n","15     7.75\n","168    0.42\n","Name: Selling_Price, Length: 240, dtype: float64\n"]}]},{"cell_type":"code","source":["regressor = LinearRegression()\n","regressor.fit(X_train, Y_train) #training algorithm\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":74},"id":"T7CvPZHxjiR6","executionInfo":{"status":"ok","timestamp":1724389541839,"user_tz":-330,"elapsed":660,"user":{"displayName":"siddharth P santhosh","userId":"13793384757789431104"}},"outputId":"89159d38-6454-4a18-e1f4-6f153c9ae6b1"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["LinearRegression()"],"text/html":["<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression()</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":36}]},{"cell_type":"code","source":["#prediction on training data\n","training_data_prediction = regressor.predict(X_train)"],"metadata":{"id":"_67ikhPKjwJP"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["r2_train = metrics.r2_score(Y_train, training_data_prediction)\n","print('R squared value:',r2_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7mXSr464kH5i","executionInfo":{"status":"ok","timestamp":1724389550800,"user_tz":-330,"elapsed":4,"user":{"displayName":"siddharth P santhosh","userId":"13793384757789431104"}},"outputId":"20d9d366-a29f-4c66-db99-91833e46540b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["R squared value: 0.8838169193709796\n"]}]},{"cell_type":"code","source":["#prediction on testing data\n","test_data_prediction = regressor.predict(X_test)"],"metadata":{"id":"osdLY3OFkdz7"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#squared value\n","r2_test = metrics.r2_score(Y_test, test_data_prediction)\n","print('R squared value:', r2_test)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DN7M5Dj8kuMi","executionInfo":{"status":"ok","timestamp":1724389556217,"user_tz":-330,"elapsed":3,"user":{"displayName":"siddharth P santhosh","userId":"13793384757789431104"}},"outputId":"15be6cea-e219-4f72-e44d-e97d8df7d4a8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["R squared value: 0.8401532365377697\n"]}]},{"cell_type":"code","source":["X_test"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":423},"id":"hdKIxKju9ZHC","executionInfo":{"status":"ok","timestamp":1724395149146,"user_tz":-330,"elapsed":738,"user":{"displayName":"siddharth P santhosh","userId":"13793384757789431104"}},"outputId":"4bc42223-29db-4de1-93d6-1118aa2ce6ef"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     Year  Present_Price  Kms_Driven  Fuel_Type  Seller_Type  Transmission  \\\n","99   2010         20.450       50024          1            0             0   \n","161  2014          0.826       23000          0            1             0   \n","89   2014          6.760       40000          0            0             0   \n","30   2012          5.980       51439          1            0             0   \n","232  2015         14.790       12900          0            0             1   \n","..    ...            ...         ...        ...          ...           ...   \n","172  2014          0.640       13700          0            1             0   \n","94   2008         22.780       89000          0            0             1   \n","160  2011          0.950       24000          0            1             0   \n","199  2007          0.580       53000          0            1             0   \n","91   2014         16.090       58242          1            0             0   \n","\n","     Owner  \n","99       0  \n","161      0  \n","89       0  \n","30       0  \n","232      0  \n","..     ...  \n","172      0  \n","94       0  \n","160      0  \n","199      0  \n","91       0  \n","\n","[61 rows x 7 columns]"],"text/html":["\n","  <div id=\"df-3d7c307c-ec24-473b-b2be-cf6ca809140a\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Year</th>\n","      <th>Present_Price</th>\n","      <th>Kms_Driven</th>\n","      <th>Fuel_Type</th>\n","      <th>Seller_Type</th>\n","      <th>Transmission</th>\n","      <th>Owner</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>99</th>\n","      <td>2010</td>\n","      <td>20.450</td>\n","      <td>50024</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>161</th>\n","      <td>2014</td>\n","      <td>0.826</td>\n","      <td>23000</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>89</th>\n","      <td>2014</td>\n","      <td>6.760</td>\n","      <td>40000</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>30</th>\n","      <td>2012</td>\n","      <td>5.980</td>\n","      <td>51439</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>232</th>\n","      <td>2015</td>\n","      <td>14.790</td>\n","      <td>12900</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>172</th>\n","      <td>2014</td>\n","      <td>0.640</td>\n","      <td>13700</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>94</th>\n","      <td>2008</td>\n","      <td>22.780</td>\n","      <td>89000</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>160</th>\n","      <td>2011</td>\n","      <td>0.950</td>\n","      <td>24000</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>199</th>\n","      <td>2007</td>\n","      <td>0.580</td>\n","      <td>53000</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>91</th>\n","      <td>2014</td>\n","      <td>16.090</td>\n","      <td>58242</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>61 rows × 7 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3d7c307c-ec24-473b-b2be-cf6ca809140a')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-3d7c307c-ec24-473b-b2be-cf6ca809140a button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-3d7c307c-ec24-473b-b2be-cf6ca809140a');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-12a5e1f3-f8c5-49d5-a412-4dcae93052d6\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-12a5e1f3-f8c5-49d5-a412-4dcae93052d6')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-12a5e1f3-f8c5-49d5-a412-4dcae93052d6 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_dbd716d3-3c00-4170-963a-d79ddf952ffe\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('X_test')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_dbd716d3-3c00-4170-963a-d79ddf952ffe button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('X_test');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"X_test","summary":"{\n  \"name\": \"X_test\",\n  \"rows\": 61,\n  \"fields\": [\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 2007,\n        \"max\": 2017,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          2007,\n          2014,\n          2013\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Present_Price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.814873332597184,\n        \"min\": 0.47,\n        \"max\": 30.61,\n        \"num_unique_values\": 43,\n        \"samples\": [\n          18.61,\n          0.75,\n          4.15\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Kms_Driven\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 25104,\n        \"min\": 500,\n        \"max\": 135000,\n        \"num_unique_values\": 54,\n        \"samples\": [\n          7000,\n          13700,\n          75000\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fuel_Type\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 2,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          1,\n          0,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Seller_Type\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Transmission\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Owner\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":60}]},{"cell_type":"code","source":["input_data = (2020, 8.45, 21030, 0, 1, 0,0)\n","#changing the input into a numpy array(tuple to a numpy array)\n","input_data_as_numpy_array = np.asarray(input_data)\n","#reshape array to 2d\n","input_data_reshaped = input_data_as_numpy_array.reshape(1, -1) #1= np of rows, -1 = no of columns should be determined automatically\n","prediction= regressor.predict(input_data_reshaped)\n","print(prediction)\n","print('price of car', prediction[0])\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qYnhRtWTlED7","executionInfo":{"status":"ok","timestamp":1724395530488,"user_tz":-330,"elapsed":421,"user":{"displayName":"siddharth P santhosh","userId":"13793384757789431104"}},"outputId":"10d296aa-ec36-42be-fbf5-be03436f0d52"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[6.50504007]\n","price of car 6.505040066626748\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:439: UserWarning: X does not have valid feature names, but LinearRegression was fitted with feature names\n","  warnings.warn(\n"]}]},{"cell_type":"code","source":["Y_test"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Sy24SFIb9fcB","executionInfo":{"status":"ok","timestamp":1724395164862,"user_tz":-330,"elapsed":415,"user":{"displayName":"siddharth P santhosh","userId":"13793384757789431104"}},"outputId":"b3b49bb4-b856-42b1-8be8-11d3417b036f"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["99      9.65\n","161     0.45\n","89      4.75\n","30      3.10\n","232    11.45\n","       ...  \n","172     0.40\n","94      4.00\n","160     0.45\n","199     0.12\n","91     11.25\n","Name: Selling_Price, Length: 61, dtype: float64"]},"metadata":{},"execution_count":61}]}]}